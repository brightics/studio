{
    "script": {
        "type": "",
        "content": ""
    },
    "specJson": {
        "category": "clustering",
        "func": "brightics.function.clustering$gaussian_mixture_train06900",
        "name": "brightics.function.clustering$gaussian_mixture_train",
        "context": "python",
        "label": "Gaussian Mixture Train",
        "description": "This function provides a composite Gaussian models for given data. A GMM represents a composite distribution of independent Gaussian distributions with associated \"mixing\" weights specifying each's contribution to the composite.\n\nReference:\n+ <https://en.wikipedia.org/wiki/Mixture_model#Gaussian_mixture_model>",
        "tags": [
            "gaussian_mixture_train",
            "gmm"
        ],
        "version": "3.6",
        "inputs": {
            "table": ""
        },
        "outputs": {
            "model": ""
        },
        "meta": {
            "table": {
                "type": "table"
            },
            "model": {
                "type": "model"
            }
        },
        "params": [
            {
                "id": "input_cols",
                "label": "Input Columns",
                "description": "",
                "mandatory": true,
                "items": [],
                "visibleOption": [],
                "control": "ColumnSelector",
                "columnType": [
                    "Integer",
                    "Long",
                    "Float",
                    "Double"
                ],
                "validation": [],
                "multiple": true
            },
            {
                "id": "number_of_components",
                "label": "Number of Components",
                "description": "The number of mixture components.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "placeHolder": "1 (value >= 1)",
                "type": "Integer",
                "min": 1
            },
            {
                "id": "covariance_type",
                "label": "Covariance Type",
                "description": "String describing the type of covariance parameters to use. Must be one of:\n\n full : each component has its own general covariance matrix\n tied : all components share the same general covariance matrix\n diagonal : each component has its own diagonal covariance matrix\n spherical : each component has its own single variance",
                "mandatory": false,
                "items": [
                    {
                        "label": "Full",
                        "value": "full",
                        "default": true
                    },
                    {
                        "label": "Tied",
                        "value": "tied",
                        "default": false
                    },
                    {
                        "label": "Diagonal",
                        "value": "diag",
                        "default": false
                    },
                    {
                        "label": "Spherical",
                        "value": "spherical",
                        "default": false
                    }
                ],
                "visibleOption": [],
                "control": "RadioButton",
                "columnType": [],
                "validation": []
            },
            {
                "id": "tolerance",
                "label": "Tolerance",
                "description": "The convergence threshold. EM iterations will stop when the lower bound average gain is below this threshold.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "type": "Double",
                "min": 0,
                "placeHolder": "0.001 (value > 0)"
            },
            {
                "id": "regularize_covariance",
                "label": "Regularization of Covariance",
                "description": "Non-negative regularization added to the diagonal of covariance. Allows to assure that the covariance matrices are all positive.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "type": "Double",
                "min": 0,
                "placeHolder": "0.000001 (value > 0)"
            },
            {
                "id": "max_iteration",
                "label": "Number of Iteration",
                "description": "The number of EM iterations to perform.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "type": "Integer",
                "min": 1,
                "placeHolder": "100 (value >= 1)"
            },
            {
                "id": "initial_params",
                "label": "Method to Initialize",
                "description": "The method used to initialize the weights, the means and the precisions. Must be one of:\n\n'kmeans' : responsibilities are initialized using kmeans.\n'random' : responsibilities are initialized randomly.",
                "mandatory": false,
                "items": [
                    {
                        "label": "K-means",
                        "value": "kmeans",
                        "default": true
                    },
                    {
                        "label": "Random",
                        "value": "random",
                        "default": false
                    }
                ],
                "visibleOption": [],
                "control": "RadioButton",
                "columnType": [],
                "validation": []
            },
            {
                "id": "seed",
                "label": "Seed",
                "description": "Random seed",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "type": "Integer"
            },
            {
                "id": "group_by",
                "label": "Group By",
                "description": "",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "ColumnSelector",
                "columnType": [],
                "validation": [],
                "type": "Integer",
                "multiple": true
            }
        ]
    },
    "md": ""
}