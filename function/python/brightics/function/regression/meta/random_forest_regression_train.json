{
    "script": {
        "type": "",
        "content": ""
    },
    "specJson": {
        "category": "regression",
        "func": "brightics.function.regression$random_forest_regression_train27560",
        "name": "brightics.function.regression$random_forest_regression_train",
        "context": "python",
        "label": "Random Forest Regression Train",
        "description": "Fit a random forest regression model. \n\"This is an ensemble learning method for regression that operates by constructing a multitude of decision trees at training time and outputting the class that is the mean prediction of the individual trees. Random decision forests correct for decision trees' habit of overfitting to their training set.\"\n\nReference: \n+ <https://en.wikipedia.org/wiki/Random_forest>",
        "tags": [],
        "version": "3.6",
        "inputs": {
            "table": ""
        },
        "outputs": {
            "model": ""
        },
        "meta": {
            "table": {
                "type": "table"
            },
            "model": {
                "type": "model"
            }
        },
        "params": [
            {
                "id": "feature_cols",
                "label": "Feature Columns",
                "description": "",
                "mandatory": true,
                "items": [],
                "visibleOption": [],
                "control": "ColumnSelector",
                "columnType": [
                    "Integer",
                    "Long",
                    "Float",
                    "Double"
                ],
                "validation": [],
                "type": "Double",
                "multiple": true
            },
            {
                "id": "label_col",
                "label": "Label Column",
                "description": "",
                "mandatory": true,
                "items": [],
                "visibleOption": [],
                "control": "ColumnSelector",
                "columnType": [
                    "Integer",
                    "Long",
                    "Float",
                    "Double"
                ],
                "validation": [],
                "multiple": false
            },
            {
                "id": "n_estimators",
                "label": "Number of Trees",
                "description": "The number of trees in the forest.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "placeHolder": "10 (value >= 1)",
                "type": "Integer",
                "min": 1
            },
            {
                "id": "criterion",
                "label": "Feature Selection Criterion",
                "description": "The function to measure the quality of a split. Supported criteria are “mse” for the mean squared error, which is equal to variance reduction as feature selection criterion, and “mae” for the mean absolute error.",
                "mandatory": false,
                "items": [
                    {
                        "label": "Mean Squared Error",
                        "value": "mse",
                        "default": true
                    },
                    {
                        "label": "Mean Absolute Error",
                        "value": "mae",
                        "default": false
                    }
                ],
                "visibleOption": [],
                "control": "RadioButton",
                "columnType": [],
                "validation": []
            },
            {
                "id": "max_depth",
                "label": "Maximum Depth",
                "description": "The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
				"placeHolder": "value >= 1",
                "type": "Integer",
                "min": 1
            },
            {
                "id": "min_samples_split",
                "label": "Minimum Number of Samples to Split",
                "description": "The minimum number of samples required to split an internal node.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "placeHolder": "2 (value >= 2)",
                "type": "Integer",
                "min": 2
            },
            {
                "id": "min_samples_leaf",
                "label": "Minimum Number of Samples in a Leaf",
                "description": "The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least min_samples_leaf training samples in each of the left and right branches. This may have the effect of smoothing the model, especially in regression.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "placeHolder": "1 (value >= 1)",
                "type": "Integer",
                "min": 1
            },
            {
                "id": "max_features",
                "label": "Number of Features",
                "description": "The number of features to consider when looking for the best split:\n\nIf int, then consider max_features features at each split.\nIf float, then max_features is a fraction and int(max_features * n_features) features are considered at each split.\n\nIf “sqrt”, then max_features=sqrt(n_features) (same as “auto”).\nIf “log2”, then max_features=log2(n_features).\nIf None, then max_features=n_features.",
                "mandatory": false,
                "items": [
                    {
                        "label": "sqrt(n)",
                        "value": "sqrt",
                        "default": false
                    },
                    {
                        "label": "log2(n)",
                        "value": "log2",
                        "default": false
                    },
                    {
                        "label": "n",
                        "value": "None",
                        "default": true
                    }
                ],
                "visibleOption": [],
                "control": "RadioButton",
                "columnType": [],
                "validation": []
            },
            {
                "id": "random_state",
                "label": "Seed",
                "description": "If int, random_state is the seed used by the random number generator; ",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "placeHolder": "",
                "type": "Integer"
            },
            {
                "id": "group_by",
                "label": "Group By",
                "description": "",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "ColumnSelector",
                "columnType": [],
                "validation": [],
                "multiple": true
            }
        ]
    },
    "md": ""
}