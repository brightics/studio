{
    "script": {
        "type": "",
        "content": ""
    },
    "specJson": {
        "category": "regression",
        "func": "brightics.function.regression$penalized_regression_traintrain",
        "name": "brightics.function.regression$penalized_regression_train",
        "context": "python",
        "label": "Penalized Regression Train",
        "description": "",
        "tags": [],
        "version": "3.6",
        "inputs": {
            "table": ""
        },
        "outputs": {
            "model": ""
        },
        "meta": {
            "table": {
                "type": "table"
            },
            "model": {
                "type": "model"
            }
        },
        "params": [
            {
                "id": "feature_cols",
                "label": "Feature Columns",
                "description": "Feature columns\n- Allowed column type : Integer, Long, Float, Double",
                "mandatory": true,
                "items": [],
                "visibleOption": [],
                "control": "ColumnSelector",
                "columnType": [
                    "Integer",
                    "Long",
                    "Float",
                    "Double"
                ],
                "validation": [],
                "multiple": true
            },
            {
                "id": "label_col",
                "label": "Label Column",
                "description": "Label Column\n- Allowed column type : Integer, Long, Float, Double",
                "mandatory": true,
                "items": [],
                "visibleOption": [],
                "control": "ColumnSelector",
                "columnType": [
                    "Integer",
                    "Long",
                    "Float",
                    "Double"
                ],
                "validation": [],
                "multiple": false
            },
            {
                "id": "regression_type",
                "label": "Regression Type",
                "description": "Choose among 'Ridge', 'Lasso', and 'ElasticNet'.",
                "mandatory": false,
                "items": [
                    {
                        "label": "Ridge",
                        "value": "ridge",
                        "default": true
                    },
                    {
                        "label": "Lasso",
                        "value": "lasso",
                        "default": false
                    },
                    {
                        "label": "ElasticNet",
                        "value": "elastic_net",
                        "default": false
                    }
                ],
                "visibleOption": [],
                "control": "RadioButton",
                "columnType": [],
                "validation": []
            },
            {
                "id": "alpha",
                "label": "Regularization (Penalty Weight)",
                "description": "Constant that multiplies the penalty terms. Defaults to 1.0.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "placeHolder": "1.0",
                "type": "Double"
            },
            {
                "id": "l1_ratio",
                "label": "L1 Ratio",
                "description": "The ElasticNet mixing parameter, with 0 <= l1_ratio <= 1. For l1_ratio = 0 the penalty is an L2 penalty. For l1_ratio = 1 it is an L1 penalty. For 0 < l1_ratio < 1, the penalty is a combination of L1 and L2. Defaults to 0.5.",
                "mandatory": false,
                "items": [],
                "visibleOption": [
                    {
                        "id": "regression_type",
                        "value": "elastic_net"
                    }
                ],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "placeHolder": "0<= value <=1",
                "type": "Double",
                "min": 0,
                "max": 1
            },
            {
                "id": "fit_intercept",
                "label": "Fit Intercept",
                "description": "Whether the intercept should be estimated or not. If False, the data is assumed to be already centered.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "BooleanRadio",
                "columnType": [],
                "validation": [],
                "defaultValue": true
            },
            {
                "id": "max_iter",
                "label": "Iterations",
                "description": "The maximum number of iterations",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "placeHolder": "1000",
                "type": "Integer",
                "min": 0
            },
            {
                "id": "tol",
                "label": "Tolerance",
                "description": "The tolerance for the optimization: if the updates are smaller than tolerance, the optimization code checks the dual gap for optimality and continues until it is smaller than tolerance.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "placeHolder": "0.0001",
                "type": "Double"
            },
            {
                "id": "random_state",
                "label": "Seed",
                "description": "The seed of the pseudo random number generator that selects a random feature to update. If int, random_state is the seed used by the random number generator;  If None, the random number generator is the RandomState instance used by np.random.(default=None)",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "type": "Integer",
                "placeHolder": "(default=None)"
            },
            {
                "id": "group_by",
                "label": "Group By",
                "description": "Columns to group by",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "ColumnSelector",
                "columnType": [],
                "validation": [],
                "multiple": true
            }
        ]
    },
    "md": ""
}