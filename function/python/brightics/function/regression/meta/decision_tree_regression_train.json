{
    "script": {
        "type": "",
        "content": ""
    },
    "specJson": {
        "category": "regression",
        "func": "brightics.function.regression$decision_tree_regression_train49842",
        "name": "brightics.function.regression$decision_tree_regression_train",
        "context": "python",
        "label": "Decision Tree Regression Train",
        "description": "A decision tree regressor.",
        "tags": [
            "decision",
            "tree",
            "classification",
            "train",
            "classifier"
        ],
        "version": "3.6",
        "inputs": {
            "table": ""
        },
        "outputs": {
            "model": ""
        },
        "meta": {
            "table": {
                "type": "table"
            },
            "model": {
                "type": "model"
            }
        },
        "params": [
            {
                "id": "feature_cols",
                "label": "Feature Columns",
                "description": "",
                "mandatory": true,
                "items": [],
                "visibleOption": [],
                "control": "ColumnSelector",
                "columnType": [
                    "Integer",
                    "Long",
                    "Float",
                    "Double",
                    "Double[]"
                ],
                "validation": [],
                "multiple": true,
                "rowCount": 5
            },
            {
                "id": "label_col",
                "label": "Label Column",
                "description": "",
                "mandatory": true,
                "items": [],
                "visibleOption": [],
                "control": "ColumnSelector",
                "columnType": [
                    "Integer",
                    "Long",
                    "Float",
                    "Double"
                ],
                "validation": [],
                "multiple": false
            },
            {
                "id": "criterion",
                "label": "Criterion",
                "description": "The function to measure the quality of a split.",
                "mandatory": false,
                "items": [
                    {
                        "label": "MSE",
                        "value": "mse",
                        "default": true
                    },
                    {
                        "label": "Friedman MSE",
                        "value": "friedman_mse",
                        "default": false
                    },
                    {
                        "label": "MAE",
                        "value": "mae",
                        "default": false
                    }
                ],
                "visibleOption": [],
                "control": "RadioButton",
                "columnType": [],
                "validation": []
            },
            {
                "id": "splitter",
                "label": "Splitter",
                "description": "The strategy used to choose the split at each node. ",
                "mandatory": false,
                "items": [
                    {
                        "label": "Best",
                        "value": "best",
                        "default": true
                    },
                    {
                        "label": "Random",
                        "value": "random",
                        "default": false
                    }
                ],
                "visibleOption": [],
                "control": "RadioButton",
                "columnType": [],
                "validation": []
            },
            {
                "id": "max_depth",
                "label": "Max Depth",
                "description": "The maximum depth of the tree.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "type": "Integer",
                "min": 1,
                "placeHolder": "(value >= 1)"
            },
            {
                "id": "min_samples_split",
                "label": "Min Samples Splits",
                "description": "The minimum number of samples required to split an internal node.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "type": "Integer",
                "min": 2,
                "placeHolder": "2 (value >= 2)"
            },
            {
                "id": "min_samples_leaf",
                "label": "Min Samples Leaf",
                "description": "The minimum number of samples required to be at a leaf node.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "placeHolder": "1 (value >= 1)",
                "type": "Integer",
                "min": 1
            },
            {
                "id": "min_weight_fraction_leaf",
                "label": "Min Weight Fraction Leaf",
                "description": "The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "type": "Double",
                "min": 0.0,
                "placeHolder": "0.0 (value >= 0.0)"
            },
            {
                "id": "max_features",
                "label": "Max Features",
                "description": "The number of features to consider when looking for the best split.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "type": "Integer",
                "min": 1,
                "placeHolder": "(value >= 1)"
            },
            {
                "id": "random_state",
                "label": "Seed",
                "description": "The seed used by the random number generator.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "type": "Integer"
            },
            {
                "id": "max_leaf_nodes",
                "label": "Max Leaf Nodes",
                "description": "Grow a tree with this value in best-first fashion.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "type": "Integer",
                "placeHolder": "(value > 1)"
            },
            {
                "id": "min_impurity_decrease",
                "label": "Min Impurity Decrease",
                "description": "A node will be split if this split induces a decrease of the impurity greater than or equal to this value.",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "InputBox",
                "columnType": [],
                "validation": [],
                "placeHolder": "0.0 (value >= 0.0)",
                "type": "Double",
                "min": 0.0
            },
            {
                "id": "group_by",
                "label": "Group By",
                "description": "",
                "mandatory": false,
                "items": [],
                "visibleOption": [],
                "control": "ColumnSelector",
                "columnType": [],
                "validation": [],
                "multiple": true,
                "rowCount": 5
            }
        ]
    },
    "md": "## Format\n### Python\n\n```\nfrom brightics.function import decision_tree_classification_train\nres = decision_tree_classification_train().process(table = , feature_cols = , feature_cols = , label_col = , criterion = , splitter = , max_depth = , min_samples_split = , min_samples_leaf = , min_weight_fraction_leaf = , max_features = , random_state = , max_leaf_nodes = , min_impurity_decrease = )\nres['model']\n```\n\n## Description\nA decision tree classifier.\nReference:\n+ <http://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html>\n\n---\n\n## Properties\n### VA\n#### Inputs\n1. **table**<b style=\"color:red\">*</b>: table\n\n#### Parameters\n1. **Feature Columns**<b style=\"color:red\">*</b>: Feature Columns. Integer, Long, Float, Double, String, Boolean are allowed.\n2. **Label Column**<b style=\"color:red\">*</b>: Label Column. Integer, Long, Float, Double, String, Boolean are allowed.\n3. **Criterion**: The function to measure the quality of a split. \n4. **Splitter**: The strategy used to choose the split at each node. \n5. **Max Depth**: The maximum depth of the tree.\n6. **Min Samples Splits**: The minimum number of samples required to split an internal node.\n7. **Min Samples Leaf**: The minimum number of samples required to be at a leaf node.\n8. **Min Weight Fraction Leaf**: The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node.\n9. **Max Features**: The number of features to consider when looking for the best split.\n10. **Seed**: The seed used by the random number generator.\n11. **Max Leaf Nodes**: Grow a tree with this value in best-first fashion.\n12. **Min Impurity Decrease**: A node will be split if this split induces a decrease of the impurity greater than or equal to this value.\n\n\n#### Outputs\n1. **model**: model\n\n### Python\n#### Inputs\n1. **table**<b style=\"color:red\">*</b>: table\n\n#### Parameters\n1. **feature_cols**<b style=\"color:red\">*</b>: Feature Columns. Integer, Long, Float, Double, String, Boolean are allowed.\n2. **label_col**<b style=\"color:red\">*</b>: Label Column. Integer, Long, Float, Double, String, Boolean are allowed.\n3. **criterion**: The function to measure the quality of a split. \n4. **splitter**: The strategy used to choose the split at each node.\n5. **max_depth**: The maximum depth of the tree. \n6. **min_samples_split**: The minimum number of samples required to split an internal node. \n7. **min_samples_leaf**: The minimum number of samples required to be at a leaf node. \n8. **min_weight_fraction_leaf**: The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node.\n9. **max_features**: The number of features to consider when looking for the best split. \n10. **random_state**: The seed used by the random number generator.\n11. **max_leaf_nodes**: Grow a tree with this value in best-first fashion.\n12. **min_impurity_decrease**: A node will be split if this split induces a decrease of the impurity greater than or equal to this value.\n\n\n#### Outputs\n1. **model**: model\n"
}
