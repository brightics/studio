/**
 * Created by daewon.park on 2016-09-22.
 */
var common = require('./common');
const getQuery = require('./query-utils').getQuery;

const DDL_CHECK_TABLE_DEFAULT = common.DDL_CHECK_TABLE;
var query = common.query;
var batchUpdate = common.batchUpdate;

const DDL_DROP_FUNCTION_LABEL_TABLE_DEFAULT = 'DROP TABLE IF EXISTS brtc_function_label';
const DDL_CREATE_FUNCTION_LABEL_TABLE_DEFAULT = 'CREATE TABLE brtc_function_label (' +
    'function_name character varying(255) NOT NULL, ' +
    'locale character varying(255) NOT NULL, ' +
    'parameter character varying(255) NOT NULL, ' +
    'label character varying(255), ' +
    'CONSTRAINT brtc_function_label_pkey PRIMARY KEY (function_name, locale, parameter) ' +
    ') WITH ( OIDS=FALSE )';

const DDL_CREATE_FUNCTION_LABEL_TABLE_SQLITE = 'CREATE TABLE brtc_function_label (' +
    'function_name character varying(255) NOT NULL, ' +
    'locale character varying(255) NOT NULL, ' +
    'parameter character varying(255) NOT NULL, ' +
    'label character varying(255), ' +
    'CONSTRAINT brtc_function_label_pkey PRIMARY KEY (function_name, locale, parameter) ' +
    ')';

const FUNCTION_LABEL_CREATE_DEFAULT = 'INSERT INTO brtc_function_label (function_name, locale, parameter, label) VALUES ($1, $2, $3, $4)';

const stmt = {
    DDL_CHECK_TABLE: {
        default: DDL_CHECK_TABLE_DEFAULT
    },
    DDL_CREATE_FUNCTION_LABEL_TABLE: {
        default: DDL_CREATE_FUNCTION_LABEL_TABLE_DEFAULT,
        sqlite: DDL_CREATE_FUNCTION_LABEL_TABLE_SQLITE
    },
    DDL_DROP_FUNCTION_LABEL_TABLE: {
        default: DDL_DROP_FUNCTION_LABEL_TABLE_DEFAULT
    },
    FUNCTION_LABEL_CREATE: {
        default: FUNCTION_LABEL_CREATE_DEFAULT
    }
};

const DDL_CHECK_TABLE = getQuery(stmt, 'DDL_CHECK_TABLE');
const DDL_CREATE_FUNCTION_LABEL_TABLE = getQuery(stmt, 'DDL_CREATE_FUNCTION_LABEL_TABLE');
const DDL_DROP_FUNCTION_LABEL_TABLE = getQuery(stmt, 'DDL_DROP_FUNCTION_LABEL_TABLE');
const FUNCTION_LABEL_CREATE = getQuery(stmt, 'FUNCTION_LABEL_CREATE');

module.exports = {
    function: {
        label: {
            checkSchema: function (errCallback, doneCallback) {

                var printError = function (err) {
                    console.log(err)
                };

                query(DDL_DROP_FUNCTION_LABEL_TABLE, [], printError, function (result, obj, sql) {
                    query(DDL_CHECK_TABLE, ['brtc_function_label'], errCallback, function (result) {
                            query(DDL_CREATE_FUNCTION_LABEL_TABLE, [], errCallback, function () {
                                var records = [];
                                records.push(['load.load', 'en', 'fs-paths', 'Input Path']);
                                records.push(['load.load', 'en', 'null-value', 'Null Value']);
                                records.push(['load.imputeRemoveLine.imputeNumberTypeFillColumn', 'en', 'columns', 'Impute for Number']);
                                records.push(['load.imputeNumberTypeFillColumn', 'en', 'fill-method', 'Impute for Number']);
                                records.push(['load.imputeNumberTypeFillColumn', 'en', 'fill-number', 'Impute for Number']);
                                records.push(['load.imputeRemoveLine.imputeStringTypeFillColumn', 'en', 'columns', 'Impute for String']);
                                records.push(['load.imputeStringTypeFillColumn', 'en', 'abnormal-string', 'Impute for String']);
                                records.push(['load.imputeStringTypeFillColumn', 'en', 'fill-string', 'Impute for String']);
                                records.push(['imputeStringTypeFillColumn', 'en', 'input-cols', 'Columns']);
                                records.push(['load.randomSampling', 'en', 'fraction', 'Random Sampling']);
                                records.push(['load.randomSampling', 'en', 'replacement', 'Random Sampling']);
                                records.push(['dbReader.dbReader', 'en', 'datasource-name', 'Data Source']);
                                records.push(['dbReader.dbReader', 'en', 'sql', 'Query Statement']);
                                records.push(['dbReader.dbReader', 'en', 'fetch-size', 'Fetch Size']);
                                records.push(['unload', 'en', 'fs-paths', 'Unload To']);
                                records.push(['unload', 'en', 'delimiter', 'Delimiter']);
                                records.push(['unload', 'en', 'array-delimiter', 'Array Delimiter']);
                                records.push(['unload', 'en', 'key-value-delimiter', 'Key Value Delimiter']);
                                records.push(['unload', 'en', 'null-value', 'Null Value']);
                                records.push(['randomDataGeneration', 'en', 'distribution', 'Distribution']);
                                records.push(['randomDataGeneration', 'en', 'size', 'Size']);
                                records.push(['randomDataGeneration', 'en', 'seed', 'Seed']);
                                records.push(['randomDataGeneration', 'en', 'mean', 'Mean']);
                                records.push(['randomDataGeneration', 'en', 'sd', 'Sd']);
                                records.push(['randomDataGeneration', 'en', 'shape', 'Shape']);
                                records.push(['randomDataGeneration', 'en', 'scale', 'Scale']);
                                records.push(['randomDataGeneration', 'en', 'min', 'Min']);
                                records.push(['randomDataGeneration', 'en', 'max', 'Max']);
                                records.push(['ewma', 'en', 'columns', 'Columns']);
                                records.push(['ewma', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['ewma', 'en', 'number', 'Number']);
                                records.push(['ewma', 'en', 'ratio', 'Ratio']);
                                records.push(['ewma', 'en', 'wilder', 'Wilder']);
                                records.push(['ewma', 'en', 'message-column-name', 'Message Column Name']);
                                records.push(['imputeDatetime', 'en', 'columns', 'Columns']);
                                records.push(['imputeDatetime', 'en', 'input-col', 'Columns']);
                                records.push(['imputeDatetime', 'en', 'impute-unit', 'Impute Unit']);
                                records.push(['imputeDatetime', 'en', 'unit', 'Impute Unit']);
                                records.push(['imputeNumberTypeFillColumn', 'en', 'input-cols', 'Columns']);
                                records.push(['imputeNumberTypeFillColumn', 'en', 'columns', 'Columns']);
                                records.push(['imputeNumberTypeFillColumn', 'en', 'abnormal-number', 'Abnormal Number']);
                                records.push(['imputeNumberTypeFillColumn', 'en', 'fill-method', 'Choose a method']);
                                records.push(['imputeNumberTypeFillColumn', 'en', 'fill-number', 'Choose a method']);
                                records.push(['imputeNumberTypeFillColumn', 'en', 'abnormal-string', 'Abnormal String']);
                                records.push(['imputeNumberTypeFillColumn', 'en', 'fill-string', 'Replace String']);
                                records.push(['kalmanFilter', 'en', 'columns', 'Columns']);
                                records.push(['kalmanFilter', 'en', 'phi', 'Phi']);
                                records.push(['kalmanFilter', 'en', 'theta', 'Theta']);
                                records.push(['kalmanFilter', 'en', 'sigma2', 'Sigma2']);
                                records.push(['movingAverage', 'en', 'columns', 'Columns']);
                                records.push(['movingAverage', 'en', 'feature-cols', 'Columns']);
                                records.push(['movingAverage', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['movingAverage', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['movingAverage', 'en', 'number', 'Number']);
                                records.push(['movingAverage', 'en', 'message-column-name', 'Message Column Name']);
                                records.push(['dataNormalization', 'en', 'columns', 'Columns']);
                                records.push(['dataNormalization', 'en', 'input-cols', 'Columns']);
                                records.push(['dataNormalization', 'en', 'normalization-type', 'Normalization Type']);
                                records.push(['dataNormalization', 'en', 'min-max-cut', 'Min Max Cut']);
                                records.push(['dataNormalization', 'en', 'groupby', 'Group By']);
                                records.push(['sort', 'en', 'columns', 'Columns']);
                                records.push(['sort', 'en', 'input-cols', 'Sort Rule']);
                                records.push(['sort', 'en', 'groupby', 'Group By']);
                                records.push(['sort', 'en', 'group-by ', 'Group By']);
                                records.push(['timeShift', 'en', 'columns', 'Columns']);
                                records.push(['timeShift', 'en', 'input-cols', 'Columns']);
                                records.push(['timeShift', 'en', 'shift-unit', 'Shift Unit']);
                                records.push(['timeShift', 'en', 'unit', 'Shift Unit']);
                                records.push(['timeShift', 'en', 'interval', 'Interval']);
                                records.push(['timeSeriesDistance', 'en', 'columns', 'Columns']);
                                records.push(['timeSeriesDistance', 'en', 'input-cols', 'Columns']);
                                records.push(['timeSeriesDistance', 'en', 'feature-cols', 'Columns']);
                                records.push(['timeSeriesDistance', 'en', 'distance-type', 'Distance Type']);
                                records.push(['timeSeriesDistance', 'en', 'reference-columns', 'Reference Columns']);
                                records.push(['timeSeriesDistance', 'en', 'groupby', 'Group By']);
                                records.push(['timeSeriesDistance', 'en', 'group-by', 'Group By']);
                                records.push(['timeSeriesDistance', 'en', 'reference-sd-columns', 'Reference Sd Columns']);
                                records.push(['timeSeriesDistance', 'en', 'reference-groupby', 'Reference Group By']);
                                records.push(['timeSeriesDistance', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['timeSeriesDistance', 'en', 'normalization-max', 'Normalization Max']);
                                records.push(['timeSeriesDistance', 'en', 'max-normalization', 'Normalization Max']);
                                records.push(['timeSeriesDistance', 'en', 'out-of-control-criteria', 'Out Of Control Criteria']);
                                records.push(['timeSeriesDistance', 'en', 'alphabet-column', 'Alphabet Column']);
                                records.push(['timeSeriesDistance', 'en', 'alphabet-col', 'Alphabet Column']);
                                records.push(['timeSeriesDistance', 'en', 'alphabet', 'Alphabet']);
                                records.push(['timeSeriesDistance', 'en', 'symmetric', 'Symmetric']);
                                records.push(['timeSeriesDistance', 'en', 'window-size', 'Window Size']);
                                records.push(['timeSeriesDistance', 'en', 'fast-method-type', 'Fast Method Type']);
                                records.push(['timeSeriesDistance', 'en', 'fast-method-limit', 'Fast Method Limit']);
                                records.push(['timeSeriesDistance', 'en', 'reference-cols', 'Reference Columns']);
                                records.push(['timeSeriesDistance', 'en', 'reference-sd-cols', 'Reference Sd Columns']);
                                records.push(['timeSeriesDistance', 'en', 'reference-group-by', 'Reference Group By']);
                                records.push(['conditionalUpdate', 'en', 'update-column', 'Update Column']);
                                records.push(['conditionalUpdate', 'en', 'input-col', 'Update Column']);
                                records.push(['conditionalUpdate', 'en', 'condition', 'If/Else If']);
                                records.push(['elementwiseProduct', 'en', 'columns', 'Columns']);
                                records.push(['elementwiseProduct', 'en', 'weight-array', 'Weight Array']);
                                records.push(['elementwiseProduct', 'en', 'weight-column', 'Weight Column']);
                                records.push(['polynomialExpansion', 'en', 'columns', 'Columns']);
                                records.push(['polynomialExpansion', 'en', 'input-cols', 'Columns']);
                                records.push(['polynomialExpansion', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['polynomialExpansion', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['polynomialExpansion', 'en', 'groupby', 'Group By']);
                                records.push(['polynomialExpansion', 'en', 'group-by', 'Group By']);
                                records.push(['polynomialRegressionTrain', 'en', 'ycolumn', 'Y Column']);
                                records.push(['polynomialRegressionTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['polynomialRegressionTrain', 'en', 'xcolumn', 'X Column']);
                                records.push(['polynomialRegressionTrain', 'en', 'feature-col', 'X Column']);
                                records.push(['polynomialRegressionTrain', 'en', 'degree', 'Degree']);
                                records.push(['polynomialRegressionTrain', 'en', 'types', 'Types']);
                                records.push(['polynomialRegressionTrain', 'en', 'iteration', 'Iteration']);
                                records.push(['polynomialRegressionTrain', 'en', 'regularization', 'Regularization']);
                                records.push(['polynomialRegressionTrain', 'en', 'tolerance', 'Tolerance']);
                                records.push(['polynomialRegressionTrain', 'en', 'tol', 'Tolerance']);
                                records.push(['polynomialRegressionPredict', 'en', 'columns', 'X Column']);
                                records.push(['polynomialRegressionPredict', 'en', 'feature-col', 'X Column']);
                                records.push(['polynomialRegressionPredict', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['distinctFilter', 'en', 'input-cols', 'Columns']);
                                records.push(['distinctFilter', 'en', 'display-type', 'Display Type']);
                                records.push(['conditionFilter', 'en', 'condition', 'Condition']);
                                records.push(['minmaxFilter', 'en', 'input-col', 'Columns']);
                                records.push(['minmaxFilter', 'en', 'columns', 'Columns']);
                                records.push(['minmaxFilter', 'en', 'filter-type', 'Filter Type']);
                                records.push(['imputeRemoveLine', 'en', 'input-cols', 'Columns']);
                                records.push(['imputeRemoveLine', 'en', 'columns', 'Columns']);
                                records.push(['imputeRemoveLine', 'en', 'abnormal-string', 'Abnormal String']);
                                records.push(['imputeRemoveLine', 'en', 'abnormal-number', 'Abnormal Number']);
                                records.push(['lengthFilter', 'en', 'condition', 'Condition']);
                                records.push(['outlierRemoval', 'en', 'columns', 'Columns']);
                                records.push(['outlierRemoval', 'en', 'outlier-method', 'Outlier Method']);
                                records.push(['outlierRemoval', 'en', 'multiplier', 'Multiplier']);
                                records.push(['outlierRemoval', 'en', 'groupby', 'Group By']);
                                records.push(['outlierRemoval', 'en', 'hold-column', 'Hold Column']);
                                records.push(['outlierRemoval', 'en', 'min-row', 'Min Row']);
                                records.push(['stringFilter', 'en', 'condition', 'Condition']);
                                records.push(['independentFilter', 'en', 'columns', 'Columns']);
                                records.push(['independentFilter', 'en', 'feature-cols', 'Columns']);
                                records.push(['independentFilter', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['independentFilter', 'en', 'threshold', 'Threshold']);
                                records.push(['correlation', 'en', 'ycolumn', 'Y Column']);
                                records.push(['correlation', 'en', 'xcolumn', 'X Column']);
                                records.push(['correlation', 'en', 'first-cols', 'X Column']);
                                records.push(['correlation', 'en', 'second-cols', 'Y Column']);
                                records.push(['correlation', 'en', 'out-col-name', 'Output Column Name']);
                                records.push(['correlation', 'en', 'method', 'Method']);
                                records.push(['quantileDiscretizer', 'en', 'columns', 'Columns']);
                                records.push(['quantileDiscretizer', 'en', 'input-cols', 'Column']);
                                records.push(['quantileDiscretizer', 'en', 'bucket-number', 'Bucket Number']);
                                records.push(['quantileDiscretizer', 'en', 'num-buckets', 'Bucket Number']);
                                records.push(['quantileDiscretizer', 'en', 'out-col-name', 'Out Column Name']);
                                records.push(['quantileDiscretizer', 'en', 'output-col', 'Out Column Name']);
                                records.push(['quantileDiscretizer', 'en', 'groupby', 'Group By']);
                                records.push(['frequency', 'en', 'groupby', 'Group By']);
                                records.push(['frequency', 'en', 'group-by', 'Group By']);
                                records.push(['frequency', 'en', 'frequency-mode', 'Frequency Mode']);
                                records.push(['frequency', 'en', 'mode', 'Frequency Mode']);
                                records.push(['frequency', 'en', 'columns', 'Columns']);
                                records.push(['frequencyMat', 'en', 'className', 'Columns']);
                                records.push(['frequencyMat', 'en', 'addInfo', 'Additional Information']);
                                records.push(['statisticDerivation', 'en', 'columns', 'Columns']);
                                records.push(['statisticDerivation', 'en', 'input-cols', 'Columns']);
                                records.push(['statisticDerivation', 'en', 'groupby', 'Group By']);
                                records.push(['statisticDerivation', 'en', 'group-by', 'Group By']);
                                records.push(['statisticDerivation', 'en', 'target-statistic', 'Target Statistic']);
                                records.push(['statisticDerivation', 'en', 'statistics', 'Target Statistic']);
                                records.push(['statisticSummary', 'en', 'columns', 'Columns']);
                                records.push(['statisticSummary', 'en', 'input-cols', 'Columns']);
                                records.push(['statisticSummary', 'en', 'groupby', 'Group By']);
                                records.push(['statisticSummary', 'en', 'group-by', 'Group By']);
                                records.push(['statisticSummary', 'en', 'target-statistic', 'Target Statistic']);
                                records.push(['statisticSummary', 'en', 'statistics', 'Target Statistic']);
                                records.push(['kernelDensityEstimation', 'en', 'columns', 'Columns']);
                                records.push(['kernelDensityEstimation', 'en', 'bandwidth', 'Bandwidth']);
                                records.push(['kernelDensityEstimation', 'en', 'point', 'Point']);
                                records.push(['kernelDensity', 'en', 'kernel-bandwidth', 'Kernel Bandwidth']);
                                records.push(['kernelDensity', 'en', 'kernel-lower', 'Kernel Lower']);
                                records.push(['kernelDensity', 'en', 'kernel-upper', 'Kernel Upper']);
                                records.push(['gaussianMixtureTrain', 'en', 'feature-cols', 'Columns']);
                                records.push(['gaussianMixtureTrain', 'en', 'columns', 'Columns']);
                                records.push(['gaussianMixtureTrain', 'en', 'num-clusters', 'Num Clusters']);
                                records.push(['gaussianMixtureTrain', 'en', 'tol', 'Tolerance']);
                                records.push(['gaussianMixtureTrain', 'en', 'tolerance', 'Tolerance']);
                                records.push(['gaussianMixtureTrain', 'en', 'max-iter', 'Max Iteration']);
                                records.push(['gaussianMixtureTrain', 'en', 'max-iteration', 'Max Iteration']);
                                records.push(['gaussianMixtureTrain', 'en', 'seed', 'Seed']);
                                records.push(['gaussianMixturePredict', 'en', 'columns', 'Columns']);
                                records.push(['gaussianMixturePredict', 'en', 'predict-soft', 'Predict Soft']);
                                records.push(['gaussianMixturePredict', 'en', 'feature-cols', 'Columns']);
                                records.push(['gaussianMixturePredict', 'en', 'tol', 'Tolerance']);
                                records.push(['gaussianMixturePredict', 'en', 'max-iter', 'Max Iteration']);
                                records.push(['chiSquareTest', 'en', 'columns', 'Columns']);
                                records.push(['chiSquareTest', 'en', 'excolumn', 'ExColumns']);
                                records.push(['chiSquareTest', 'en', 'groupby', 'Group By']);
                                records.push(['chiSquareTest', 'en', 'tableinputmode', 'Input Mode']);
                                records.push(['duncanTest', 'en', 'columns', 'Response Column']);
                                records.push(['duncanTest', 'en', 'target-treatment', 'Factor Column']);
                                records.push(['duncanTest', 'en', 'groupby', 'Group By']);
                                records.push(['duncanTest', 'en', 'alpha', 'Alpha']);
                                records.push(['ttest', 'en', 'columns', 'Columns']);
                                records.push(['ttest', 'en', 'target', 'Target Columns']);
                                records.push(['ttest', 'en', 'torder', 'Target Order']);
                                records.push(['ttest', 'en', 'groupby', 'Group By']);
                                records.push(['ttest', 'en', 'differ', 'Mean Difference']);
                                records.push(['ttest', 'en', 'alter', 'Alternative']);
                                records.push(['ttest', 'en', 'clevel', 'Confidence Level']);
                                records.push(['ttest', 'en', 'vequal', 'Variance Equal']);
                                records.push(['typeCast', 'en', 'input-cols', 'Column']);
                                records.push(['typeCast', 'en', 'typecast-mode', 'Column Type']);
                                records.push(['typeCast', 'en', 'columns', 'Column']);
                                records.push(['changeColumnName', 'en', 'columns', 'Columns']);
                                records.push(['changeColumnName', 'en', 'input-cols', 'Columns']);
                                records.push(['changeColumnName', 'en', 'output-cols', 'Columns']);
                                records.push(['changeColumnName', 'en', 'new-column-name', 'Change Name']);
                                records.push(['capitalizeColName', 'en', 'columns', 'Columns']);
                                records.push(['capitalizeColName', 'en', 'input-cols', 'Columns']);
                                records.push(['capitalizeColName', 'en', 'capitalize-mode', 'Capitalize Mode']);
                                records.push(['capitalizeColName', 'en', 'mode', 'Capitalize Mode']);
                                records.push(['reorganizeTable', 'en', 'columns', 'Columns']);
                                records.push(['reorganizeTable', 'en', 'input-cols', 'Columns']);
                                records.push(['join', 'en', 'columns', 'Output Columns']);
                                records.push(['join', 'en', 'on-columns', 'Key Condition (A=B)']);
                                records.push(['join', 'en', 'table-alias', 'Table Alias']);
                                records.push(['join', 'en', 'join-type', 'Join Type']);
                                records.push(['join', 'en', 'first-cols', 'Output Columns']);
                                records.push(['join', 'en', 'second-cols', 'Output Columns']);
                                records.push(['join', 'en', 'on-cols', 'Key Condition']);
                                records.push(['join', 'en', 'type', 'Join Type']);
                                records.push(['colAppend', 'en', 'duplicate-column', 'Duplicate Column']);
                                records.push(['colAppend', 'en', 'has-duplicate-cols', 'Duplicate Column']);
                                records.push(['queryExecutor', 'en', 'mode', 'SQL']);
                                records.push(['queryExecutor', 'en', 'full-query', 'SQL']);
                                records.push(['queryExecutor', 'en', 'alias-names', 'SQL']);
                                records.push(['pivot', 'en', 'row-labels', 'Row Labels']);
                                records.push(['pivot', 'en', 'column-labels', 'Column Labels']);
                                records.push(['pivot', 'en', 'col-labels', 'Column Labels']);
                                records.push(['pivot', 'en', 'values', 'Values']);
                                records.push(['pivot', 'en', 'blank-column-name', 'Blank Column Name']);
                                records.push(['pivot', 'en', 'blank-col-name', 'Blank Column Name']);
                                records.push(['unpivot', 'en', 'columns', 'Columns']);
                                records.push(['unpivot', 'en', 'input-cols', 'Columns']);
                                records.push(['unpivot', 'en', 'groupby', 'Group By']);
                                records.push(['unpivot', 'en', 'group-by', 'Group By']);
                                records.push(['unpivot', 'en', 'column-name-label', 'Column Name Label']);
                                records.push(['unpivot', 'en', 'label-col-name', 'Column Name Label']);
                                records.push(['unpivot', 'en', 'column-value-label', 'Column Value Label']);
                                records.push(['unpivot', 'en', 'value-col-name', 'Column Value Label']);
                                records.push(['stratifiedSampling', 'en', 'columns', 'Columns']);
                                records.push(['stratifiedSampling', 'en', 'fraction', 'Fraction']);
                                records.push(['stratifiedSampling', 'en', 'replacement', 'Replacement']);
                                records.push(['randomSampling', 'en', 'method', 'Model']);
                                records.push(['randomSampling', 'en', 'value', 'Fraction']);
                                records.push(['randomSampling', 'en', 'seed', 'Seed']);
                                records.push(['randomSampling', 'en', 'replacement', 'Replacement']);
                                records.push(['timeSeriesTranspose', 'en', 'columns', 'Columns']);
                                records.push(['timeSeriesTranspose', 'en', 'input-cols', 'Columns']);
                                records.push(['timeSeriesTranspose', 'en', 'out-column-names', 'Out Column Names']);
                                records.push(['timeSeriesTranspose', 'en', 'output-cols', 'Out Column Names']);
                                records.push(['timeSeriesTranspose', 'en', 'groupby', 'Group By']);
                                records.push(['timeSeriesTranspose', 'en', 'group-by', 'Group By']);
                                records.push(['timeSeriesTranspose', 'en', 'sortby', 'Sort By']);
                                records.push(['timeSeriesTranspose', 'en', 'sort-by', 'Sort By']);
                                records.push(['timeSeriesTranspose', 'en', 'keep-sortby', 'Keep Sort By']);
                                records.push(['timeSeriesTranspose', 'en', 'keep-sort-by', 'Keep Sort By']);
                                records.push(['splitData', 'en', 'ratio', 'Ratio']);
                                records.push(['splitData', 'en', 'seed ', 'Seed']);
                                records.push(['qrDecomposition', 'en', 'columns', 'Columns']);
                                records.push(['qrDecomposition', 'en', 'feature-cols', 'Columns']);
                                records.push(['qrDecomposition', 'en', 'computeQ ', 'Compute Q']);
                                records.push(['qrDecomposition', 'en', 'groupby', 'Group By']);
                                records.push(['pca', 'en', 'columns', 'Columns']);
                                records.push(['pca', 'en', 'feature-cols', 'Columns']);
                                records.push(['pca', 'en', 'groupby', 'Group By']);
                                records.push(['indexToString', 'en', 'columns', 'Column']);
                                records.push(['indexToString', 'en', 'new-column', 'New Column']);
                                records.push(['indexToString', 'en', 'output-cols', 'New Column']);
                                records.push(['indexToString', 'en', 'string-label', 'String Label']);
                                records.push(['indexToString', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['indexToString', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['transpose', 'en', 'input-cols', 'Columns']);
                                records.push(['transpose', 'en', 'columns', 'Columns']);
                                records.push(['transpose', 'en', 'label-col', 'Label Column']);
                                records.push(['transpose', 'en', 'label-column', 'Label Column']);
                                records.push(['transpose', 'en', 'label-col-name', 'Label Column Name']);
                                records.push(['transpose', 'en', 'label-column-name', 'Label Column Name']);
                                records.push(['bucketizer', 'en', 'columns', 'Columns']);
                                records.push(['bucketizer', 'en', 'input-cols', 'Columns']);
                                records.push(['bucketizer', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['bucketizer', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['bucketizer', 'en', 'splits', 'Splits']);
                                records.push(['bucketizer', 'en', 'new-column-name', 'New-Column-Name']);
                                records.push(['bucketizer', 'en', 'output-col', 'New-Column-Name']);
                                records.push(['mdRemove', 'en', 'columns', 'Columns']);
                                records.push(['mdRemove', 'en', 'input-cols', 'Columns']);
                                records.push(['mdRemove', 'en', 'del-string', 'Remove Value']);
                                records.push(['mdReplaceNumber', 'en', 'columns', 'Columns']);
                                records.push(['mdReplaceNumber', 'en', 'input-cols', 'Columns']);
                                records.push(['mdReplaceNumber', 'en', 'target-number', 'Target Number']);
                                records.push(['mdReplaceNumber', 'en', 'replacement-number', 'Replace Number']);
                                records.push(['evaluateRankingAlgorithm', 'en', 'user-column', 'User Column']);
                                records.push(['evaluateRankingAlgorithm', 'en', 'item-column', 'Item Column']);
                                records.push(['evaluateRankingAlgorithm', 'en', 'rating-column', 'Rating Column & Edge']);
                                records.push(['evaluateRankingAlgorithm', 'en', 'rating-edge', 'Rating Column & Edge']);
                                records.push(['evaluateRankingAlgorithm', 'en', 'k-values', 'K-Values']);
                                records.push(['evaluateRankingAlgorithm', 'en', 'evaluation-measure', 'Evaluation Measure']);
                                records.push(['mdReplaceString', 'en', 'columns', 'Columns']);
                                records.push(['mdReplaceString', 'en', 'input-cols', 'Columns']);
                                records.push(['mdReplaceString', 'en', 'target-string', 'Target String']);
                                records.push(['mdReplaceString', 'en', 'replacement-string', 'Replace String']);
                                records.push(['mdReplaceString', 'en', 'replace-mode', 'Replace Mode']);
                                records.push(['mdTrim', 'en', 'input-cols', 'Columns']);
                                records.push(['mdTrim', 'en', 'columns', 'Columns']);
                                records.push(['mdTrim', 'en', 'mode', 'Replace Mode']);
                                records.push(['mdTrim', 'en', 'trim-mode', 'Replace Mode']);
                                records.push(['mdCapitalize', 'en', 'columns', 'Columns']);
                                records.push(['mdCapitalize', 'en', 'capitalize-mode', 'Replace Mode']);
                                records.push(['mdCapitalize', 'en', 'capitalize-suffix', 'New Capitalize Column Name']);
                                records.push(['mdCapitalize', 'en', 'input-cols', 'Columns']);
                                records.push(['mdCapitalize', 'en', 'mode', 'Replace Mode']);
                                records.push(['mdCapitalize', 'en', 'suffix', 'New Capitalize Column Name']);
                                records.push(['mdLength', 'en', 'columns', 'Columns']);
                                records.push(['mdLength', 'en', 'input-cols', 'Columns']);
                                records.push(['mdLength', 'en', 'del-string', 'Remove Value']);
                                records.push(['numericalVariableDerivation.numericalVariableDerivation', 'en', 'output-col', 'New Column']);
                                records.push(['numericalVariableDerivation.numericalVariableDerivation', 'en', 'formula', 'Formula']);
                                records.push(['numericalVariableDerivation.numericalVariableDerivation', 'en', 'new-column', 'New Column']);
                                records.push(['rowIndexDerivation', 'en', 'output-col', 'New Column']);
                                records.push(['rowIndexDerivation', 'en', 'new-column', 'New Column']);
                                records.push(['rowIndexDerivation', 'en', 'groupby', 'Group By']);
                                records.push(['conditionalDerivation', 'en', 'new-column', 'New column']);
                                records.push(['conditionalDerivation', 'en', 'condition', 'Condition']);
                                records.push(['ymdhwFromDatetime', 'en', 'columns', 'Columns']);
                                records.push(['datetimeFormatConvertor', 'en', 'columns', 'Columns']);
                                records.push(['datetimeFormatConvertor', 'en', 'input-cols', 'Columns']);
                                records.push(['datetimeFormatConvertor', 'en', 'display-mode', 'Display Mode']);
                                records.push(['datetimeFormatConvertor', 'en', 'in-format', 'In Format']);
                                records.push(['datetimeFormatConvertor', 'en', 'out-format', 'Out Format']);
                                records.push(['datetimeFormatConvertor', 'en', 'in-language', 'In Language']);
                                records.push(['datetimeFormatConvertor', 'en', 'out-language', 'Out Language']);
                                records.push(['datetimeCalculator', 'en', 'columns', 'Columns']);
                                records.push(['datetimeCalculator', 'en', 'input-cols', 'Columns']);
                                records.push(['datetimeCalculator', 'en', 'with-column', 'Is Column']);
                                records.push(['datetimeCalculator', 'en', 'with-col', 'Is Column']);
                                records.push(['datetimeCalculator', 'en', 'to-column', 'To Column']);
                                records.push(['datetimeCalculator', 'en', 'to-col', 'To Column']);
                                records.push(['datetimeCalculator', 'en', 'to-date', 'To Date']);
                                records.push(['oneHotEncoder', 'en', 'input-cols', 'Input Columns']);
                                records.push(['oneHotEncoder', 'en', 'drop-last', 'Drop Last']);
                                records.push(['oneHotEncoder', 'en', 'output-type', 'Output Type']);
                                records.push(['oneHotEncoder', 'en', 'postfix-type', 'Postfix Type']);
                                records.push(['oneHotEncoder', 'en', 'index-column-postfix', 'Index Column Postfix']);
                                records.push(['oneHotEncoder', 'en', 'array-column-postfix', 'Array Column Postfix']);
                                records.push(['oneHotEncoder', 'en', 'groupby', 'Group By']);
                                records.push(['stringIndexer', 'en', 'columns', 'Columns']);
                                records.push(['stringIndexer', 'en', 'input-cols', 'Columns']);
                                records.push(['stringIndexer', 'en', 'groupby', 'Group By']);
                                records.push(['vectorIndexer', 'en', 'columns', 'Columns']);
                                records.push(['vectorIndexer', 'en', 'input-cols', 'Columns']);
                                records.push(['vectorIndexer', 'en', 'max-categories', 'Max Categories']);
                                records.push(['vectorIndexer', 'en', 'max-category', 'Max Categories']);
                                records.push(['vectorIndexer', 'en', 'out-col-name', 'Out Col Name']);
                                records.push(['vectorIndexer', 'en', 'output-col', 'Out Col Name']);
                                records.push(['vectorIndexer', 'en', 'hold-column', 'Hold Column']);
                                records.push(['vectorIndexer', 'en', 'has-hold-cols', 'Hold Column']);
                                records.push(['binarizer', 'en', 'columns', 'Columns']);
                                records.push(['binarizer', 'en', 'input-col', 'Columns']);
                                records.push(['binarizer', 'en', 'threshold', 'Threshold']);
                                records.push(['binarizer', 'en', 'out-col-name', 'Out Column Name']);
                                records.push(['binarizer', 'en', 'output-col', 'Out Column Name']);
                                records.push(['binarizer', 'en', 'hold-column', 'Hold Column']);
                                records.push(['binarizer', 'en', 'has-hold-cols', 'Hold Column']);
                                records.push(['binarizer', 'en', 'groupby', 'Group By']);
                                records.push(['nGram', 'en', 'columns', 'Columns']);
                                records.push(['nGram', 'en', 'input-col', 'Columns']);
                                records.push(['nGram', 'en', 'new-column', 'New Column Name']);
                                records.push(['nGram', 'en', 'output-col', 'New Column Name']);
                                records.push(['nGram', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['nGram', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['nGram', 'en', 'number', 'Number of Word Bundle']);
                                records.push(['stringSplit', 'en', 'column', 'Column']);
                                records.push(['stringSplit', 'en', 'label-col', 'Column']);
                                records.push(['stringSplit', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['stringSplit', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['stringSplit', 'en', 'delimiter', 'Delimiter']);
                                records.push(['stringSplit', 'en', 'out-col-name', 'Output Column Name']);
                                records.push(['stringSplit', 'en', 'out-col-number', 'Output Column Count']);
                                records.push(['stringSplit', 'en', 'out-col-type', 'Output Column Type']);
                                records.push(['stringSplit', 'en', 'array-start-size', 'Ignore Start Position']);
                                records.push(['stringSplit', 'en', 'array-end-size', 'Ignore End Position']);
                                records.push(['stringSplit', 'en', 'num-output-cols', 'Output Column Number']);
                                records.push(['stringSplit', 'en', 'output-col', 'Output Column Name']);
                                records.push(['stringSplit', 'en', 'output-type', 'Output Column Type']);
                                records.push(['addLeadLag', 'en', 'method', 'Method']);
                                records.push(['addLeadLag', 'en', 'offset-list', 'Offset']);
                                records.push(['addLeadLag', 'en', 'null-value', 'Null Value']);
                                records.push(['addLeadLag', 'en', 'columns', 'Column']);
                                records.push(['addLeadLag', 'en', 'target-col', 'Column']);
                                records.push(['addLeadLag', 'en', 'partition-by', 'Partition By']);
                                records.push(['addLeadLag', 'en', 'order-by', 'Order By']);
                                records.push(['addLeadLag', 'en', 'ordering', 'Ordering ']);
                                records.push(['addLeadLag', 'en', 'hold-column', 'Hold Column']);
                                records.push(['addLeadLag', 'en', 'has-hold-cols', 'Hold Column']);
                                records.push(['autoArimaTrain', 'en', 'columns', 'Columns']);
                                records.push(['autoArimaTrain', 'en', 'feature-cols', 'Columns']);
                                records.push(['autoArimaTrain', 'en', 'maxP', 'MaxP ']);
                                records.push(['autoArimaTrain', 'en', 'maxD', 'MaxD']);
                                records.push(['autoArimaTrain', 'en', 'maxQ', 'MaxQ']);
                                records.push(['autoArimaTrain', 'en', 'groupby', 'Group By']);
                                records.push(['autoArimaPredict', 'en', 'number', 'Number']);
                                records.push(['arimaTrain', 'en', 'columns', 'Columns']);
                                records.push(['arimaTrain', 'en', 'feature-cols', 'Columns']);
                                records.push(['arimaTrain', 'en', 'p', 'P']);
                                records.push(['arimaTrain', 'en', 'd', 'D']);
                                records.push(['arimaTrain', 'en', 'q', 'Q']);
                                records.push(['arimaTrain', 'en', 'intercept', 'Intercept']);
                                records.push(['arimaTrain', 'en', 'groupby', 'Groupby']);
                                records.push(['arimaPredict', 'en', 'number', 'Number']);
                                records.push(['linearRegressionTrain', 'en', 'ycolumn', 'Y Column']);
                                records.push(['linearRegressionTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['linearRegressionTrain', 'en', 'xcolumns', 'X Columns']);
                                records.push(['linearRegressionTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['linearRegressionTrain', 'en', 'types', 'Types']);
                                records.push(['linearRegressionTrain', 'en', 'intercept', 'Intercept']);
                                records.push(['linearRegressionTrain', 'en', 'iteration', 'Iteration']);
                                records.push(['linearRegressionTrain', 'en', 'regularization', 'Regularization']);
                                records.push(['linearRegressionTrain', 'en', 'tolerance', 'Tolerance']);
                                records.push(['linearRegressionPredict', 'en', 'columns', 'Columns']);
                                records.push(['linearRegressionPredict', 'en', 'feature-cols', 'Columns']);
                                records.push(['linearRegressionPredict', 'en', 'hold-columns', 'Hold Column']);
                                records.push(['linearRegressionPredict', 'en', 'hold-cols', 'Hold Column']);
                                records.push(['logisticRegressionTrain', 'en', 'ycolumn', 'Y Column']);
                                records.push(['logisticRegressionTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['logisticRegressionTrain', 'en', 'xcolumns', 'X Columns']);
                                records.push(['logisticRegressionTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['logisticRegressionTrain', 'en', 'types', 'Types']);
                                records.push(['logisticRegressionTrain', 'en', 'intercept', 'Intercept']);
                                records.push(['logisticRegressionTrain', 'en', 'iteration', 'Iteration']);
                                records.push(['logisticRegressionTrain', 'en', 'max-iter', 'Iteration']);
                                records.push(['logisticRegressionTrain', 'en', 'regularization', 'Regularization']);
                                records.push(['logisticRegressionTrain', 'en', 'reg-param', 'Regularization']);
                                records.push(['logisticRegressionTrain', 'en', 'tolerance', 'Tolerance']);
                                records.push(['logisticRegressionTrain', 'en', 'tol', 'Tolerance']);
                                records.push(['logisticRegressionPredict', 'en', 'columns', 'Columns']);
                                records.push(['logisticRegressionPredict', 'en', 'feature-cols', 'Columns']);
                                records.push(['logisticRegressionPredict', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['logisticRegressionPredict', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['logisticRegressionPredict', 'en', 'threshold', 'Threshold']);
                                records.push(['holtWintersTrain', 'en', 'columns', 'Columns']);
                                records.push(['holtWintersTrain', 'en', 'period', 'Period']);
                                records.push(['holtWintersTrain', 'en', 'model-type', 'Model Type']);
                                records.push(['holtWintersTrain', 'en', 'groupby', 'Group By']);
                                records.push(['holtWintersPredict', 'en', 'column', 'Column']);
                                records.push(['isotonicRegressionTrain', 'en', 'ycolumn', 'Y Column']);
                                records.push(['isotonicRegressionTrain', 'en', 'xcolumn', 'X Column']);
                                records.push(['isotonicRegressionTrain', 'en', 'mode', 'Mode ']);
                                records.push(['isotonicRegressionTrain', 'en', 'feature-col', 'X Column']);
                                records.push(['isotonicRegressionTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['isotonicRegressionTrain', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['isotonicRegressionPredict', 'en', 'column', 'Column']);
                                records.push(['isotonicRegressionPredict', 'en', 'hold-columns', 'Hold Column']);
                                records.push(['isotonicRegressionPredict', 'en', 'feature-col', 'X Column']);
                                records.push(['isotonicRegressionPredict', 'en', 'label-col', 'Y Column']);
                                records.push(['isotonicRegressionPredict', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['isotonicRegression', 'en', 'feature-col', 'X Column']);
                                records.push(['isotonicRegression', 'en', 'label-col', 'Y Column']);
                                records.push(['isotonicRegression', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['glm', 'en', 'columns', 'Columns']);
                                records.push(['glm', 'en', 'groupby', 'Group By']);
                                records.push(['glm', 'en', 'response', 'Response']);
                                records.push(['glm', 'en', 'model', 'Model & Link']);
                                records.push(['glm', 'en', 'link', 'Model & Link']);
                                records.push(['glm', 'en', 'weight-col', 'Weight']);
                                records.push(['glm', 'en', 'intercept', 'Intercept']);
                                records.push(['glm', 'en', 'tolerance', 'Tolerance']);
                                records.push(['glm', 'en', 'max-iteration', 'Max Iteration']);
                                records.push(['glm', 'en', 'feature-cols', 'Columns']);
                                records.push(['glm', 'en', 'label-col', 'Response']);
                                records.push(['glm', 'en', 'tol', 'Tolerance']);
                                records.push(['glm', 'en', 'max-iter', 'Max Iteration']);
                                records.push(['glmForLogisticRegression', 'en', 'columns', 'Columns']);
                                records.push(['glmForLogisticRegression', 'en', 'groupby', 'Group By']);
                                records.push(['glmForLogisticRegression', 'en', 'link', 'Link']);
                                records.push(['glmForLogisticRegression', 'en', 'proportion-col', 'Proportion']);
                                records.push(['glmForLogisticRegression', 'en', 'frequency-col', 'Frequency']);
                                records.push(['glmForLogisticRegression', 'en', 'intercept', 'Intercept']);
                                records.push(['glmForLogisticRegression', 'en', 'tolerance', 'Tolerance']);
                                records.push(['glmForLogisticRegression', 'en', 'max-iteration', 'Max Iteration']);
                                records.push(['glmPredict', 'en', 'groupby', 'Group By']);
                                records.push(['glmPredict', 'en', 'group-by', 'Group By']);
                                records.push(['glmPredict', 'en', 'columns', 'Columns']);
                                records.push(['glmPredict', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['glmPredict', 'en', 'feature-cols', 'Columns']);
                                records.push(['glmPredict', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['glmPredictForLogisticRegression', 'en', 'groupby', 'Group By']);
                                records.push(['glmPredictForLogisticRegression', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['alsTrain', 'en', 'user-column', 'User Column']);
                                records.push(['alsTrain', 'en', 'user-col', 'User Column']);
                                records.push(['alsTrain', 'en', 'item-column', 'Item Column']);
                                records.push(['alsTrain', 'en', 'item-col', 'Item Column']);
                                records.push(['alsTrain', 'en', 'rating-column', 'Rating Column']);
                                records.push(['alsTrain', 'en', 'rating-col', 'Rating Column']);
                                records.push(['alsTrain', 'en', 'implict-prefs', 'Implict Prefs']);
                                records.push(['alsTrain', 'en', 'iteration', 'Iteration']);
                                records.push(['alsTrain', 'en', 'max-iter', 'Iteration']);
                                records.push(['alsTrain', 'en', 'reg-param', 'Ref Param']);
                                records.push(['alsTrain', 'en', 'seed', 'Seed']);
                                records.push(['alsTrain', 'en', 'rank', 'Rank']);
                                records.push(['alsTrain', 'en', 'alpha', 'Alpha']);
                                records.push(['alsRecommend', 'en', 'mode', 'Mode']);
                                records.push(['alsRecommend', 'en', 'user-column', 'User Column']);
                                records.push(['alsRecommend', 'en', 'user-col', 'User Column']);
                                records.push(['alsRecommend', 'en', 'item-column', 'Item Column']);
                                records.push(['alsRecommend', 'en', 'item-col', 'Item Column']);
                                records.push(['alsRecommend', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['alsRecommend', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['alsRecommend', 'en', 'prediction-col', 'Hold Columns']);
                                records.push(['alsRecommend', 'en', 'predict-column-name', 'Predict Column Name']);
                                records.push(['alsRecommend', 'en', 'topn-number', 'TOPn Number']);
                                records.push(['alsRecommend', 'en', 'target-users', 'Target Users']);
                                records.push(['alsRecommend', 'en', 'targets', 'Target Users']);
                                records.push(['decisionTreeTrain', 'en', 'ycolumn', 'Y Column']);
                                records.push(['decisionTreeTrain', 'en', 'xcolumns', 'X Columns']);
                                records.push(['decisionTreeTrain', 'en', 'method', 'Method']);
                                records.push(['decisionTreeTrain', 'en', 'impurity', 'Impurity']);
                                records.push(['decisionTreeTrain', 'en', 'num-classes', 'Classes Number']);
                                records.push(['decisionTreeTrain', 'en', 'max-depth', 'Max Depth']);
                                records.push(['decisionTreeTrain', 'en', 'max-bins', 'Man Bins']);
                                records.push(['decisionTreeTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['decisionTreeTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['decisionTreeTrain', 'en', 'group-by', 'Group By']);
                                records.push(['decisionTreePredict', 'en', 'xcolumns', 'X Columns']);
                                records.push(['decisionTreePredict', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['decisionTreePredict', 'en', 'feature-cols', 'X Columns']);
                                records.push(['decisionTreePredict', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['decisionTreePredict', 'en', 'group-by', 'Group By']);
                                records.push(['decisionTreeCartTrain', 'en', 'target', 'Target']);
                                records.push(['decisionTreeCartTrain', 'en', 'column', 'Column']);
                                records.push(['decisionTreeCartTrain', 'en', 'groupby', 'Group By']);
                                records.push(['decisionTreeCartTrain', 'en', 'levelstop', 'Level Stop']);
                                records.push(['decisionTreeCartTrain', 'en', 'gainstop', 'Gain Stop']);
                                records.push(['decisionTreeCartTrain', 'en', 'elementsstop', 'Elements Stop']);
                                records.push(['decisionTreeCartTrain', 'en', 'indextype', 'Index Type']);
                                records.push(['decisionTreeCartTrain', 'en', 'criteriarank', 'Criteria Rank']);
                                records.push(['decisionTreeCartPredict', 'en', 'predictioncolumn', 'Prediction Column']);
                                records.push(['decisionTreeCartPredict', 'en', 'groupby', 'Group By']);
                                records.push(['kmeans', 'en', 'feature-cols', 'Columns']);
                                records.push(['kmeans', 'en', 'columns', 'Columns']);
                                records.push(['kmeans', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['kmeans', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['kmeans', 'en', 'num-clusters', 'Clusters']);
                                records.push(['kmeans', 'en', 'clusters', 'Clusters']);
                                records.push(['kmeans', 'en', 'iteration', 'Iteration']);
                                records.push(['kmeans', 'en', 'steps', 'Steps']);
                                records.push(['kmeans', 'en', 'tol', 'Tolerance']);
                                records.push(['kmeans', 'en', 'tolerance', 'Tolerance']);
                                records.push(['kmeans', 'en', 'seed', 'Seed']);
                                records.push(['kmeans', 'en', 'groupby', 'Group By']);
                                records.push(['knn', 'en', 'columns', 'Columns']);
                                records.push(['knn', 'en', 'feature-cols', 'Columns']);
                                records.push(['knn', 'en', 'target-column', 'Target Column']);
                                records.push(['knn', 'en', 'target-col', 'Target Column']);
                                records.push(['knn', 'en', 'k', 'k']);
                                records.push(['knn', 'en', 'p', 'p']);
                                records.push(['naiveBayesTrain', 'en', 'columns', 'Columns']);
                                records.push(['naiveBayesTrain', 'en', 'feature-cols', 'Columns']);
                                records.push(['naiveBayesTrain', 'en', 'model-type', 'Model Type']);
                                records.push(['naiveBayesTrain', 'en', 'label-col-name', 'Label Column Name']);
                                records.push(['naiveBayesTrain', 'en', 'label-col', 'Label Column Name']);
                                records.push(['naiveBayesTrain', 'en', 'lambda', 'Lambda']);
                                records.push(['naiveBayesPredict', 'en', 'columns', 'Columns']);
                                records.push(['naiveBayesPredict', 'en', 'feature-cols', 'Columns']);
                                records.push(['naiveBayesPredict', 'en', 'model-name', 'Model Name']);
                                records.push(['naiveBayesPredict', 'en', 'hold-column', 'Hold Column']);
                                records.push(['hierarchicalClustering', 'en', 'feature-cols', 'Columns']);
                                records.push(['hierarchicalClustering', 'en', 'columns', 'Columns']);
                                records.push(['hierarchicalClustering', 'en', 'method', 'Method']);
                                records.push(['hierarchicalClustering', 'en', 'input-mode', 'Input Mode']);
                                records.push(['hierarchicalClustering', 'en', 'hold-columns', 'Hold Column']);
                                records.push(['hierarchicalClustering', 'en', 'key-col', 'Key Column']);
                                records.push(['hierarchicalClustering', 'en', 'criteria', 'Criteria']);
                                records.push(['hierarchicalClustering', 'en', 'groupby', 'Group By']);
                                records.push(['hierarchicalClusteringPostProcess', 'en', 'target-num-clusters', 'Target Number Clusters']);
                                records.push(['hierarchicalClusteringPostProcess', 'en', 'groupby', 'Group By']);
                                records.push(['svmTrain', 'en', 'ycolumn', 'Y Column']);
                                records.push(['svmTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['svmTrain', 'en', 'xcolumns', 'X Columns']);
                                records.push(['svmTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['svmTrain', 'en', 'iteration', 'Iteration']);
                                records.push(['svmTrain', 'en', 'step-size', 'Step Size']);
                                records.push(['svmTrain', 'en', 'reg-param', 'Reg Param']);
                                records.push(['svmTrain', 'en', 'batch-fraction', 'Batch Fraction']);
                                records.push(['svmTrain', 'en', 'set-intercept', 'Set Intercept']);
                                records.push(['svmPredict', 'en', 'xcolumns', 'X Columns']);
                                records.push(['svmPredict', 'en', 'feature-cols', 'X Columns']);
                                records.push(['svmPredict', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['svmPredict', 'en', 'threshold', 'Threshold']);
                                records.push(['svd', 'en', 'columns', 'Columns']);
                                records.push(['svd', 'en', 'feature-cols', 'Columns']);
                                records.push(['svd', 'en', 'groupby', 'Group By']);
                                records.push(['randomForestTrain', 'en', 'ycolumn', 'X Columns']);
                                records.push(['randomForestTrain', 'en', 'xcolumns', 'Y Column']);
                                records.push(['randomForestTrain', 'en', 'method', 'Method']);
                                records.push(['randomForestTrain', 'en', 'impurity', 'Impurity']);
                                records.push(['randomForestTrain', 'en', 'num-classes', 'Classes Number']);
                                records.push(['randomForestTrain', 'en', 'num-trees', 'Trees Number']);
                                records.push(['randomForestTrain', 'en', 'feature-subset-strategy', 'Feature Subset Strategy']);
                                records.push(['randomForestTrain', 'en', 'max-depth', 'Max Depth']);
                                records.push(['randomForestTrain', 'en', 'max-bins', 'Max Depth']);
                                records.push(['randomForestTrain', 'en', 'seed', 'Seed']);
                                records.push(['randomForestTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['randomForestTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['randomForestTrain', 'en', 'group-by', 'Group By']);
                                records.push(['randomForestPredict', 'en', 'feature-cols', 'X Columns']);
                                records.push(['randomForestPredict', 'en', 'xcolumns', 'X Columns']);
                                records.push(['randomForestPredict', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['randomForestPredict', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['randomForestPredict', 'en', 'group-by', 'Group By']);
                                records.push(['latentDirichletAllocation', 'en', 'feature-cols', 'Columns']);
                                records.push(['latentDirichletAllocation', 'en', 'columns', 'Columns']);
                                records.push(['latentDirichletAllocation', 'en', 'vocabulary-size', 'Vocabulary Size']);
                                records.push(['latentDirichletAllocation', 'en', 'topic-number', 'Topic Number']);
                                records.push(['latentDirichletAllocation', 'en', 'iteration', 'Iteration']);
                                records.push(['latentDirichletAllocation', 'en', 'terminology-number', 'Terminology Number']);
                                records.push(['latentDirichletAllocation', 'en', 'groupby', 'Group By']);
                                records.push(['powerIterationClustering', 'en', 'columns', 'Columns']);
                                records.push(['powerIterationClustering', 'en', 'similarity-col', 'Similarity Column']);
                                records.push(['powerIterationClustering', 'en', 'n-clusters', 'N Clusters']);
                                records.push(['powerIterationClustering', 'en', 'max-iteration', 'Max Iteration']);
                                records.push(['powerIterationClustering', 'en', 'initialization-mode', 'Initialization Mode']);
                                records.push(['oneVsRestLRClassifierTrain', 'en', 'xcolumns', 'X Columns']);
                                records.push(['oneVsRestLRClassifierTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['oneVsRestLRClassifierTrain', 'en', 'ycolumn', 'Y Column']);
                                records.push(['oneVsRestLRClassifierTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['oneVsRestLRClassifierTrain', 'en', 'types', 'Types']);
                                records.push(['oneVsRestLRClassifierTrain', 'en', 'intercept', 'Intercept']);
                                records.push(['oneVsRestLRClassifierTrain', 'en', 'iteration', 'Iteration']);
                                records.push(['oneVsRestLRClassifierTrain', 'en', 'max-iter', 'Iteration']);
                                records.push(['oneVsRestLRClassifierTrain', 'en', 'reg-param', 'Reg Param']);
                                records.push(['oneVsRestLRClassifierTrain', 'en', 'tolerance', 'Tolerance']);
                                records.push(['oneVsRestLRClassifierPredict', 'en', 'xcolumns', 'X Columns']);
                                records.push(['oneVsRestLRClassifierPredict', 'en', 'feature-cols', 'X Columns']);
                                records.push(['oneVsRestLRClassifierPredict', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['oneVsRestLRClassifierPredict', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['oneVsRestLRClassifierPredict', 'en', 'predict-column-name', 'Predict Column Name']);
                                records.push(['oneVsRestLRClassifierPredict', 'en', 'prediction-col', 'Predict Column Name']);
                                records.push(['anova', 'en', 'column', 'Response Columns']);
                                records.push(['anova', 'en', 'feature-cols', 'X Columns']);
                                records.push(['anova', 'en', 'target', 'Factor Columns']);
                                records.push(['anova', 'en', 'label-cols', 'Y Columns']);
                                records.push(['anova', 'en', 'group', 'Group By']);
                                records.push(['anova', 'en', 'flag', 'Print Treatment Targets']);
                                records.push(['regressionEvaluation', 'en', 'prediction-col', 'Prediction Column']);
                                records.push(['regressionEvaluation', 'en', 'value-col', 'Value Column']);
                                records.push(['binaryClassificationEvaluation', 'en', 'predict-column', 'Predict Column']);
                                records.push(['binaryClassificationEvaluation', 'en', 'prediction-col', 'Predict Column']);
                                records.push(['binaryClassificationEvaluation', 'en', 'label-column', 'Label Column']);
                                records.push(['binaryClassificationEvaluation', 'en', 'label-col', 'Label Column']);
                                records.push(['binaryClassificationEvaluation', 'en', 'evaluation-measure', 'Evaluation Measure']);
                                records.push(['binaryClassificationEvaluation', 'en', 'beta', 'F-score Beta']);
                                records.push(['binaryClassificationEvaluation', 'en', 'down-sampling-number', 'Down Sampling Number']);
                                records.push(['binaryClassificationEvaluation', 'en', 'groupby', 'Group By']);
                                records.push(['multiclassClassificationEvaluation', 'en', 'predict-column', 'Predict Column']);
                                records.push(['multiclassClassificationEvaluation', 'en', 'prediction-col', 'Predict Column']);
                                records.push(['multiclassClassificationEvaluation', 'en', 'label-column', 'Label Column']);
                                records.push(['multiclassClassificationEvaluation', 'en', 'label-col', 'Label Column']);
                                records.push(['multiclassClassificationEvaluation', 'en', 'evaluation-measure', 'Evaluation Measure']);
                                records.push(['multiclassClassificationEvaluation', 'en', 'confusion-matrix', 'Confusion Matrix']);
                                records.push(['multiclassClassificationEvaluation', 'en', 'by-labels', 'By Labels']);
                                records.push(['multiclassClassificationEvaluation', 'en', 'beta', 'F-score Beta']);
                                records.push(['multiclassClassificationEvaluation', 'en', 'groupby', 'Group By']);
                                records.push(['csp', 'en', 'csp-maxiter', 'Csp-Maxiter']);
                                records.push(['csp', 'en', 'csp-ou', 'Csp-Ou']);
                                records.push(['csp', 'en', 'csp-uo', 'Csp-Uo']);
                                records.push(['csp', 'en', 'csp-oo ', 'Csp-Oo']);
                                records.push(['csp', 'en', 'csp-type', 'Csp-Type']);
                                records.push(['csp', 'en', 'csp-breakiter', 'Csp-Breakiter']);
                                records.push(['csp', 'en', 'csp-nsolution', 'Csp-Nsolution']);
                                records.push(['outDet', 'en', 'alpha', 'Alpha']);
                                records.push(['outDet', 'en', 'decay', 'Decay']);
                                records.push(['outDet', 'en', 'visiblehistory', 'Visible History']);
                                records.push(['calib', 'en', 'pastweekperiod', 'Past Week Period']);
                                records.push(['logLikelihoodRatioTest', 'en', 'response', 'Response']);
                                records.push(['logLikelihoodRatioTest', 'en', 'groupby', 'Group By']);
                                records.push(['logLikelihoodRatioTest', 'en', 'group-by', 'Group By']);
                                records.push(['logLikelihoodRatioTest', 'en', 'weight-col', 'Weight ']);
                                records.push(['logLikelihoodRatioTest', 'en', 'nullmodel-type', 'Null Model Type']);
                                records.push(['logLikelihoodRatioTestForLR', 'en', 'columns', 'Columns']);
                                records.push(['logLikelihoodRatioTestForLR', 'en', 'proportion-col', 'Proportion']);
                                records.push(['logLikelihoodRatioTestForLR', 'en', 'frequency-col', 'Frequency']);
                                records.push(['logLikelihoodRatioTestForLR', 'en', 'groupby', 'Group By']);
                                records.push(['logLikelihoodRatioTestForLR', 'en', 'nullmodel-type', 'Null Model Type']);
                                records.push(['elasticIndexing', 'en', 'index-name', 'Index Name']);
                                records.push(['elasticIndexing', 'en', 'type-name', 'Type Name']);
                                records.push(['elasticIndexing', 'en', 'meta-all-enabled', 'Meta All Enabled']);
                                records.push(['elasticIndexing', 'en', 'meta-all-store', 'Meta All Store']);
                                records.push(['elasticIndexing', 'en', 'meta-meta', 'Meta Meta']);
                                records.push(['elasticIndexing', 'en', 'meta-parent', 'Meta Parent']);
                                records.push(['elasticIndexing', 'en', 'meta-routing-required', 'Meta Routing Required']);
                                records.push(['elasticIndexing', 'en', 'meta-source', 'Meta Source']);
                                records.push(['elasticIndexing', 'en', 'meta-timestamp-enabled', 'Meta Timestamp Enabled']);
                                records.push(['elasticIndexing', 'en', 'properties-colums', 'Colums']);
                                records.push(['elasticIndexing', 'en', 'properties-analyzer', 'Analyzer']);
                                records.push(['elasticIndexing', 'en', 'properties-boost', 'Boost']);
                                records.push(['elasticIndexing', 'en', 'properties-coerce', 'Coerce']);
                                records.push(['elasticIndexing', 'en', 'properties-copy-to', 'Copy To']);
                                records.push(['elasticIndexing', 'en', 'properties-doc-values', 'Doc Values']);
                                records.push(['elasticIndexing', 'en', 'properties-dynamic', 'Dynamic']);
                                records.push(['elasticIndexing', 'en', 'properties-enabled', 'Enabled']);
                                records.push(['elasticIndexing', 'en', 'properties-fielddata', 'Fielddata']);
                                records.push(['elasticIndexing', 'en', 'properties-format', 'Format']);
                                records.push(['elasticIndexing', 'en', 'properties-geohash', 'Geohash']);
                                records.push(['elasticIndexing', 'en', 'properties-geohash-prefix', 'Geohash Prefix']);
                                records.push(['elasticIndexing', 'en', 'properties-geohash-precision', 'Geohash Precision']);
                                records.push(['elasticIndexing', 'en', 'properties-ignore-above', 'Ignore Above']);
                                records.push(['elasticIndexing', 'en', 'properties-ignore-malformed', 'Ignore Malformed']);
                                records.push(['elasticIndexing', 'en', 'properties-include-in-all', 'Include In All']);
                                records.push(['elasticIndexing', 'en', 'properties-index', 'Index']);
                                records.push(['elasticIndexing', 'en', 'properties-index-options', 'Index Options']);
                                records.push(['elasticIndexing', 'en', 'properties-lat-lon', 'Lat Lon']);
                                records.push(['elasticIndexing', 'en', 'properties-fields', 'Fields']);
                                records.push(['elasticIndexing', 'en', 'properties-norms-enabled', 'Norms Enabled']);
                                records.push(['elasticIndexing', 'en', 'properties-norms-loading', 'Norms Loading']);
                                records.push(['elasticIndexing', 'en', 'properties-null-value', 'Null Value']);
                                records.push(['elasticIndexing', 'en', 'properties-position-increment-gap', 'Position Increment Gap']);
                                records.push(['elasticIndexing', 'en', 'properties-properties', 'Properties']);
                                records.push(['elasticIndexing', 'en', 'properties-search-analyzer', 'Search Analyzer']);
                                records.push(['elasticIndexing', 'en', 'properties-similarity', 'Similarity']);
                                records.push(['elasticIndexing', 'en', 'properties-store', 'Store']);
                                records.push(['elasticIndexing', 'en', 'properties-term-vector', 'Term Vector']);
                                records.push(['elasticSearch', 'en', 'index-name', 'Index Name']);
                                records.push(['elasticSearch', 'en', 'type-name', 'Type Name']);
                                records.push(['elasticSearch', 'en', 'search-string', 'Search String']);
                                records.push(['elasticRegExpSearch', 'en', 'index-name', 'Index Name']);
                                records.push(['elasticRegExpSearch', 'en', 'type-name', 'Type Name']);
                                records.push(['elasticRegExpSearch', 'en', 'regexp-column', 'Regular Expression Column']);
                                records.push(['elasticRegExpSearch', 'en', 'regexp-value', 'Regular Expression Value']);
                                records.push(['elasticRegExpSearch', 'en', 'regexp-flags', 'Regular Expression Flags']);
                                records.push(['elasticQueryExecutor', 'en', 'http-method', 'Http Method']);
                                records.push(['elasticQueryExecutor', 'en', 'request-method', 'Request Method']);
                                records.push(['elasticQueryExecutor', 'en', 'request-body', 'Request Body']);
                                records.push(['scalaScript', 'en', 'in-table-alias', 'In Table Alias']);
                                records.push(['scalaScript', 'en', 'script', 'Script']);
                                records.push(['scalaScript', 'en', 'out-table-alias', 'Out Table Alias']);
                                records.push(['pythonScript', 'en', 'in-table-alias', 'In Table Alias']);
                                records.push(['pythonScript', 'en', 'script', 'Script']);
                                records.push(['pythonScript', 'en', 'out-table-alias', 'Out Table Alias']);
                                records.push(['rGroupBy', 'en', 'columns', 'Columns']);
                                records.push(['rGroupBy', 'en', 'groupby', 'Group by']);
                                records.push(['rGroupBy', 'en', 'out-col-name', 'Output Column Name']);
                                records.push(['rScript', 'en', 'columns', 'Columns']);
                                records.push(['rScript', 'en', 'groupby', 'Group by']);
                                records.push(['rScript', 'en', 'r-script', 'RScript']);
                                records.push(['rScript', 'en', 'result-names', 'Result Columns']);
                                records.push(['rScript', 'en', 'message-column-name', 'Message Column Name']);
                                records.push(['flatMapR', 'en', 'columns', 'Columns']);
                                records.push(['flatMapR', 'en', 'groupby', 'Group by']);
                                records.push(['flatMapR', 'en', 'message-column-name', 'Message Column Name']);
                                records.push(['mlpPredict', 'en', 'data-columns', 'Data Columns']);
                                records.push(['mlpPredict', 'en', 'show-tb', 'Show Tb']);
                                records.push(['mlpPredict', 'en', 'dl-func', 'Dl Func']);
                                records.push(['mlpTrain', 'en', 'label-columns', 'Label Columns']);
                                records.push(['mlpTrain', 'en', 'data-columns', 'Data Columns']);
                                records.push(['mlpTrain', 'en', 'show-tb', 'Show Tb']);
                                records.push(['mlpTrain', 'en', 'dl-func', 'Dl Func']);
                                records.push(['mlpTrain', 'en', 'objective', 'Objective']);
                                records.push(['mlpTrain', 'en', 'num-classes', 'Num Classes']);
                                records.push(['mlpTrain', 'en', 'training-iteration', 'Training Iteration']);
                                records.push(['mlpTrain', 'en', 'loss-function', 'Loss Function']);
                                records.push(['mlpTrain', 'en', 'optimizer', 'Optimizer']);
                                records.push(['mlpTrain', 'en', 'learning-rate', 'Learning Rate']);
                                records.push(['mlpTrain', 'en', 'layers', 'Layers']);
                                records.push(['sqlExecutor', 'en', 'select', 'Select']);
                                records.push(['sqlExecutor', 'en', 'additional-query', 'Additional Query']);
                                records.push(['addColumnByRefine', 'en', 'select', 'Select']);
                                records.push(['addColumnByRefine', 'en', 'additional-query', 'Additional Query']);
                                records.push(['selectColumn', 'en', 'select', 'Select']);
                                records.push(['selectColumn', 'en', 'additional-query', 'Additional Query']);
                                records.push(['tFIDF', 'en', 'input-col', 'Input Column']);
                                records.push(['tFIDF', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['tFIDF', 'en', 'min-df', 'Min Df']);
                                records.push(['tFIDF', 'en', 'min-tf', 'Min Tf']);
                                records.push(['tFIDF', 'en', 'vocabulary-size', 'Vocabulary Size']);
                                records.push(['tFIDF', 'en', 'tf-weighting-scheme', 'Tf Weighting Scheme']);
                                records.push(['tFIDF', 'en', 'idf-weighting-scheme', 'Idf Weighting Scheme']);
                                records.push(['tFIDF', 'en', 'array-col', 'Array Column']);
                                records.push(['tFIDF', 'en', 'vocabulary-col', 'Vocabulary Column']);
                                records.push(['tFIDF', 'en', 'index-col', 'Index Column']);
                                records.push(['tFIDF', 'en', 'frequency-col', 'Frequency Column']);
                                records.push(['changeValue', 'en', 'select', 'Select']);
                                records.push(['changeValue', 'en', 'additional-query', 'Additional Query']);
                                records.push(['groupBy', 'en', 'select', 'Select']);
                                records.push(['groupBy', 'en', 'additional-query', 'Additional Query']);
                                records.push(['simpleFilter', 'en', 'select', 'Select']);
                                records.push(['simpleFilter', 'en', 'additional-query', 'Additional Query']);
                                records.push(['advancedFilter', 'en', 'select', 'Select']);
                                records.push(['advancedFilter', 'en', 'additional-query', 'Additional Query']);
                                records.push(['sortByRefine', 'en', 'select', 'Select']);
                                records.push(['sortByRefine', 'en', 'additional-query', 'Additional Query']);
                                records.push(['linearUCBTrain', 'en', 'context-column', 'Context Column']);
                                records.push(['linearUCBTrain', 'en', 'arm-column', 'Arm Column']);
                                records.push(['linearUCBTrain', 'en', 'reward-column', 'Reward Column']);
                                records.push(['linearUCBTrain', 'en', 'arms-list', 'Arms List']);
                                records.push(['linearUCBTrain', 'en', 'dimensionality', 'Dimensionality']);
                                records.push(['linearUCBTrain', 'en', 'shared-dimensionality', 'Shared Dimensionality']);
                                records.push(['linearUCBPrescribe', 'en', 'id-column', 'Id Column']);
                                records.push(['linearUCBPrescribe', 'en', 'context-column', 'Context Column']);
                                records.push(['linearUCBPrescribe', 'en', 'alpha', 'Alpha']);
                                records.push(['linearUCBPrescribe', 'en', 'tiebreaker-threshold', 'Tiebreaker Threshold']);
                                records.push(['linearUCBPrescribe', 'en', 'num-arms-in-prescription', 'Num Arms In Prescription']);
                                records.push(['associationRule', 'en', 'input-col', 'Column']);
                                records.push(['associationRule', 'en', 'column', 'Column']);
                                records.push(['associationRule', 'en', 'min-support', 'Min Support']);
                                records.push(['associationRule', 'en', 'min-confidence', 'Min Confidence']);
                                records.push(['featureEncoding', 'en', 'response', 'Response']);
                                records.push(['featureEncoding', 'en', 'reward', 'Reward']);
                                records.push(['featureEncoding', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['featureEncoding', 'en', 'features', 'Features']);
                                records.push(['columnsToArray', 'en', 'flag', 'Flag']);
                                records.push(['columnsToArray', 'en', 'column-name', 'Column Name']);
                                records.push(['columnsToArray', 'en', 'columns', 'Columns']);
                                records.push(['arrayToColumns', 'en', 'flag', 'Flag']);
                                records.push(['arrayToColumns', 'en', 'columns', 'Columns']);
                                records.push(['bigDataScatter', 'en', 'xcolumn', 'X Column']);
                                records.push(['bigDataScatter', 'en', 'ycolumn', 'Y Column']);
                                records.push(['bigDataScatter', 'en', 'x-min', 'X Min']);
                                records.push(['bigDataScatter', 'en', 'y-min', 'Y Min']);
                                records.push(['bigDataScatter', 'en', 'x-max', 'X Max']);
                                records.push(['bigDataScatter', 'en', 'y-max', 'Y Max']);
                                records.push(['bigDataScatter', 'en', 'color-by', 'Color By']);
                                records.push(['bigDataLine', 'en', 'xcolumn', 'X Column']);
                                records.push(['bigDataLine', 'en', 'ycolumn', 'Y Column']);
                                records.push(['bigDataLine', 'en', 'x-min', 'X Min']);
                                records.push(['bigDataLine', 'en', 'y-min', 'Y Min']);
                                records.push(['bigDataLine', 'en', 'x-max', 'X Max']);
                                records.push(['bigDataLine', 'en', 'y-max', 'Y Max']);
                                records.push(['bigDataLine', 'en', 'color-by', 'Color By']);
                                records.push(['bigDataColumn', 'en', 'xcolumn', 'X Column']);
                                records.push(['bigDataColumn', 'en', 'ycolumn', 'Y Column']);
                                records.push(['bigDataColumn', 'en', 'aggregation', 'Aggregation']);
                                records.push(['bigDataColumn', 'en', 'color-by', 'Color By']);
                                records.push(['bigDataBar', 'en', 'xcolumn', 'X Column']);
                                records.push(['bigDataBar', 'en', 'ycolumn', 'Y Column']);
                                records.push(['bigDataBar', 'en', 'aggregation', 'Aggregation']);
                                records.push(['bigDataBar', 'en', 'color-by', 'Color By']);
                                records.push(['bigDataBoxPlot', 'en', 'xcolumn', 'X Column']);
                                records.push(['bigDataBoxPlot', 'en', 'ycolumn', 'Y Column']);
                                records.push(['bigDataPie', 'en', 'color-by', 'Color By']);
                                records.push(['bigDataPie', 'en', 'size-by', 'Size By']);
                                records.push(['bigDataPie', 'en', 'aggregation', 'Aggregation']);
                                records.push(['qLearningTrain', 'en', 'correlation-id-column', 'Correlation Id Column']);
                                records.push(['qLearningTrain', 'en', 'state-column', 'State Column']);
                                records.push(['qLearningTrain', 'en', 'action-column', 'Action Column']);
                                records.push(['qLearningTrain', 'en', 'reward-column', 'Reward Column']);
                                records.push(['qLearningTrain', 'en', 'next-state-column', 'Next State Column']);
                                records.push(['qLearningTrain', 'en', 'timestamp-column', 'Timestamp Column']);
                                records.push(['qLearningTrain', 'en', 'terminal-state-flag-column', 'Terminal State Flag Column']);
                                records.push(['qLearningTrain', 'en', 'dimensionality', 'Dimensionality']);
                                records.push(['qLearningTrain', 'en', 'action-list', 'Action List']);
                                records.push(['qLearningTrain', 'en', 'max-learning-iterations', 'Max Learning Iterations']);
                                records.push(['qLearningTrain', 'en', 'convergence-delta', 'Convergence Delta']);
                                records.push(['qLearningTrain', 'en', 'alpha-decay', 'Alpha Decay']);
                                records.push(['qLearningTrain', 'en', 'alpha', 'Alpha']);
                                records.push(['qLearningTrain', 'en', 'gamma', 'Gamma']);
                                records.push(['qLearningTrain', 'en', 'function-approximator-type', 'Function Approximator Type']);
                                records.push(['qLearningTrain', 'en', 'decision-tree-max-bins', 'Decision Tree Max Bins']);
                                records.push(['qLearningTrain', 'en', 'decision-tree-max-depth', 'Decision Tree Max Depth']);
                                records.push(['qLearningTrain', 'en', 'random-forest-feature-subset-strategy', 'Random Forest Feature Subset Strategy']);
                                records.push(['qLearningTrain', 'en', 'random-forest-max-bins', 'Random Forest Max Bins']);
                                records.push(['qLearningTrain', 'en', 'random-forest-max-depth', 'Random Forest Max Depth']);
                                records.push(['qLearningTrain', 'en', 'random-forest-num-trees', 'Random Forest Num Trees']);
                                records.push(['qLearningTrain', 'en', 'gradient-boosted-tree-num-iterations', 'Gradient Boosted Tree Num Iterations']);
                                records.push(['qLearningTrain', 'en', 'gradient-boosted-tree-max-depth', 'Gradient Boosted Tree Max Depth']);
                                records.push(['qLearningPrescribe', 'en', 'id-column', 'Id Column']);
                                records.push(['qLearningPrescribe', 'en', 'state-column', 'State Column']);
                                records.push(['qLearningPrescribe', 'en', 'runtime-strategy', 'Runtime Strategy']);
                                records.push(['qLearningPrescribe', 'en', 'best-action-tie-breaker-threshold', 'Best Action Tie Breaker Threshold']);
                                records.push(['qLearningPrescribe', 'en', 'epsilon-greedy-probability', 'Epsilon Greedy Probability']);
                                records.push(['qLearningPrescribe', 'en', 'epsilon-greedy-tie-breaker-threshold', 'Epsilon Greedy Tie Breaker Threshold']);
                                records.push(['qLearningPrescribe', 'en', 'soft-max-temperature', 'Soft Max Temperature']);
                                records.push(['sarsaTrain', 'en', 'correlation-id-column', 'Correlation Id Column']);
                                records.push(['sarsaTrain', 'en', 'state-column', 'State Column']);
                                records.push(['sarsaTrain', 'en', 'action-column', 'Action Column']);
                                records.push(['sarsaTrain', 'en', 'reward-column', 'Reward Column']);
                                records.push(['sarsaTrain', 'en', 'next-state-column', 'Next State Column']);
                                records.push(['sarsaTrain', 'en', 'timestamp-column', 'Timestamp Column']);
                                records.push(['sarsaTrain', 'en', 'terminal-state-flag-column', 'Terminal State Flag Column']);
                                records.push(['sarsaTrain', 'en', 'dimensionality', 'Dimensionality']);
                                records.push(['sarsaTrain', 'en', 'action-list', 'Action List']);
                                records.push(['sarsaTrain', 'en', 'max-learning-iterations', 'Max Learning Iterations']);
                                records.push(['sarsaTrain', 'en', 'convergence-delta', 'Convergence Delta']);
                                records.push(['sarsaTrain', 'en', 'alpha-decay', 'Alpha Decay']);
                                records.push(['sarsaTrain', 'en', 'alpha', 'Alpha']);
                                records.push(['sarsaTrain', 'en', 'gamma', 'Gamma']);
                                records.push(['sarsaTrain', 'en', 'function-approximator-type', 'Function Approximator Type']);
                                records.push(['sarsaTrain', 'en', 'decision-tree-max-bins', 'Decision Tree Max Bins']);
                                records.push(['sarsaTrain', 'en', 'decision-tree-max-depth', 'Decision Tree Max Depth']);
                                records.push(['sarsaTrain', 'en', 'random-forest-feature-subset-strategy', 'Random Forest Feature Subset Strategy']);
                                records.push(['sarsaTrain', 'en', 'random-forest-max-bins', 'Random Forest Max Bins']);
                                records.push(['sarsaTrain', 'en', 'random-forest-max-depth', 'Random Forest Max Depth']);
                                records.push(['sarsaTrain', 'en', 'random-forest-num-trees', 'Random Forest Num Trees']);
                                records.push(['sarsaTrain', 'en', 'gradient-boosted-tree-num-iterations', 'Gradient Boosted Tree Num Iterations']);
                                records.push(['sarsaTrain', 'en', 'gradient-boosted-tree-max-depth', 'Gradient Boosted Tree Max Depth']);
                                records.push(['sarsaPrescribe', 'en', 'id-column', 'Id Column']);
                                records.push(['sarsaPrescribe', 'en', 'state-column', 'State Column']);
                                records.push(['sarsaPrescribe', 'en', 'runtime-strategy', 'Runtime Strategy']);
                                records.push(['sarsaPrescribe', 'en', 'best-action-tie-breaker-threshold', 'Best Action Tie Breaker Threshold']);
                                records.push(['sarsaPrescribe', 'en', 'epsilon-greedy-probability', 'Epsilon Greedy Probability']);
                                records.push(['sarsaPrescribe', 'en', 'epsilon-greedy-tie-breaker-threshold', 'Epsilon Greedy Tie Breaker Threshold']);
                                records.push(['sarsaPrescribe', 'en', 'soft-max-temperature', 'Soft Max Temperature']);
                                records.push(['thompsonSamplingTrain', 'en', 'context-column', 'Context Column']);
                                records.push(['thompsonSamplingTrain', 'en', 'arm-column', 'Arm Column']);
                                records.push(['thompsonSamplingTrain', 'en', 'reward-column', 'Reward Column']);
                                records.push(['thompsonSamplingTrain', 'en', 'arms-list', 'Arms List']);
                                records.push(['thompsonSamplingTrain', 'en', 'lambda', 'Lambda']);
                                records.push(['thompsonSamplingTrain', 'en', 'initial-mean', 'Initial Mean']);
                                records.push(['thompsonSamplingTrain', 'en', 'gray-scale-to-binary-reward-mapping-threshold', 'Mapping Threshold']);
                                records.push(['thompsonSamplingTrain', 'en', 'regression-algorithm', 'Regression Algorithm']);
                                records.push(['thompsonSamplingTrain', 'en', 'lbfgs-convergence-tol', 'LBFGS Convergence Tol']);
                                records.push(['thompsonSamplingTrain', 'en', 'sgd-initial-step-size', 'SGD Initial Step Size']);
                                records.push(['thompsonSamplingTrain', 'en', 'sgd-iterations', 'SGD Iterations']);
                                records.push(['thompsonSamplingPrescribe', 'en', 'context-column', 'Context Column']);
                                records.push(['thompsonSamplingPrescribe', 'en', 'id-column', 'Id Column']);
                                records.push(['thompsonSamplingPrescribe', 'en', 'dimensionality', 'Dimensionality']);
                                records.push(['thompsonSamplingPrescribe', 'en', 'num-arms-in-prescription', 'Num Arms In Prescription']);
                                records.push(['thompsonSamplingPrescribe', 'en', 'alpha', 'Alpha']);
                                records.push(['valueIterationTrain', 'en', 'state-column', 'State Column']);
                                records.push(['valueIterationTrain', 'en', 'action-column', 'Action Column']);
                                records.push(['valueIterationTrain', 'en', 'reward-column', 'Reward Column']);
                                records.push(['valueIterationTrain', 'en', 'next-state-column', 'Next State Column']);
                                records.push(['valueIterationTrain', 'en', 'probability-column', 'Probability Column']);
                                records.push(['valueIterationTrain', 'en', 'dimensionality', 'Dimensionality']);
                                records.push(['valueIterationTrain', 'en', 'action-list', 'Action List']);
                                records.push(['valueIterationTrain', 'en', 'max-learning-iterations', 'Max Learning Iterations']);
                                records.push(['valueIterationTrain', 'en', 'convergence-delta', 'Convergence Delta']);
                                records.push(['valueIterationTrain', 'en', 'gamma', 'Gamma']);
                                records.push(['valueIterationPrescribe', 'en', 'id-column', 'Id Column']);
                                records.push(['valueIterationPrescribe', 'en', 'state-column', 'State Column']);
                                records.push(['interactivePrediction', 'en', 'ycolumn', 'Y Column']);
                                records.push(['interactivePrediction', 'en', 'xcolumns', 'X Columns']);
                                records.push(['tokenizer', 'en', 'input-col', 'Input Column']);
                                records.push(['tokenizer', 'en', 'output-col', 'Output Column']);
                                records.push(['tokenizer', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['tokenizer', 'en', 'gaps', 'Gaps']);
                                records.push(['tokenizer', 'en', 'min-token-length', 'Min Token Length']);
                                records.push(['tokenizer', 'en', 'pattern', 'Pattern']);
                                records.push(['tokenizer', 'en', 'to-lowercase', 'To Lowercase']);
                                records.push(['chiSqSelection', 'en', 'input-cols', 'Columns']);
                                records.push(['chiSqSelection', 'en', 'feature-cols', 'Columns']);
                                records.push(['chiSqSelection', 'en', 'label-col', 'Label']);
                                records.push(['chiSqSelection', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['chiSqSelection', 'en', 'numTopFeatures', 'Top Features']);
                                records.push(['chiSqSelection', 'en', 'percentile', 'Percentile']);
                                records.push(['chiSqSelection', 'en', 'numBuckets', 'Buckets']);
                                records.push(['chiSqSelection', 'en', 'auto', 'Auto']);
                                records.push(['chiSqSelection', 'en', 'method', 'Method']);
                                records.push(['chiSqSelection', 'en', 'numFolds', 'Folds']);
                                records.push(['chiSqSelection', 'en', 'trainRatio', 'Train Ratio']);
                                records.push(['chiSqSelection', 'en', 'classifier', 'Classifier']);
                                records.push(['chiSqSelection', 'en', 'numTopFeaturesArray', 'Top Features Array']);
                                records.push(['createTable', 'en', 'data-array', 'Data Array']);
                                records.push(['createTable', 'en', 'column-types', 'Column Types']);
                                records.push(['createTable', 'en', 'column-names', 'Column Names']);
                                records.push(['correlationWithPivot', 'en', 'ycolumn', 'Y Column']);
                                records.push(['correlationWithPivot', 'en', 'xcolumn', 'X Column']);
                                records.push(['correlationWithPivot', 'en', 'out-col-name', 'Output Column Name']);
                                records.push(['correlationWithPivot', 'en', 'method', 'Method']);
                                records.push(['correlationWithPivot', 'en', 'sequence-column', 'Sequence Column']);
                                records.push(['correlationWithPivot', 'en', 'by', 'By']);
                                records.push(['correlationWithPivot', 'en', 'rate', 'Rate']);
                                records.push(['correlationWithPivot', 'en', 'iteration', 'Iteration']);
                                records.push(['timeSeriesAnalysis', 'en', 'columns', 'Column']);
                                records.push(['timeSeriesAnalysis', 'en', 'feature-col', 'Column']);
                                records.push(['udf_MyUDF_1_0_bbd3u3bh', 'en', 'in-table-alias', 'In Table Alias']);
                                records.push(['udf_MyUDF_1_0_bbd3u3bh', 'en', 'script', 'Script']);
                                records.push(['udf_MyUDF_1_0_bbd3u3bh', 'en', 'out-table-alias', 'Out-Table Alias']);
                                records.push(['udf_MyUDF_1_0_bbd3u3bh', 'en', 'input-variables', 'In-Table Variables']);
                                records.push(['autoClassificationPredict', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['autoClassificationPredict', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['autoClassificationPredict', 'en', 'prediction-col', 'Prediction Column']);
                                records.push(['autoClassificationTrain', 'en', 'ycolumn', 'Y Column']);
                                records.push(['autoClassificationTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['autoClassificationTrain', 'en', 'xcolumns', 'X Columns']);
                                records.push(['autoClassificationTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['autoClassificationTrain', 'en', 'seed', 'Seed']);
                                records.push(['autoClassificationTrain', 'en', 'method', 'Method']);
                                records.push(['autoClassificationTrain', 'en', 'num-folds', 'Number of Folds']);
                                records.push(['autoClassificationTrain', 'en', 'train-ratio', 'train Ratio']);
                                records.push(['autoClassificationTrain', 'en', 'classifiers', 'Classifiers']);
                                records.push(['autoRegressionPredict', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['autoRegressionPredict', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['autoRegressionPredict', 'en', 'prediction-col', 'Prediction Column Name']);
                                records.push(['autoRegressionTrain', 'en', 'ycolumn', 'Y Column']);
                                records.push(['autoRegressionTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['autoRegressionTrain', 'en', 'xcolumns', 'X Columns']);
                                records.push(['autoRegressionTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['autoRegressionTrain', 'en', 'seed', 'Seed']);
                                records.push(['autoRegressionTrain', 'en', 'method', 'Method']);
                                records.push(['autoRegressionTrain', 'en', 'num-folds', 'Number of Folds']);
                                records.push(['autoRegressionTrain', 'en', 'train-ratio', 'Train Ratio']);
                                records.push(['autoRegressionTrain', 'en', 'regressors', 'Regressors']);
                                records.push(['randomForestClassificationPredict', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['randomForestClassificationPredict', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['randomForestClassificationPredict', 'en', 'prediction-col', 'Prediction Column Name']);
                                records.push(['randomForestClassificationPredict', 'en', 'probability-col', 'Probability Column Name']);
                                records.push(['randomForestClassificationPredict', 'en', 'raw-prediction-col', 'Raw Prediction Column Name']);
                                records.push(['randomForestClassificationPredict', 'en', 'groupby', 'Group By']);
                                records.push(['randomForestClassificationTrain', 'en', 'ycolumn', 'Y Column']);
                                records.push(['randomForestClassificationTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['randomForestClassificationTrain', 'en', 'xcolumns', 'X Columns']);
                                records.push(['randomForestClassificationTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['randomForestClassificationTrain', 'en', 'seed', 'Seed']);
                                records.push(['randomForestClassificationTrain', 'en', 'auto', 'Auto']);
                                records.push(['randomForestClassificationTrain', 'en', 'num-trees', 'Number of Trees']);
                                records.push(['randomForestClassificationTrain', 'en', 'feature-subset-strategy', 'Feature Subset Strategy']);
                                records.push(['randomForestClassificationTrain', 'en', 'impurity', 'Impurity']);
                                records.push(['randomForestClassificationTrain', 'en', 'max-depth', 'Max Depth']);
                                records.push(['randomForestClassificationTrain', 'en', 'max-bins', 'Max Bins']);
                                records.push(['randomForestClassificationTrain', 'en', 'min-info-gain', 'Min Info Gain']);
                                records.push(['randomForestClassificationTrain', 'en', 'min-instances-per-node', 'Min Instances Per Node']);
                                records.push(['randomForestClassificationTrain', 'en', 'sub-sampling-rate', 'Subsampling Rate']);
                                records.push(['randomForestClassificationTrain', 'en', 'sub-sampling-rate-arr', 'Subsampling Rate Set']);
                                records.push(['randomForestClassificationTrain', 'en', 'thresholds', 'Thresholds']);
                                records.push(['randomForestClassificationTrain', 'en', 'thresholds-arr', 'Thresholds Set']);
                                records.push(['randomForestClassificationTrain', 'en', 'method', 'Method']);
                                records.push(['randomForestClassificationTrain', 'en', 'num-folds', 'Number of Folds']);
                                records.push(['randomForestClassificationTrain', 'en', 'train-ratio', 'Train Ratio']);
                                records.push(['randomForestClassificationTrain', 'en', 'num-trees-arr', 'Number of Trees Set']);
                                records.push(['randomForestClassificationTrain', 'en', 'feature-subset-strategy-arr', 'Feature Subset Strategy Array']);
                                records.push(['randomForestClassificationTrain', 'en', 'impurity-arr', 'Impurity Set']);
                                records.push(['randomForestClassificationTrain', 'en', 'max-depth-arr', 'Max Depth Set']);
                                records.push(['randomForestClassificationTrain', 'en', 'max-bins-arr', 'Max Bins Set']);
                                records.push(['randomForestClassificationTrain', 'en', 'min-info-gain-arr', 'Min Information Gain Set']);
                                records.push(['randomForestClassificationTrain', 'en', 'min-instances-per-node-arr', 'Min Instances Per Node Set']);
                                records.push(['randomForestClassificationTrain', 'en', 'groupby', 'Group By']);
                                records.push(['randomForestClassificationTrain', 'en', 'metric-name', 'Metric Name']);
                                records.push(['randomForestRegressionPredict', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['randomForestRegressionPredict', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['randomForestRegressionPredict', 'en', 'prediction-col', 'Prediction Column Name']);
                                records.push(['randomForestRegressionPredict', 'en', 'groupby', 'Group By']);
                                records.push(['randomForestRegressionTrain', 'en', 'ycolumn', 'Y Column']);
                                records.push(['randomForestRegressionTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['randomForestRegressionTrain', 'en', 'xcolumns', 'X Columns']);
                                records.push(['randomForestRegressionTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['randomForestRegressionTrain', 'en', 'seed', 'Seed']);
                                records.push(['randomForestRegressionTrain', 'en', 'auto', 'Auto']);
                                records.push(['randomForestRegressionTrain', 'en', 'num-trees', 'Number of Trees']);
                                records.push(['randomForestRegressionTrain', 'en', 'feature-subset-strategy', 'Feature Subset Strategy']);
                                records.push(['randomForestRegressionTrain', 'en', 'impurity', 'Impurity']);
                                records.push(['randomForestRegressionTrain', 'en', 'max-depth', 'Max Depth']);
                                records.push(['randomForestRegressionTrain', 'en', 'max-bins', 'Max Bins']);
                                records.push(['randomForestRegressionTrain', 'en', 'min-info-gain', 'Min Information Gain']);
                                records.push(['randomForestRegressionTrain', 'en', 'min-instances-per-node', 'Min Instances Per Node']);
                                records.push(['randomForestRegressionTrain', 'en', 'sub-sampling-rate', 'Subsampling Rate']);
                                records.push(['randomForestRegressionTrain', 'en', 'method', 'Method']);
                                records.push(['randomForestRegressionTrain', 'en', 'num-folds', 'Number of Folds']);
                                records.push(['randomForestRegressionTrain', 'en', 'train-ratio', 'Train Ratio']);
                                records.push(['randomForestRegressionTrain', 'en', 'metric-name', 'Metric Name']);
                                records.push(['randomForestRegressionTrain', 'en', 'feature-subset-strategy-arr', 'Feature Subset Strategy Set']);
                                records.push(['randomForestRegressionTrain', 'en', 'impurity-arr', 'Impurity Set']);
                                records.push(['randomForestRegressionTrain', 'en', 'num-trees-arr', 'Number of Trees Set']);
                                records.push(['randomForestRegressionTrain', 'en', 'max-depth-arr', 'Max Depth Set']);
                                records.push(['randomForestRegressionTrain', 'en', 'max-bins-arr', 'Max Bins Set']);
                                records.push(['randomForestRegressionTrain', 'en', 'min-info-gain-arr', 'Min Information Gain Set']);
                                records.push(['randomForestRegressionTrain', 'en', 'min-instances-per-node-arr', 'Min Instances Per Node Set']);
                                records.push(['randomForestRegressionTrain', 'en', 'sub-sampling-rate-arr', 'Subsampling Rate Set']);
                                records.push(['randomForestRegressionTrain', 'en', 'groupby', 'Group By']);
                                records.push(['symbolicRegressionTrain', 'en', 'ycolumn', 'Y Column']);
                                records.push(['symbolicRegressionTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['symbolicRegressionTrain', 'en', 'xcolumns', 'X Columns']);
                                records.push(['symbolicRegressionTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['symbolicRegressionTrain', 'en', 'chains', 'Chains']);
                                records.push(['symbolicRegressionTrain', 'en', 'repeatRank', 'Number Of Trials']);
                                records.push(['symbolicRegressionTrain', 'en', 'time', 'Execution Time']);
                                records.push(['symbolicRegressionTrain', 'en', 'expandRank', 'Expand Rank']);
                                records.push(['symbolicRegressionTrain', 'en', 'reg', 'Initial Regularization']);
                                records.push(['symbolicRegressionTrain', 'en', 'regGrow', 'Regularization Growth']);
                                records.push(['symbolicRegressionTrain', 'en', 'evalRate', 'Evaluation Rate']);
                                records.push(['symbolicRegressionTrain', 'en', 'evalRank', 'Evaluation Rank']);
                                records.push(['sVMRBF', 'en', 'ycolumn', 'Y Column']);
                                records.push(['sVMRBF', 'en', 'xcolumns', 'X Columns']);
                                records.push(['exportColumn', 'en', 'key', 'Key']);
                                records.push(['exportColumn', 'en', 'column', 'Column']);
                                records.push(['stringSummary', 'en', 'columns', 'Columns']);
                                records.push(['stringSummary', 'en', 'input-cols', 'Columns']);
                                records.push(['stringSummary', 'en', 'groupby', 'Group by']);
                                records.push(['stringSummary', 'en', 'group-by', 'Group by']);
                                records.push(['aRXPredict', 'en', 'xcolumn', 'X Column']);
                                records.push(['aRXTrain', 'en', 'ycolumn', 'Y Column']);
                                records.push(['aRXTrain', 'en', 'xcolumn', 'X Column']);
                                records.push(['aRXTrain', 'en', 'yMaxLag', 'Maximum Y Lag']);
                                records.push(['aRXTrain', 'en', 'xMaxLag', 'Maximum X Lag']);
                                records.push(['autoCorrelation', 'en', 'feature-col', 'Column']);
                                records.push(['timeSeriesDecomposition', 'en', 'column', 'Column']);
                                records.push(['timeSeriesDecomposition', 'en', 'feature-col', 'Column']);
                                records.push(['timeSeriesDecomposition', 'en', 'hold-columns', 'Hold Columns']);
                                records.push(['timeSeriesDecomposition', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['timeSeriesDecomposition', 'en', 'period', 'Period']);
                                records.push(['timeSeriesDecomposition', 'en', 'model-type', 'Model Type']);
                                records.push(['autoDataCleansing', 'en', 'input-cols', 'Input Columns']);
                                records.push(['autoDataCleansing', 'en', 'target-cols', 'Target Columns']);
                                records.push(['autoDataCleansing', 'en', 'regressor', 'Regressor']);
                                records.push(['autoDataCleansing', 'en', 'classifier', 'Classifier']);
                                records.push(['autoDataCleansing', 'en', 'max-iter', 'Max Iteration']);
                                records.push(['evaluateTimeSeries', 'en', 'actual-column', 'Actual Column']);
                                records.push(['evaluateTimeSeries', 'en', 'predict-column', 'Predict Column']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'seed', 'Seed']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'auto', 'Auto']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'groupby', 'Group By']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'impurity', 'Impurity']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'max-depth', 'Max Depth']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'max-bins', 'Max Bins']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'min-info-gain', 'Min Information Gain']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'min-instances-per-node', 'Min Instances Per Node']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'thresholds', 'Thresholds']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'method', 'Method']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'num-folds', 'Number of Folds']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'train-ratio', 'Train Ratio']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'metric-name', 'Metric Name']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'impurity-arr', 'Impurity Set']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'max-depth-arr', 'Max Depth Set']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'max-bins-arr', 'Max Bins Set']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'min-info-gain-arr', 'Min Information Gain Set']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'min-instances-per-node-arr', 'Min Instances Per Node Set']);
                                records.push(['decisionTreeClassificationTrain', 'en', 'thresholds-arr', 'Thresholds Set']);
                                records.push(['decisionTreeClassificationPredict', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['decisionTreeClassificationPredict', 'en', 'groupby', 'Group By']);
                                records.push(['decisionTreeClassificationPredict', 'en', 'prediction-col', 'Prediction Column Name']);
                                records.push(['decisionTreeClassificationPredict', 'en', 'probability-col', 'Probability Column Name']);
                                records.push(['decisionTreeClassificationPredict', 'en', 'raw-prediction-col', 'Raw Prediction Column Name']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'seed', 'Seed']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'auto', 'Auto']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'groupby', 'Group By']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'impurity', 'Impurity']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'max-depth', 'Max Depth']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'max-bins', 'Max Bins']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'min-info-gain', 'Min Information Gain']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'min-instances-per-node', 'Min Instances Per Node']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'method', 'Method']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'num-folds', 'Number of Folds']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'train-ratio', 'Train Ratio']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'metric-name', 'Metric Name']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'impurity-arr', 'Impurity Set']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'max-depth-arr', 'Max Depth Set']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'max-bins-arr', 'Max Bins Set']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'min-info-gain-arr', 'Min Information Gain Set']);
                                records.push(['decisionTreeRegressionTrain', 'en', 'min-instances-per-node-arr', 'Min Instances Per Node Set']);
                                records.push(['decisionTreeRegressionPredict', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['decisionTreeRegressionPredict', 'en', 'groupby', 'Group By']);
                                records.push(['decisionTreeRegressionPredict', 'en', 'prediction-col', 'Prediction Column Name']);
                                records.push(['ymdhwFromDatetime', 'en', 'input-cols', 'Columns']);
                                records.push(['evaluateRankingAlgorithm', 'en', 'user-col', 'User Column']);
                                records.push(['evaluateRankingAlgorithm', 'en', 'item-col', 'Item Column']);
                                records.push(['evaluateRankingAlgorithm', 'en', 'rating-col', 'Rating Column']);
                                records.push(['evaluateRankingAlgorithm', 'en', 'k', 'K-Values']);
                                records.push(['gBTClassificationTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['gBTClassificationTrain', 'en', 'ycolumn', 'Y Column']);
                                records.push(['gBTClassificationTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['gBTClassificationTrain', 'en', 'xcolumns', 'X Columns']);
                                records.push(['gBTClassificationTrain', 'en', 'auto', 'Auto']);
                                records.push(['gBTClassificationTrain', 'en', 'groupby', 'Group By']);
                                records.push(['gBTClassificationTrain', 'en', 'max-iter', 'Max Iteration']);
                                records.push(['gBTClassificationTrain', 'en', 'loss-type', 'Loss Function']);
                                records.push(['gBTClassificationTrain', 'en', 'max-depth', 'Max Depth']);
                                records.push(['gBTClassificationTrain', 'en', 'max-bins', 'Max Bins']);
                                records.push(['gBTClassificationTrain', 'en', 'min-info-gain', 'Min Information Gain']);
                                records.push(['gBTClassificationTrain', 'en', 'min-instances-per-node', 'Min Instances Per Node']);
                                records.push(['gBTClassificationTrain', 'en', 'sub-sampling-rate', 'Subsampling Rate']);
                                records.push(['gBTClassificationTrain', 'en', 'step-size', 'Step Size']);
                                records.push(['gBTClassificationTrain', 'en', 'method', 'Method']);
                                records.push(['gBTClassificationTrain', 'en', 'num-folds', 'Number of Folds']);
                                records.push(['gBTClassificationTrain', 'en', 'train-ratio', 'Train Ratio']);
                                records.push(['gBTClassificationTrain', 'en', 'metric-name', 'Metric Name']);
                                records.push(['gBTClassificationTrain', 'en', 'max-iter-arr', 'Max Iteration Set']);
                                records.push(['gBTClassificationTrain', 'en', 'loss-type-arr', 'Loss Function Set']);
                                records.push(['gBTClassificationTrain', 'en', 'max-depth-arr', 'Max Depth Set']);
                                records.push(['gBTClassificationTrain', 'en', 'max-bins-arr', 'Max Bins Set']);
                                records.push(['gBTClassificationTrain', 'en', 'min-info-gain-arr', 'Min Information Gain Set']);
                                records.push(['gBTClassificationTrain', 'en', 'min-instances-per-node-arr', 'Min Instances Per Node Set']);
                                records.push(['gBTClassificationTrain', 'en', 'sub-sampling-rate-arr', 'Subsampling Rate Set']);
                                records.push(['gBTClassificationTrain', 'en', 'step-size-arr', 'Step Size Set']);
                                records.push(['gBTClassificationPredict', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['gBTClassificationPredict', 'en', 'groupby', 'Group By']);
                                records.push(['gBTClassificationPredict', 'en', 'prediction-col', 'Prediction Column Name']);
                                records.push(['gBTRegressionTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['gBTRegressionTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['gBTRegressionTrain', 'en', 'auto', 'Auto']);
                                records.push(['gBTRegressionTrain', 'en', 'groupby', 'Group By']);
                                records.push(['gBTRegressionTrain', 'en', 'max-iter', 'Max Iteration']);
                                records.push(['gBTRegressionTrain', 'en', 'loss-type', 'Loss Function']);
                                records.push(['gBTRegressionTrain', 'en', 'max-depth', 'Max Depth']);
                                records.push(['gBTRegressionTrain', 'en', 'max-bins', 'Max Bins']);
                                records.push(['gBTRegressionTrain', 'en', 'min-info-gain', 'Min Information Gain']);
                                records.push(['gBTRegressionTrain', 'en', 'min-instances-per-node', 'Min Instances Per Node']);
                                records.push(['gBTRegressionTrain', 'en', 'sub-sampling-rate', 'Subsampling Rate']);
                                records.push(['gBTRegressionTrain', 'en', 'step-size', 'Step Size']);
                                records.push(['gBTRegressionTrain', 'en', 'method', 'Method']);
                                records.push(['gBTRegressionTrain', 'en', 'num-folds', 'Number of Folds']);
                                records.push(['gBTRegressionTrain', 'en', 'train-ratio', 'Train Ratio']);
                                records.push(['gBTRegressionTrain', 'en', 'metric-name', 'Metric Name']);
                                records.push(['gBTRegressionTrain', 'en', 'max-iter-arr', 'Max Iteration Set']);
                                records.push(['gBTRegressionTrain', 'en', 'loss-type-arr', 'Loss Function Set']);
                                records.push(['gBTRegressionTrain', 'en', 'max-depth-arr', 'Max Depth Set']);
                                records.push(['gBTRegressionTrain', 'en', 'max-bins-arr', 'Max Bins Set']);
                                records.push(['gBTRegressionTrain', 'en', 'min-info-gain-arr', 'Min Information Gain Set']);
                                records.push(['gBTRegressionTrain', 'en', 'min-instances-per-node-arr', 'Min Instances Per Node Set']);
                                records.push(['gBTRegressionTrain', 'en', 'sub-sampling-rate-arr', 'Subsampling Rate Set']);
                                records.push(['gBTRegressionTrain', 'en', 'step-size-arr', 'Step Size Set']);
                                records.push(['gBTRegressionPredict', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['gBTRegressionPredict', 'en', 'groupby', 'Group By']);
                                records.push(['gBTRegressionPredict', 'en', 'prediction-col', 'Prediction Column Name']);
                                records.push(['outlierRemoval', 'en', 'input-cols', 'Columns']);
                                records.push(['outlierRemoval', 'en', 'method', 'Outlier-Method']);
                                records.push(['outlierRemoval', 'en', 'group-by', 'Group By']);
                                records.push(['outlierRemoval', 'en', 'has-hold-cols', 'Hold Column']);
                                records.push(['sVMRBFTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['sVMRBFTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['sVMRBFPredict', 'en', 'feature-cols', 'X Columns']);
                                records.push(['autoFeatureSelection', 'en', 'feature-cols', 'Feature Columns']);
                                records.push(['autoFeatureSelection', 'en', 'label-col', 'Label Column']);
                                records.push(['autoFeatureSelection', 'en', 'model-type', 'Model Type']);
                                records.push(['autoFeatureSelection', 'en', 'method-arr', 'Method Set']);
                                records.push(['autoFeatureSelection', 'en', 'max-num-features', 'Max Number of Features']);
                                records.push(['autoFeatureSelection', 'en', 'on-exhaustive', 'Exhaustive Option']);
                                records.push(['autoFeatureSelection', 'en', 'num-buckets', 'Number of Buckets']);
                                records.push(['bartlettsTestForStacked', 'en', 'feature-cols', 'Response Columns']);
                                records.push(['bartlettsTestForStacked', 'en', 'label-col', 'Factor Column']);
                                records.push(['bartlettsTestForStacked', 'en', 'groupby', 'Group By']);
                                records.push(['chiSqTestForTheVariance', 'en', 'input-cols', 'Input Columns']);
                                records.push(['chiSqTestForTheVariance', 'en', 'sigma-square', 'Hypothesized Variance']);
                                records.push(['chiSqTestForTheVariance', 'en', 'confidence-level', 'Confidence Level']);
                                records.push(['chiSqTestForTheVariance', 'en', 'groupby', 'Group By']);
                                records.push(['chiSqTestForTheVariance', 'en', 'alternatives', 'Alternatives']);
                                records.push(['chiSquareTestOfIndependence', 'en', 'feature-cols', 'Feature Columns']);
                                records.push(['chiSquareTestOfIndependence', 'en', 'label-col', 'Label Column']);
                                records.push(['chiSquareTestOfIndependence', 'en', 'groupby', 'Group By']);
                                records.push(['crossTable', 'en', 'first-cols', 'Columns 1']);
                                records.push(['crossTable', 'en', 'second-cols', 'Columns 2']);
                                records.push(['crossTable', 'en', 'contents', 'Contents']);
                                records.push(['crossTable', 'en', 'additional-info', 'Additional Information']);
                                records.push(['crossTable', 'en', 'row-total-col', 'Row Total Column Name']);
                                records.push(['crossTable', 'en', 'col-total-row', 'Column Total Row Name']);
                                records.push(['crossTable', 'en', 'seed', 'Seed']);
                                records.push(['dbReader', 'en', 'datasource-name', 'Data Source']);
                                records.push(['dbReader', 'en', 'sql', 'Query Statement']);
                                records.push(['dbReader', 'en', 'fetch-size', 'Fetch Size']);
                                records.push(['dlPredict', 'en', 'inputDataPath', 'Input Data Path']);
                                records.push(['dlPredict', 'en', 'checkpointPath', 'Checkpoint']);
                                records.push(['dlPredict', 'en', 'batch_size', 'Batch Size']);
                                records.push(['eDA', 'en', 'feature-cols', 'Feature Columns']);
                                records.push(['eDA', 'en', 'label-col', 'Label Column']);
                                records.push(['eDA', 'en', 'category-base-count', 'Category Base Count']);
                                records.push(['fTestForStacked', 'en', 'feature-cols', 'Response Columns']);
                                records.push(['fTestForStacked', 'en', 'label-col', 'Factor Column']);
                                records.push(['fTestForStacked', 'en', 'alternatives', 'Alternatives']);
                                records.push(['fTestForStacked', 'en', 'confidence-level', 'Confidence Level']);
                                records.push(['fTestForStacked', 'en', 'first', 'First']);
                                records.push(['fTestForStacked', 'en', 'second', 'Second']);
                                records.push(['fTestForStacked', 'en', 'groupby', 'Group By']);
                                records.push(['oneHotEncoderModel', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['oneHotEncoderModel', 'en', 'output-type', 'Output Type']);
                                records.push(['oneHotEncoderModel', 'en', 'postfix-type', 'Postfix Type']);
                                records.push(['oneHotEncoderModel', 'en', 'array-col', 'Array Column']);
                                records.push(['oneHotEncoderModel', 'en', 'groupby', 'Group By']);
                                records.push(['oneSampleTTest', 'en', 'input-cols', 'Input Columns']);
                                records.push(['oneSampleTTest', 'en', 'alternatives', 'Alternatives']);
                                records.push(['oneSampleTTest', 'en', 'mu', 'Hypothesized Mean']);
                                records.push(['oneSampleTTest', 'en', 'confidence-level', 'Confidence Level']);
                                records.push(['oneSampleTTest', 'en', 'groupby', 'Group By']);
                                records.push(['pairedTTest', 'en', 'first-col', 'First Column']);
                                records.push(['pairedTTest', 'en', 'second-col', 'Second Column']);
                                records.push(['pairedTTest', 'en', 'alternatives', 'Alternatives']);
                                records.push(['pairedTTest', 'en', 'mu', 'Hypothesized Difference']);
                                records.push(['pairedTTest', 'en', 'confidence-level', 'Confidence Level']);
                                records.push(['pairedTTest', 'en', 'groupby', 'Group By']);
                                records.push(['stopWordsRemover', 'en', 'input-col', 'Input Column']);
                                records.push(['stopWordsRemover', 'en', 'output-col', 'Output Column']);
                                records.push(['stopWordsRemover', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['stopWordsRemover', 'en', 'case-sensitive', 'Case Sensitive']);
                                records.push(['stopWordsRemover', 'en', 'stop-words', 'Stop Words']);
                                records.push(['twoSampleTTestForStacked', 'en', 'feature-cols', 'Response Columns']);
                                records.push(['twoSampleTTestForStacked', 'en', 'label-col', 'Factor Column']);
                                records.push(['twoSampleTTestForStacked', 'en', 'alternatives', 'Alternatives']);
                                records.push(['twoSampleTTestForStacked', 'en', 'confidence-level', 'Confidence Level']);
                                records.push(['twoSampleTTestForStacked', 'en', 'first', 'First']);
                                records.push(['twoSampleTTestForStacked', 'en', 'second', 'Second']);
                                records.push(['twoSampleTTestForStacked', 'en', 'mu', 'Hypothesized Difference']);
                                records.push(['twoSampleTTestForStacked', 'en', 'equal-variances', 'Assume Equal Variances?']);
                                records.push(['twoSampleTTestForStacked', 'en', 'groupby', 'Group By']);
                                records.push(['stepwiseLinearRegressionTrain', 'en', 'label-col', 'Label Column']);
                                records.push(['stepwiseLinearRegressionTrain', 'en', 'feature-cols', 'Feature Columns']);
                                records.push(['stepwiseLinearRegressionTrain', 'en', 'initial-cols', 'Initial Columns']);
                                records.push(['stepwiseLinearRegressionTrain', 'en', 'step', 'Step']);
                                records.push(['stepwiseLinearRegressionPredict', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['normalityTest', 'en', 'feature-cols', 'Features']);
                                records.push(['normalityTest', 'en', 'method', 'Method']);
                                records.push(['normalityTest', 'en', 'mu', 'Hypothesized Mean']);
                                records.push(['normalityTest', 'en', 'sigma-square', 'Hypothesized Variance']);
                                records.push(['normalityTest', 'en', 'groupby', 'Group By']);
                                records.push(['autoLogisticRegressionPredict', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['autoLogisticRegressionPredict', 'en', 'prediction-col', 'Prediction Column Name']);
                                records.push(['autoLogisticRegressionPredict', 'en', 'probability-col', 'Probability Column Name']);
                                records.push(['autoLogisticRegressionPredict', 'en', 'raw-prediction-col', 'Raw Prediction Column Name']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'auto', 'Auto']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'elastic-net-param', 'Elastic Net Parameter']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'fit-intercept', 'Fit Intercept']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'max-iter', 'Max Iteration']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'standardization ', 'Standardization']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'reg-param', 'Regularization Parameter']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'threshold', 'Threshold']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'tol', 'Tolerance']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'method', 'Method']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'metric-name', 'Metric Name']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'elastic-net-param-arr', 'Elastic Net Parameter Set']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'fit-intercept-arr', 'Fit Intercept Set']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'max-iter-arr', 'Max Iteration Set']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'standardization-arr', 'Standardization Set']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'reg-param-arr', 'Regularization Parameter Set']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'threshold-arr', 'Threshold Set']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'tol-arr', 'Tolerance Set']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'train-ratio', 'Train Ratio']);
                                records.push(['autoLogisticRegressionTrain', 'en', 'num-folds', 'Number of Folds']);
                                records.push(['indexToLabel', 'en', 'input-col', 'Input Column']);
                                records.push(['indexToLabel', 'en', 'label-type', 'Label Type']);
                                records.push(['indexToLabel', 'en', 'label-info', 'Labels']);
                                records.push(['indexToLabel', 'en', 'output-col', 'Output Column']);
                                records.push(['indexToLabel', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['indexToLabel', 'en', 'group-by', 'Group By']);
                                records.push(['indexToLabelModel', 'en', 'input-cols', 'Input Column']);
                                records.push(['indexToLabelModel', 'en', 'label-col-name', 'Label Col Name']);
                                records.push(['indexToLabelModel', 'en', 'output-col', 'Out Col Name']);
                                records.push(['indexToLabelModel', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['indexToLabelModel', 'en', 'group-by', 'Group By']);
                                records.push(['labelIndexer', 'en', 'input-cols', 'Input Columns']);
                                records.push(['labelIndexer', 'en', 'suffix', 'Suffix']);
                                records.push(['labelIndexer', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['labelIndexer', 'en', 'group-by', 'Group By']);
                                records.push(['labelIndexerModel', 'en', 'suffix', 'Suffix']);
                                records.push(['labelIndexerModel', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['labelIndexerModel', 'en', 'group-by', 'Group By']);
                                records.push(['predictor', 'en', 'feature-cols', 'Feature Columns']);
                                records.push(['predictor', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['predictor', 'en', 'prediction-col', 'Prediction Column']);
                                records.push(['predictor', 'en', 'gb', 'Group By']);
                                records.push(['autoLinearRegressionTrain', 'en', 'label-col', 'Y Column']);
                                records.push(['autoLinearRegressionTrain', 'en', 'feature-cols', 'X Columns']);
                                records.push(['autoLinearRegressionTrain', 'en', 'weight-col', 'Weight Column']);
                                records.push(['autoLinearRegressionTrain', 'en', 'auto', 'Auto']);
                                records.push(['autoLinearRegressionTrain', 'en', 'method', 'Method']);
                                records.push(['autoLinearRegressionTrain', 'en', 'metric-name', 'Metric Name']);
                                records.push(['autoLinearRegressionTrain', 'en', 'elastic-net-arr', 'Elastic Net Parameter Set']);
                                records.push(['autoLinearRegressionTrain', 'en', 'fit-intercept-arr', 'Fit Intercept Set']);
                                records.push(['autoLinearRegressionTrain', 'en', 'max-iter-arr', 'Max Iteration Set']);
                                records.push(['autoLinearRegressionTrain', 'en', 'standardization-arr', 'Standardization Set']);
                                records.push(['autoLinearRegressionTrain', 'en', 'reg-param-arr', 'Regularization Parameter Set']);
                                records.push(['autoLinearRegressionTrain', 'en', 'solver-arr', 'Solver Set']);
                                records.push(['autoLinearRegressionTrain', 'en', 'tolerance-arr', 'Tolerance Set']);
                                records.push(['autoLinearRegressionTrain', 'en', 'train-ratio', 'Train Ratio']);
                                records.push(['autoLinearRegressionTrain', 'en', 'num-folds', 'Number of Folds']);
                                records.push(['autoLinearRegressionTrain', 'en', 'elastic-net', 'Elastic Net Parameter']);
                                records.push(['autoLinearRegressionTrain', 'en', 'fit-intercept', 'Fit Intercept']);
                                records.push(['autoLinearRegressionTrain', 'en', 'max-iter', 'Max Iteration']);
                                records.push(['autoLinearRegressionTrain', 'en', 'standardization ', 'Standardization']);
                                records.push(['autoLinearRegressionTrain', 'en', 'reg-param', 'Regularization Parameter']);
                                records.push(['autoLinearRegressionTrain', 'en', 'solver', 'Solver']);
                                records.push(['autoLinearRegressionTrain', 'en', 'tol', 'Tolerance']);
                                records.push(['autoLinearRegressionPredict', 'en', 'hold-cols', 'Hold Columns']);
                                records.push(['autoLinearRegressionPredict', 'en', 'prediction-col', 'Prediction Column Name']);
                                records.push(['autoLinearRegressionPredict', 'en', 'probability-col', 'Probability Column Name']);
                                records.push(['autoLinearRegressionPredict', 'en', 'raw-prediction-col', 'Raw Prediction Column Name']);
                                records.push(['optPreprocessing', 'en', 'name', 'Column']);
                                records.push(['optPreprocessing', 'en', 'new-name', 'New Column']);

                                records.push(['brightics.function.classification$xgb_classification_predict', 'en', 'prediction_col', 'Prediction Column']);
                                records.push(['brightics.function.classification$xgb_classification_predict', 'en', 'probability_col', 'Probability Column']);
                                records.push(['brightics.function.classification$xgb_classification_train', 'en', 'feature_cols', 'Feature Columns']);
                                records.push(['brightics.function.classification$xgb_classification_train', 'en', 'label_col', 'Label Column']);
                                records.push(['brightics.function.clustering$kmeans_train_predict', 'en', 'input_cols', 'Input Columns']);
                                records.push(['brightics.function.clustering$kmeans_train_predict', 'en', 'n_clusters', 'Number of Clusters']);
                                records.push(['brightics.function.clustering$kmeans_train_predict', 'en', 'prediction_col', 'Prediction Column']);
                                records.push(['brightics.function.clustering$kmeans_train_predict', 'en', 'init', 'Method for initialization']);
                                records.push(['brightics.function.clustering$kmeans_train_predict', 'en', 'n_init', 'Number of Different Initial Points']);
                                records.push(['brightics.function.clustering$kmeans_train_predict', 'en', 'max_iter', 'Maximum Number of Iterations']);
                                records.push(['brightics.function.clustering$kmeans_train_predict', 'en', 'tol', 'Relative tolerance']);
                                records.push(['brightics.function.clustering$kmeans_train_predict', 'en', 'precompute_distances', 'Precompute distances']);
                                records.push(['brightics.function.clustering$kmeans_train_predict', 'en', 'seed', 'Seed']);
                                records.push(['brightics.function.clustering$kmeans_train_predict', 'en', 'n_jobs', 'Number of Jobs']);
                                records.push(['brightics.function.clustering$kmeans_train_predict', 'en', 'algorithm', 'Kmeans Algorithm']);
                                records.push(['brightics.function.evaluation$evaluate_classification', 'en', 'label_col', 'Label Column']);
                                records.push(['brightics.function.evaluation$evaluate_classification', 'en', 'prediction_col', 'Prediction Column']);
                                records.push(['brightics.function.evaluation$evaluate_regression', 'en', 'label_col', 'Label Column']);
                                records.push(['brightics.function.evaluation$evaluate_regression', 'en', 'prediction_col', 'Prediction Column']);
                                records.push(['brightics.function.io$read_csv97059', 'en', 'path', 'Path']);
                                records.push(['brightics.function.io$write_csv', 'en', 'path', 'Path']);
                                records.push(['brightics.function.regression$glm_predict', 'en', 'prediction_col', 'Prediction Column']);
                                records.push(['brightics.function.regression$glm_train', 'en', 'feature_cols', 'Feature Columns']);
                                records.push(['brightics.function.regression$glm_train', 'en', 'label_col', 'Label Column']);
                                records.push(['brightics.function.regression$glm_train', 'en', 'family', 'Family']);
                                records.push(['brightics.function.regression$glm_train', 'en', 'link', 'Link']);
                                records.push(['brightics.function.regression$glm_train', 'en', 'fit_intercept', 'Fit Intercept']);
                                records.push(['brightics.function.regression$linear_regression_predict', 'en', 'prediction_col', 'Prediction Column']);
                                records.push(['brightics.function.regression$linear_regression_train', 'en', 'feature_cols', 'Feature Columns']);
                                records.push(['brightics.function.regression$linear_regression_train', 'en', 'label_col', 'Label Column']);
                                records.push(['brightics.function.regression$linear_regression_train', 'en', 'fit_intercept', 'Fit Intercept']);
                                records.push(['brightics.function.regression$xgb_regression_train', 'en', 'feature_cols', 'Feature Columns']);
                                records.push(['brightics.function.regression$xgb_regression_train', 'en', 'label_col', 'Label Column']);
                                records.push(['brightics.function.regression$xgb_regression_train', 'en', 'max_depth', 'Max Depth']);
                                records.push(['brightics.function.regression$xgb_regression_train', 'en', 'learning_rate', 'Learning Rate']);
                                records.push(['brightics.function.regression$xgb_regression_train', 'en', 'n_estimators', 'Number of Trees']);
                                records.push(['brightics.function.regression$xgb_regression_train', 'en', 'random_state', 'Seed']);
                                records.push(['brightics.function.regression$xgb_regression_train', 'en', 'figure_dpi', 'Plot Tree Size']);
                                records.push(['brightics.function.regression$xgb_regression_train', 'en', 'input_cols', 'Input Column']);
                                records.push(['brightics.function.regression$xgb_regression_train', 'en', 'how', 'How']);
                                records.push(['brightics.function.regression$xgb_regression_train', 'en', 'thresh', 'Threshold']);

                                batchUpdate(FUNCTION_LABEL_CREATE, records);

                                // if (doneCallback) doneCallback(result.rows, result, DDL_CREATE_FUNCTION_LABEL_TABLE, ['brtc_function_label']);
                            });
                    });
                });
            }
        }
    }
};
