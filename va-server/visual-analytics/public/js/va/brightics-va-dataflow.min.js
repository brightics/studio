/*   Brightics VA Build 191105 */
/*   Brightics VA Build 191105 */
(function () {
    'use strict';

    var root = this;
    var library = root.Brightics.VA.Core.Functions.Library;


    root.Brightics.VA.Implementation.DataFlow = {
        Clazz: 'data',
        Label: 'Data Flow',
        Launcher: {},
        Validator: {},
        Editors: {
            Diagram: {
                Shapes: {}
            },
            Sheet: {
                Panels: {
                    Properties: {}
                }
            },
            Header: {},
            BodyContainer: {}
        },
        Dialogs: {
            RefineSteps: {
                Validator: {}
            }
        },
        Tools: {
            Adapter: {},
            Manager: {}
        },
        Utils: {}
    };

    root.Brightics.VA.Implementation.DataFlow.Functions =
        library.extendFunctions(['load', 'dbReader', 'unload', 'cassandraLoad', 'cassandraUnload', 'randomDataGeneration', 'ewma', 'imputeDatetime', 'imputeNumberTypeFillColumn', 'imputeStringTypeFillColumn',
            'kalmanFilter', 'movingAverage', 'dataNormalization', 'sort', 'timeShift', 'timeSeriesDistance', 'conditionalUpdate', 'elementwiseProduct', 'polynomialExpansion', 'polynomialRegressionTrain', 'polynomialRegressionPredict',
            'distinctFilter', 'conditionFilter', 'minmaxFilter', 'imputeRemoveLine', 'lengthFilter', 'outlierRemoval', 'stringFilter', 'independentFilter', 'correlation',
            'quantileDiscretizer', 'frequency', 'frequencyMat', 'statisticDerivation', 'statisticSummary', 'kernelDensityEstimation', 'kernelDensity', 'gaussianMixtureTrain',
            'gaussianMixturePredict', 'chiSquareTest', 'duncanTest', 'ttest', 'typeCast', 'changeColumnName', 'capitalizeColName', 'reorganizeTable', 'join', 'colAppend', 'rowAppend',
            'powerRowAppend', 'queryExecutor', 'pivot', 'unpivot', 'stratifiedSampling', 'randomSampling', 'timeSeriesTranspose', 'splitData', 'refine', 'qrDecomposition', 'pca', 'indexToString', 'transpose',
            'bucketizer', 'mdRemove', 'mdReplaceNumber', 'mdReplaceString', 'mdTrim', 'mdCapitalize', 'mdLength', 'numericalVariableDerivation', 'rowIndexDerivation', 'conditionalDerivation',
            'ymdhwFromDatetime', 'datetimeFormatConvertor', 'datetimeCalculator', 'oneHotEncoder', 'stringIndexer', 'vectorIndexer', 'binarizer', 'nGram', 'stringSplit', 'addLeadLag', 'autoArimaTrain',
            'autoArimaPredict', 'arimaTrain', 'arimaPredict', 'linearRegressionTrain', 'linearRegressionPredict', 'logisticRegressionTrain', 'logisticRegressionPredict', 'timeSeriesLRTrain', 'timeSeriesLRPredict',
            'holtWintersTrain', 'holtWintersPredict', 'isotonicRegressionTrain', 'isotonicRegressionPredict', 'glm', 'glmForLogisticRegression', 'glmPredict', 'glmPredictForLogisticRegression', 'alsTrain', 'alsRecommend',
            'decisionTreeTrain', 'decisionTreePredict', 'decisionTreeCartTrain', 'decisionTreeCartPredict', 'kmeans', 'knn', 'naiveBayesTrain', 'naiveBayesPredict', 'hierarchicalClustering',
            'hierarchicalClusteringPostProcess', 'svmTrain', 'svmPredict', 'svd', 'randomForestTrain', 'randomForestPredict', 'latentDirichletAllocation', 'powerIterationClustering',
            'oneVsRestLRClassifierTrain', 'oneVsRestLRClassifierPredict', 'anova', 'regressionEvaluation', 'binaryClassificationEvaluation', 'multiclassClassificationEvaluation', 'csp',
            'outDet', 'calib', 'logLikelihoodRatioTest', 'logLikelihoodRatioTestForLR', 'evaluateRankingAlgorithm', 'elasticIndexing', 'elasticSearch', 'elasticRegExpSearch',
            'elasticQueryExecutor', 'scalaScript', 'pythonScript', 'rGroupBy', 'rScript', 'flatMapR', 'rScript2', 'mlpPredict', 'mlpTrain', 'dlPredict', 'sqlExecutor', 'addColumnByRefine', 'selectColumn', 'tFIDF',
            'changeValue', 'groupBy', 'simpleFilter', 'advancedFilter', 'sortByRefine', 'linearUCBTrain', 'linearUCBPrescribe', 'associationRule', 'featureEncoding', 'columnsToArray', 'arrayToColumns', 'bigDataScatter',
            'bigDataLine', 'bigDataColumn', 'bigDataBar', 'bigDataBoxPlot', 'bigDataPie', 'bigDataHistogram', 'qLearningTrain', 'qLearningPrescribe', 'sarsaTrain', 'sarsaPrescribe', 'thompsonSamplingTrain', 'thompsonSamplingPrescribe',
            'valueIterationTrain', 'valueIterationPrescribe', 'interactivePrediction', 'tokenizer', 'chiSqSelection', 'createTable', 'correlationWithPivot', 'timeSeriesAnalysis', 'eDA', 'optPreprocessing',
            'localOptimization', 'globalOptimization', 'parameterStudies', 'designOfExperiments', 'sampling', 'uncertaintyQuantification', 'randomSplit', 'unknownFunction',
            'flow',
            'if',
            'forLoop',
            'whileLoop',
            'import',
            'export',
            'setValue',
            'dataViewer',
            'udfTest',
            'kmeanspy', 'kmeansmodelpy', 'pairwisescatter', 'kmeans2', 'kmeans2model', 'testftn1', 'testftn2', 'testftn3',
            'unpivot', 'pythonRefine', 'timeSeriesSmoothen', 'timeSeriesDecomposition', 'crossCorrelation', 'autoCorrelation', 'aRXTrain', 'aRXPredict', 'tFIDF', 'stopWordsRemover',
            'vIF', 'twoSampleTTestForStacked', 'trimmedMeansOneWayTest', 'stringSummary', 'pairedTTest', 'oneSampleTTest', 'normalityTest', 'mannWhitneyUTest', 'levenesTest',
            'kruskalWallisHTest', 'fTestForStacked', 'crossTable', 'correlationTest', 'chiSquareTestOfIndependence', 'chiSquareTestForGivenProportions', 'chiSqTestForTheVariance',
            'bootstrapLimit', 'bartlettsTestForStacked', 'stepwiseLinearRegressionTrain', 'stepwiseLinearRegressionPredict', 'predictor', 'polynomialRegressionTrain', 'polynomialRegressionPredict',
            'linearRegressionResidual', 'mahalanobisDistanceOutlierDetection', 'exportColumn', 'oneHotEncoderModel', 'oneHotEncoder', 'labelIndexerModel', 'labelIndexer',
            'indexToLabelModel', 'indexToLabel', 'evaluateTimeSeries', 'sVMRBFTrain', 'sVMRBFPredict', 'sVMRBF', 'symbolicRegressionTrain', 'symbolicRegressionPredict', 'randomForestRegressionTrain',
            'randomForestRegressionPredict', 'randomForestClassificationTrain', 'randomForestClassificationPredict', 'gBTRegressionTrain', 'gBTRegressionPredict', 'gBTClassificationTrain',
            'gBTClassificationPredict', 'decisionTreeRegressionTrain', 'decisionTreeRegressionPredict', 'decisionTreeClassificationTrain', 'decisionTreeClassificationPredict',
            'autoRegressionTrain', 'autoRegressionPredict', 'autoOneVsRestLogisticRegressionTrain', 'autoMLPTrainForClassification', 'autoLogisticRegressionTrain', 'autoLogisticRegressionPredict',
            'autoLinearRegressionTrain', 'autoLinearRegressionPredict', 'autoFeatureSelection', 'autoDataCleansing', 'autoClassificationTrain', 'autoClassificationPredict',
            'bootstrapLimit', 't2train', 't2predict', 'sprt', 'sbmtrain', 'sbmpredict', 'adRandomForestTrain', 'adRandomForestPredict', 'adPoissonFilter',
            'readFromS3',
            'writeToS3',
            'readFromDb',
            'writeToDb',
            'addColumnIfPython','simpleFilterPython','advancedFilterPython',
            'selectColumnPython','sortPython','addColumnPython',
            'dialogProperties',
            'merge',
            'addFunctionColumnsPython',
            'brightics.function.evaluation$plot_roc_pr_curve',
            'queryExecutorPython',
            'createTablePython',
            'loadModel',
            'unloadModel',
            'brightics.function.transform$get_tabletable',
            'queryExecutorPython2'
        ]);

    root.Brightics.VA.Implementation.DataFlow.Helpers =
        {
            sqlfunctionhelp: {
                label: 'SQL Function Help',
                operation: 'SQLFuncHelper'
            }
        };

    root.Brightics.VA.Implementation.DataFlow.defaultModel = $.extend(true, (function () {
        var ret = {
            variables: {},
            variableRef: [],
            innerModels: {},
            getVariableAssignedParamList: function (variableName) {
                var list = [];
                for (var i = 0; i < this.variableRef.length; i++) {
                    var ref = this.variableRef[i];
                    for (var key in ref.param) {
                        if (ref.param[key] === variableName) {
                            list.push({
                                fid: ref.fid,
                                param: key
                            });
                        }
                    }
                }
                return list;
            },
            renameVariableKey: function (curKey, nxtKey) {
                if (this.variables[nxtKey]) {
                    throw new Error('variable already exists');
                } else {
                    this.variables[nxtKey] = this.variables[curKey];
                    delete this.variables[curKey];
                }
            },
            updateVariable: function (key, type, newValue) {
                if (!this.variables[key]) {
                    throw new Error('variable not exists');
                } else {
                    this.variables[key].type = type;
                    this.variables[key].value = newValue;
                }
            },
            getInnerModel: function (mid) {
                var map = this.innerModels || {};
                return map[mid];
            },
            getInnerModels: function (mid) {
                this.innerModels = this.innerModels || {};
                return this.innerModels;
            },
            addInnerModel: function (model) {
                this.innerModels = this.innerModels || {};
                this.innerModels[model.mid] = model;
                return model;
            },
            removeInnerModel: function (mid) {
                var model = this.innerModels[mid];
                delete this.innerModels[mid];
                return model;
            },
            removeInnerModelRecursion: function (mid) {
                var _this = this;
                var model = this.innerModels[mid];
                var deletedModels = [];
                if (model) {
                    var functions = model.functions;
                    deletedModels = deletedModels.concat(_.map(functions, function (fn) {
                        var subModels =
                            Brightics.VA.Core.Utils.NestedFlowUtils.getSubModels(_this, fn);
                        return _.map(subModels, function (subModel) {
                            return _this.removeInnerModelRecursion(subModel.mid);
                        });
                    }));
                    deletedModels.push(_this.removeInnerModel(mid));
                }
                return _.filter(_.flattenDeep(deletedModels), _.negate(_.isUndefined));
            }
        };
        ret[IN_DATA] = [];
        ret[OUT_DATA] = [];
        return ret;
    }()), Brightics.VA.Default.analyticsModel);

    root.Brightics.VA.Implementation.DataFlow.innerModel = $.extend(true, (function () {
        var ret = {};
        ret[IN_DATA] = [];
        ret[OUT_DATA] = [];
        return ret;
    }()), Brightics.VA.Default.analyticsModel);


}).call(this);
/**
 * Created by sungjin1.kim on 2016-01-28.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    var TabChannel = brtc_require('TabChannel');

    function DataFlowEditor(parentId, options) {
        Brightics.VA.Core.Editors.ModelEditor.call(this, parentId, options);

        this.initUDFChangeListener();
        this.initTemplateChangeListener();
        this.initTabChannel();
    }

    DataFlowEditor.prototype = Object.create(Brightics.VA.Core.Editors.ModelEditor.prototype);
    DataFlowEditor.prototype.constructor = DataFlowEditor;

    DataFlowEditor.prototype.createPanelFactory = function () {
        this.panelFactory = new Brightics.VA.Implementation.DataFlow.Editors.Sheet.PanelFactory();
    };

    DataFlowEditor.prototype.addToLibrary = function (template) {
        var _this = this;
        new Brightics.VA.Core.Dialogs.AddToLibraryDialog(this.$mainControl, {
            close: function (event) {
                if (event.OK) {
                    var opt = {
                        library_id: event.library,
                        label: event.label,
                        contents: template,
                        description: ''
                    };
                    _this.modelLayoutManager.handleAppendTemplate(opt);
                }
            },
            title: 'Add to Template'
        });
    };

    DataFlowEditor.prototype.addToFunctionClipboard = function (template) {

        if (template.functions.length > 0) {
            var opt = {
                width: $('.brtc-va-editors-diagram-diagrameditorpage-function-multiselected').width(),
                height: $('.brtc-va-editors-diagram-diagrameditorpage-function-multiselected').height(),
                contents: template
            };

            Studio.getClipboardManager().addFunctionToClipboard(opt);
        }
    };

    DataFlowEditor.prototype.initUDFChangeListener = function () {
        var _this = this;

        this.$mainControl.bind('udfChanged', function (event, selction) {
            _this.fireUDFChanged(selction);
        });
    };

    DataFlowEditor.prototype.initTemplateChangeListener = function () {
        var _this = this;

        this.$mainControl.bind('templateChanged', function (event, selction) {
            _this.fireTemplateChanged(selction);
        });
    };

    DataFlowEditor.prototype.initTabChannel = function () {
        var self = this;
        self.tabChannel = new TabChannel(Date.now());
        self.tabChannel.listen('multi-chart', function (req) {
            self.getCommandManager()
                .execute(new Brightics.VA.Core.Editors.Diagram.Commands
                    .UpdateMultiChartOptionCommand(self, {
                        fid: req.value.fid,
                        cid: req.value.cid,
                        value: req.value.multiChartOption
                    }));
            return {success: true};
        });
    };

    DataFlowEditor.prototype.fireUDFChanged = function (selection) {
        this.modelLayoutManager.handleUDFChanged(selection);
    };

    DataFlowEditor.prototype.fireTemplateChanged = function (selection) {
        this.modelLayoutManager.handleTemplateChanged(selection);
    };

    DataFlowEditor.prototype.preProcess = function (_options) {
        var options = _options || {};
        var projectId = this.getEditorInput().getProjectId();
        var mainModel = this.getModel();
        return Brightics.VA.Core.Utils.NestedFlowUtils.makeRunnable(projectId, mainModel, options)
            .then(function (r) {
                return r;
            })
            .catch(console.error);
    };

    DataFlowEditor.prototype.getConnectionKey = function () {
        return this.tabChannel.getConnectionKey();
    };

    Brightics.VA.Implementation.DataFlow.Editor = DataFlowEditor;
}).call(this);

/**
 * Created by sds on 2017-07-17.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    /**
     * context spec
     * status : 'normal' or 'if' or 'loop'
     * context: fid, mid
     */

    function ModelLayoutManager(editor, options) {
        Brightics.VA.Core.Editors.ModelLayoutManager.call(this, editor, options);
        this.registerCommandManagerListener();
        this.getToolbar().navigator.registerOpenNavigatorDialog(this.openNavigatorDialog.bind(this));
    }

    ModelLayoutManager.prototype = Object.create(Brightics.VA.Core.Editors.ModelLayoutManager.prototype);
    ModelLayoutManager.prototype.constructor = ModelLayoutManager;

    ModelLayoutManager.prototype.registerConditionHeader = function (conditionHeader) {
        this.conditionHeader = conditionHeader;
        this.conditionHeader.on('tab-click', function (evt) {
            this.changeEditorModel(evt.data.getId());
        }.bind(this));
    };

    ModelLayoutManager.prototype.registerLoopHeader = function (loopHeader) {
        this.loopHeader = loopHeader;
    };

    // TODO -------------------------------------------------
    ModelLayoutManager.prototype.changeEditorModel = function (mid) {
        this.getEditor().setActiveModel(mid);
        this.getDiagramEditorWrapper().setModel(this.getEditor().getActiveModel(), this.fnUnit);
        this.getToolbar().navigator.buildNavigator(mid, this.fnUnit.fid);
        this.getEditor().resetSheetEditorPage();
        this.getSideBarManager().onModelChange();
        this.getDiagramEditorPage().createExpressionControl();

        this.adjustLayout();
    };

    // TODO -------------------------------------------------
    ModelLayoutManager.prototype.openActivity = function (mid, fnUnit) {
        this.fnUnit = fnUnit;
        this.getToolbar().navigator.buildNavigator(mid, fnUnit ? fnUnit.fid : undefined);
        this.getEditor().setActiveModel(mid);

        /*
        1. 네비게이터 변경
        2. Header 보여줌
        3. DiagramEditorPage 변경
        4. 사이드바 변경
        5. SheetEditorPage 숨김 (내용 초기화?)
        */

        this.getDiagramEditorWrapper().setModel(this.getEditor().getActiveModel(), fnUnit);
        this.getEditor().resetSheetEditorPage();
        this.getSideBarManager().onModelChange();
        this.getDiagramEditorPage().createExpressionControl();
        // if (fnUnit) {this.getToolbar().showItem('expression')}
        // else this.getToolbar().hideItem('expression');

        this.adjustLayout();
    };

    ModelLayoutManager.prototype.setDiagramHeight = function () {
        var $diagramArea = this.getEditor().getDiagramArea();

        var originHeight = this.$editor.height() - this.getToolbar().getHeight();

        var $headerArea = this.getEditor().getHeaderArea();
        var headerHeight = $headerArea.css('display') !== 'none' ?
            $headerArea.height() : 0;
        // var headerHeight = this.getDiagramEditorWrapper().getHeaderHeight();

        $diagramArea.height(originHeight - headerHeight);

        this.handleExpandStatusChanged();
    };

    ModelLayoutManager.prototype.handleAppendTemplate = function (opt) {
        this.getSideBarManager().getSideBars()['palette'].appendTemplate(opt);
    };

    ModelLayoutManager.prototype.handleSelectFunction = function (fid) {
        this.getDiagramEditorPage().selectFunction(fid);
    };

    ModelLayoutManager.prototype.handleChangeScale = function (scale) {
        this.getDiagramEditorPage().changeScale(scale);
    };

    ModelLayoutManager.prototype.handleChangeTooltipEnabled = function (enable) {
        this.getDiagramEditorPage().changeTooltipEnabled(enable);
    };

    ModelLayoutManager.prototype.handleFitToContent = function () {
        this.getDiagramEditorPage().fitToContent();
    };

    ModelLayoutManager.prototype.handleOpenHistoryDialog = function (event) {
        var _this = this;

        var anchorOffset = $(event.target).offset();
        var pos = {
            x: anchorOffset.left - 402 + 26,
            y: anchorOffset.top - 10 + 40
        };

        var stacks = this.getEditor().getCommandManager().getStacks();
        var source = [];
        var description;
        for (var i in stacks) {
            if (stacks[i].option && stacks[i].option.fnUnit) {
                description = stacks[i].getLabel() + ' - ' + stacks[i].options.fnUnit.display.label;
            } else {
                description = stacks[i].getLabel();
            }

            source.push({
                name: stacks[i].getLabel(),
                description: description
            });
        }
        var goHistoryHandler = function (dialogResult) {
            if (dialogResult.OK) {
                _this.getEditor().getCommandManager().go(dialogResult.goHistory);
                _this.getEditor().setEnableRedoUndoButton();
                _this.getEditor().refreshRedoUndoLabel();
            }
        };
        this.getEditor().setHistorySelector(new Brightics.VA.Core.Dialogs.HistorySelector(this.getEditor().$mainControl, {
            selectHistory: goHistoryHandler,
            stackIndex: _this.getEditor().getCommandManager().getIndex(),
            pos: pos,
            source: source,
            editor: _this.getEditor()
        }));
    };

    ModelLayoutManager.prototype.handleOpenIndexDialog = function (event) {
        var _this = this;

        var anchorOffset = $(event.target).offset();
        var pos = {
            x: anchorOffset.left - 402 + 26,
            y: anchorOffset.top - 10 + 40
        };

        this.getEditor().indexDialog = new Brightics.VA.Core.Dialogs.IndexDialog(this.getEditor().$mainControl, {
            editor: _this.getEditor(),
            window: {
                position: pos
            },
            appendTo: _this.getEditor().$mainControl
        });
    };

    ModelLayoutManager.prototype.openNavigatorDialog = function (pos, data, opt) {
        var _this = this;

        if (this.getEditor().navigatorDialog) this.getEditor().navigatorDialog.close();
        this.getEditor().navigatorDialog = new Brightics.VA.Core.Dialogs
            .NavigatorDialog(this.getEditor().$mainControl, _.merge({
                editor: _this.getEditor(),
                window: {
                    position: pos
                },
                appendTo: _this.getEditor().$mainControl
            }, opt));
    };

    ModelLayoutManager.prototype.handleOpenScheduleManagementDialog = function () {
        new Brightics.VA.Core.Dialogs.ScheduleManagementDialog(this.getEditor().$mainControl, {
            editorInput: this.getEditor().getModel(),
            appendTo: this.getEditor().$parent,
            title: 'Schedule list'
        });
    };

    ModelLayoutManager.prototype.handleExpandStatusChanged = function () {
        this.setEditorWidth();
    };

    ModelLayoutManager.prototype.setEditorWidth = function () {
        var sideBarManager = this.getSideBarManager();

        if (!sideBarManager) return;

        var $splitter = this.getEditor().getMainArea().find('.brtc-va-editors-modeleditor-splitter');
        var tabBarWidth = this.editor.getLeftTabBarArea().height();
        var sideBarWidth = sideBarManager.getLeftSideBarWidth() + sideBarManager.getRightSideBarWidth();
        if (sideBarManager.isOpen('left')) sideBarWidth += tabBarWidth;
        if (sideBarManager.isOpen('right')) sideBarWidth += tabBarWidth;

        var marginLeft = (sideBarManager.isOpen('left')) ? sideBarManager.getLeftSideBarWidth() + tabBarWidth : tabBarWidth;
        $splitter.css('width', 'calc(100% - ' + sideBarWidth + 'px)').css('margin-left', marginLeft);

        var $header = this.getEditor().getHeaderArea();
        var splitterHeight = 40 + $header.outerHeight();
        $splitter.css('height', 'calc(100% - ' + splitterHeight + 'px)');
        $header.css('width', 'calc(100% - ' + sideBarWidth + 'px)').css('margin-left', marginLeft);

        this.getSheetEditorPage().getFnUnitViewer().updatePanelWidth();
    };

    ModelLayoutManager.prototype.getFnUnit = function () {
        return this.fnUnit;
    };

    ModelLayoutManager.prototype.registerCommandManagerListener = function () {
        var _this = this;

        var commandManager = this.getEditor().getCommandManager();
        commandManager.registerCallbackLeft(function (command) {
            var fnUnit = command.options.editorContext.fnUnit;
            var mid = command.options.editorContext.mid;

            if (command.options.label === 'Remove Condition' &&
                mid === command.options.mid) {
                mid = fnUnit.param.if.mid;
            }
            if (_this.fnUnit !== fnUnit || mid !== _this.getEditor().getActiveModel().mid) {
                _this.openActivity(mid, fnUnit);
            }
            _this.getSideBarManager().onModelChange(command);
        });

        commandManager.registerGoHistoryCallbackLeft(function (command) {
            var commandList = command.options.commands;
            var lastCommand = commandList[commandList.length - 1];
            var fnUnit = lastCommand.options.editorContext.fnUnit;
            var mid = lastCommand.options.editorContext.mid;

            if (lastCommand.options.label === 'Remove Condition' &&
                mid === lastCommand.options.mid) {
                mid = fnUnit.param.if.mid;
            }
            if (_this.fnUnit !== fnUnit || mid !== _this.getEditor().getActiveModel().mid) {
                _this.openActivity(mid, fnUnit);
            }
            _this.getSideBarManager().onModelChange();
        });
    };

    ModelLayoutManager.prototype.getDiagramEditorPage = function () {
        return this.editor.getDiagramEditorPage();
    };

    ModelLayoutManager.prototype.getSheetEditorPage = function () {
        return this.editor.getSheetEditorPage();
    };

    ModelLayoutManager.prototype.getDiagramEditorWrapper = function () {
        return this.editor.getDiagramEditorWrapper();
    };

    ModelLayoutManager.prototype.handleOnActivate = function () {
        this.getDiagramEditorPage().onActivated();
        this.getSideBarManager().onActivated();
        this.getSheetEditorPage().onActivated();
    };

    ModelLayoutManager.prototype.destroy = function () {
        this.getSheetEditorPage().destroy();
        this.getDiagramEditorPage().destroy();
    };

    Brightics.VA.Implementation.DataFlow.ModelLayoutManager = ModelLayoutManager;
}).call(this);

/**
 * Created by ng1123.kim on 2016-03-18.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    function DataFlowValidator(options) {
        this.validator = {};
        this.options = options || {};
    }

    DataFlowValidator.prototype.validate = function (analyticsModel) {
        var problems = [];
        for (var i in analyticsModel.functions) {
            var fnUnit = analyticsModel.functions[i];

            try {
                var problem
                    , validator = this.createValidator(fnUnit.func);

                if (validator) problem = validator.validate(fnUnit, analyticsModel);
                if (problem) problems = problems.concat(problem);
            } catch (err) {
                console.log(err);
            }
        }
        problems = problems.filter(function (problem) {
            return typeof problem !== 'undefined' && problem != null;
        });
        analyticsModel.problemList = problems;
        return analyticsModel.problemList;
    };

    DataFlowValidator.prototype.createValidator = function (func) {
        var clazz = typeof root.Brightics.VA.Implementation.DataFlow.Functions[func] === 'undefined' ? root.Brightics.VA.Implementation.DataFlow.Functions.unknownFunction.validator : root.Brightics.VA.Implementation.DataFlow.Functions[func].validator;
        if (this.validator[func]) {
            return this.validator[func];
        } else {
            return this.validator[func] = clazz ? new clazz() : new Brightics.VA.Core.Validator.BaseValidator();
        }
    };

    Brightics.VA.Implementation.DataFlow.Validator = DataFlowValidator;

}).call(this);
/**
 * Created by SDS on 2018-07-10.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    function InvokeValidator() {
        this._functionContents = this._getContents();
        this._validatorParams = this._functionContents.params || [];

        Brightics.VA.Core.Validator.SingleInputValidator.call(this);
    }

    InvokeValidator.prototype = Object.create(Brightics.VA.Core.Validator.SingleInputValidator.prototype);
    InvokeValidator.prototype.constructor = InvokeValidator;

    InvokeValidator.prototype.initRules = function () {
        // fix me: 기존 validator 로직이 처리가 안되어 있고 하나로 묶여있음 
        // (무조건 SingleInputValidator 하나 상속)
        // link 가 안되어 있으면 다른 validation을 안한다거나...
        // 동작이 안되는 것도 있음
        this.addLinkRule();
        this.addInTableRule();

        this.addRulesFromParams();
        this._createCustomValidation()

    };

    InvokeValidator.prototype.addLinkRule = function () {
        var _this = this;
        var inRange = this.FnUnitUtils.getTotalInRangeCount(this._functionContents);
        if (typeof inRange === 'undefined' || inRange.min == 0) return;
        this.addRule(function (fnUnit) {
            return _this.checkLinkIsConnected(fnUnit);
        });
    };

    InvokeValidator.prototype.addInTableRule = function () {
        var _this = this;
        this.addRule(function (fnUnit) {
            if (_this.FnUnitUtils.hasMeta(fnUnit) && !_this.FnUnitUtils.hasTable(fnUnit)) return; 
            return _this.checkInTableIsEmpty(fnUnit);
        });
    };

    InvokeValidator.prototype._createCustomValidation = function () {
        var param;
        for (var i = 0; i < this._validatorParams.length; i++) {
            param = this._validatorParams[i];
            if (param.validation && param.validation.length > 0) {
                this._addCustomRule(param);
            }
        }
    };


    InvokeValidator.prototype.addColumnsRule = function () {
        var _this = this;
        this.addRule(function (fnUnit) {
            if (_this.checkLinkIsConnected(fnUnit)) return;
            return _this.checkColumnIsEmpty(fnUnit, 'columns', fnUnit.param['columns'][0], 'Columns');
        });
        this.addRule(function (fnUnit) {
            if (_this.checkLinkIsConnected(fnUnit)) return;
            return _this.checkColumnExists(fnUnit, 'columns', fnUnit.param['columns'][0]);
        });
    };

    InvokeValidator.prototype._addCustomRule = function (spec) {
        var _this = this;

        var validationList = spec.validation;
        var validation;
        var id = spec.id;

        for (var i = 0; i < validationList.length; i++) {
            validation = validationList[i];
            this.addRule(function (fnUnit) {
                if (_this.checkLinkIsConnected(fnUnit)) return;
                var checkLogic = new Function('value', 'fnUnit', validation.validationCode);

                var clonFnUnit = $.extend(true, {}, fnUnit);
                if (fnUnit.param[id] && checkLogic.call(_this, fnUnit.param[id], clonFnUnit) === false) {
                    var messageInfo = {
                        errorCode: validation.messageCode || 'BR-0100',
                        param: id,
                        messageParam: validation.messageParam
                    };
                    return _this.problemFactory.createProblem(messageInfo, fnUnit);
                }
            });
        }
    };

    InvokeValidator.prototype.addRulesFromParams = function () {
        var param;

        for (var i = 0; i < this._validatorParams.length; i++) {
            param = this._validatorParams[i];
            if (param.mandatory === true) {
                this._createMandatoryRule(param);
            }
        }
    };

    InvokeValidator.prototype._createMandatoryRule = function (spec) {
        const _this = this;
        const { id, label, type } = spec;
        if (spec.control === 'ColumnSelector') {
            this.addRule(function (fnUnit) {
                if (_this.checkLinkIsConnected(fnUnit)) return;
                return _this.checkColumnIsEmpty(fnUnit, id, fnUnit.param[id], label);
            });
            this.addRule(function (fnUnit) {
                if (_this.checkLinkIsConnected(fnUnit)) return;
                return _this.checkColumnExists(fnUnit, id, fnUnit.param[id]);
            });
        } else if (spec.control === 'InputBox') {
            this.addRule(function (fnUnit) {
                if (_this.checkLinkIsConnected(fnUnit)) return;
                return _this.emptyProblemMessage(fnUnit, id, fnUnit.param[id], label);
            });
        } else if (spec.control === 'DropDownList') {
            this.addRule(function (fnUnit) {
                if (_this.checkLinkIsConnected(fnUnit)) return;
                return _this.emptyProblemMessage(fnUnit, id, fnUnit.param[id], label);
            });
        } else if (spec.control === 'RadioButton') {
        } else if (spec.control === 'CheckBox') {
            this.addRule(function (fnUnit) {
                if (_this.checkLinkIsConnected(fnUnit)) return;
                var checkInfo = {
                    errorCode: 'BR-0033',
                    param: id,
                    messageParam: [label]
                };
                return _this._checkArrayIsEmpty(checkInfo, fnUnit, fnUnit.param[id]);
            });
        } else if (spec.control === 'Expression') {
            this.addRule(function (fnUnit) {
                if (_this.checkLinkIsConnected(fnUnit)) return;
                return _this.emptyProblemMessage(fnUnit, id, fnUnit.param[id], label);
            });
        } else if (spec.control === 'ArrayInput') {
            this.addRule(function (fnUnit) {
                if (_this.checkLinkIsConnected(fnUnit)) return;
                var checkInfo = {
                    errorCode: 'BR-0033',
                    param: id,
                    messageParam: [label]
                };
                return _this._checkArrayIsCompact(checkInfo, fnUnit, fnUnit.param[id], label, type);
            });
        }
    };


    Brightics.VA.Implementation.DataFlow.Functions.InvokeValidator = InvokeValidator;
}).call(this);
/**
 * Created by daewon.park on 2016-09-24.
 */

/* global _ */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    function DataFlowLauncher() {
        Brightics.VA.Core.ModelLauncher.call(this);
        this.isProcessing = false;
    }

    DataFlowLauncher.prototype = Object.create(Brightics.VA.Core.ModelLauncher.prototype);
    DataFlowLauncher.prototype.constructor = DataFlowLauncher;

    DataFlowLauncher.prototype.launchUnit = function (fnUnit, args, options, listeners) {
        if (this.isProcessing) return;
        this.isProcessing = true;
        this.__launchUnit = this.__launchUnit ||
            _.debounce(function (fnUnit, args, options, listeners) {
                var _this = this;
                var jobId = this._generateJobId(fnUnit.fid);
                var userId = Brightics.VA.Env.Session.userId;
                var expectedUnitCount = 1;
                Brightics.VA.Core.Utils.RunnableFactory
                    .createForUnit(fnUnit, jobId, userId, args, options)
                    .then(function (runnable) {
                        var launchOptions = {
                            mode: 'unit',
                            clazz: Brightics.VA.Implementation.DataFlow.Clazz,
                            originalModels: [fnUnit.parent()],
                            expectedUnitCount: expectedUnitCount,
                            runnable: runnable
                        };
                        _this._launch(launchOptions, options, listeners);
                    })
                    .catch(function () {
                        _this.isProcessing = false;
                    });
            }.bind(this), 1000, {leading: true, trailing: false});
        this.__launchUnit(fnUnit, args, options, listeners);
    };

    DataFlowLauncher.prototype.launchModel = function (model, args, options, listeners) {
        if (this.isProcessing) return;
        this.isProcessing = true;
        this.__launchModel = this.__launchModel ||
            _.debounce(function (model, args, options, listeners) {
                var _this = this;
                var mid = model.mid;
                var jobId = this._generateJobId(mid);
                var userId = Brightics.VA.Env.Session.userId;
                var expectedUnitCount = model.functions.length;
                Brightics.VA.Core.Utils.RunnableFactory
                    .createForFlow(model, jobId, userId, args, options)
                    .then(function (runnable) {
                        var launchOptions = {
                            mode: 'data-flow',
                            clazz: Brightics.VA.Implementation.DataFlow.Clazz,
                            originalModels: [model],
                            expectedUnitCount: expectedUnitCount,
                            runnable: runnable
                        };

                        _this._launch(launchOptions, options, listeners);
                    })
                    .catch(function () {
                        _this.isProcessing = false;
                    });
            }.bind(this), 1000, {leading: true, trailing: false});
        this.__launchModel(model, args, options, listeners);
    };

    DataFlowLauncher.prototype._launch = function (launchOptions, options, listeners) {
        var _this = this;

        var eventDetector = new Brightics.VA.Implementation.DataFlow.EventDetector(launchOptions);        
        var processingStatusResponse = function (res) {
            for (var i in res.processes) {
                var process = res.processes[i];
                var pid = process.pid || 'pid_undefined';
                var mid = process.mid;

                var events = eventDetector.createProcessEvent(pid, mid, process.begin, process.end, process.status, i);
                for (var s in process.functions) {
                    var unit = process.functions[s];
                    if (unit.status == 'PROCESSING') {
                        _this.processingUnit = unit;
                    }
                    events = events.concat(eventDetector.createUnitEvent(pid, mid, unit, s));
                }
                for (var e in events) {
                    events[e].originalResponse = res;
                }
                if (!options || !options.hideDialog) _this._fireEvents(events);
            }
        };
        
        var processingJobEndResponse = function (res) {
            var evt = {
                eventType: 'END-JOB',
                jid: res.jobId,
                // message: res.message,
                message: _this._getProcessingMessage(res),
                detailMessage: _this._getProcessingDetailMessage(res),
                status: res.status,
                launchOptions: launchOptions,
                originalResponse: res
            };
            if (!options || !options.hideDialog) _this._fireEvents([evt]);
            delete _this.jobScheduler[res.jobId];
            _this.isProcessing = false;
        };

        var processingJobPendingResponse = function (res) {
            var evt = {
                eventType: 'PENDING-JOB',
                jid: res.jobId,
                // message: res.message,
                message: _this._getPendingMessage(res),
                status: res.status,
                launchOptions: launchOptions,
                originalResponse: res
            };
            if (!options || !options.hideDialog) _this._fireEvents([evt]);
        };

        var _listeners = {
            'status': [function (res) {
                processingStatusResponse(res);
            }],
            'success': [function (res) {
                processingStatusResponse(res);
                processingJobEndResponse(res);
            }],
            'abort': [function (res) {
                processingJobEndResponse(res);
            }],
            'fail': [function (res) {
                processingStatusResponse(res);
                processingJobEndResponse(res);
            }],
            'pending': [function (res) {
                processingJobPendingResponse(res);
            }],
            'catch': [function (err) {
                processingJobEndResponse({
                    jobId: launchOptions.runnable.jid,
                    status: 'FAIL',
                    exception: err
                });
            }]
        };
        this._extendListeners(_listeners, listeners);
        var job = new Brightics.VA.Implementation.DataFlow.Job(_listeners);

        job.start(launchOptions.runnable).then(function (res) {
            var jobId = res.result;
            _this.jobScheduler[jobId] = job;
            var evt = {
                eventType: 'BEGIN-JOB',
                jid: jobId,
                status: 'WAIT',
                launchOptions: launchOptions
            };
            if (!options || !options.hideDialog) _this._fireEvents([evt]);
        });
    };

    Brightics.VA.Implementation.DataFlow.DataFlowLauncher = DataFlowLauncher;

}).call(this);
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    function EventDetector(launchOptions) {
        this.cache = {};
        this.labelMap = {};
        this.subflowMap = {};
        this.innerModelMap = {};
        this.launchOptions = launchOptions;

        // Core와 맞춘 후 제거할 코드
        // for (var i in this.launchOptions.originalModels) {
        //     var model = this.launchOptions.originalModels[i];
        //     this.labelMap[model.mid] = model.title;
        //     this._scanFunctions2(model.mid, model);
        // }

        var models = this.launchOptions.runnable.models;
        for (var modelKey in models) {
            var model = models[modelKey];
            this._scanModel(modelKey, model);
        }
    }

    EventDetector.prototype._scanModel = function (modelKey, model, parentModelKey) {
        var pid = modelKey + '_pid';
        this.labelMap[pid] = model.title;
        this._scanFunctions(modelKey, model, parentModelKey);

        var innerModels = model.innerModels;
        for (var innerModelkey in innerModels) {
            var innerModel = innerModels[innerModelkey];
            this._scanModel(innerModelkey, innerModel, modelKey);
        }
    }

    EventDetector.prototype._scanFunctions = function (mid, model, parentId) {
        if(parentId) mid = parentId;
        for (var i = 0; i < model.functions.length; i++) {
            var fnUnit = model.functions[i];
            var key = mid + '_' + fnUnit.fid;

            this.labelMap[key] = fnUnit.label;
            // Subflow 의 경우 backend 에서 Subflow 의 BEGIN, END 상태를 주지 않는다.
            // Subflow 의 첫번째 함수가 시작되었을 때 Subflow 를 BEGIN 상태로
            // Subflow 의 마지막 함수가 종료되었을 때 Subflow 를 END 상태로 변경하기 위해 저장한다.
            if (fnUnit[FUNCTION_NAME] == 'Subflow' && fnUnit.param.functions.length > 0) {
                var subflow = {
                    fid: fnUnit.fid,
                    first: fnUnit.param.functions[0].fid,
                    last: fnUnit.param.functions[fnUnit.param.functions.length - 1].fid
                };
                for (var s in fnUnit.param.functions) {                    
                    var func = fnUnit.param.functions[s];
                    this.subflowMap[mid + '_' + func.fid] = subflow;
                }
            } 
            else if (fnUnit[FUNCTION_NAME] == 'ForLoop'
                || fnUnit[FUNCTION_NAME] == 'WhileLoop'
                || fnUnit[FUNCTION_NAME] == 'If') {
                var label = fnUnit.label;
                var innerModelId = fnUnit.param.mid;
                this.innerModelMap[innerModelId] = label;
            } 
            else if (fnUnit.param.functions) {
                this._scanFunctions(mid, fnUnit.param, fnUnit.fid);
            }
        }
    };

    // Core와 맞춘 후 제거할 코드
    // EventDetector.prototype._scanFunctions2 = function (mid, model, parentId) {
    //     for (var j in model.functions) {
    //         var fnUnit = model.functions[j],
    //             key = mid + '_' + fnUnit.fid;

    //         this.labelMap[key] = fnUnit.display.label;
    //         // Subflow 의 경우 backend 에서 Subflow 의 BEGIN, END 상태를 주지 않는다.
    //         // Subflow 의 첫번째 함수가 시작되었을 때 Subflow 를 BEGIN 상태로
    //         // Subflow 의 마지막 함수가 종료되었을 때 Subflow 를 END 상태로 변경하기 위해 저장한다.
    //         if (fnUnit[FUNCTION_NAME] == 'Subflow' && fnUnit.param.functions.length > 0) {
    //             var subflow = {
    //                 fid: fnUnit.fid,
    //                 first: fnUnit.param.functions[0].fid,
    //                 last: fnUnit.param.functions[fnUnit.param.functions.length - 1].fid
    //             };
    //             for (var s in fnUnit.param.functions) {
    //                 var func = fnUnit.param.functions[s];
    //                 this.subflowMap[mid + '_' + func.fid] = subflow;
    //             }
    //         } else if (fnUnit.param.functions) {
    //             this._scanFunctions(mid, fnUnit.param, fnUnit.fid);
    //         }
    //     }
    // };

    EventDetector.prototype.createUnitEvent = function (pid, mid, unit, sequence) {
        var events = [], evt;

        evt = this._createUnitStartEvent(pid, mid, unit, sequence);
        if (evt) events.push(evt);

        evt = this._createUnitEndEvent(pid, mid, unit, sequence);
        if (evt) events.push(evt);

        return events;
    };

    EventDetector.prototype._createUnitStartEvent = function (pid, mid, unit, sequence) {
        if (!this.cache[pid]) return;
        // if (unit.fid.indexOf('read_alluxio_pagination') > -1) return;
        // if (unit.fid.indexOf('write_alluxio_pagination') > -1) return;
        if (unit.fid.indexOf('internal_function') > -1) return;

        var fid = unit.fid;
        var cacheId;
        // Subflow 의 sub function 일 경우 Subflow 가 시작된 것이다.
        var subflow = this.subflowMap[mid + '_' + unit.fid];
        if (subflow) {
            fid = subflow.fid;
            cacheId = fid;
        } else {
            cacheId = fid + '@' + sequence;
        }

        // WAIT 가 아니고 해당 PID & FID 에 해당하는 Cache 가 없는 경우만 UNIT 이 Start 된 경우
        if (unit.status !== 'WAIT' && !this.cache[pid][cacheId]) {
            var evt = {
                eventType: 'BEGIN-UNIT',
                launchOptions: this.launchOptions,
                pid: pid,
                mid: mid,
                fid: fid,
                status: 'PROCESSING',
                label: this.labelMap[mid + '_' + fid],
                begin: unit.begin,
                message: unit.message,
                sequence: sequence
            };
            if (unit.fid.indexOf('read_alluxio_pagination') > -1) {
                evt.label = '(read)';
            } else if (unit.fid.indexOf('write_alluxio_pagination') > -1) {
                evt.label = '(write)';
            }
            this.cache[pid][cacheId] = {
                event: evt
            };
            return evt;
        } else if (this.cache[pid][cacheId]
            && (this.cache[pid][cacheId].event.begin != unit.begin || this.cache[pid][cacheId].event.status == 'SUCCESS')) {
            var evt = {
                eventType: 'BEGIN-UNIT',
                launchOptions: this.launchOptions,
                pid: pid,
                mid: mid,
                fid: fid,
                status: 'PROCESSING',
                label: this.labelMap[mid + '_' + fid],
                begin: unit.begin,
                message: unit.message,
                sequence: sequence
            };
            if (unit.fid.indexOf('read_alluxio_pagination') > -1) {
                evt.label = '(read)';
            } else if (unit.fid.indexOf('write_alluxio_pagination') > -1) {
                evt.label = '(write)';
            }
            this.cache[pid][cacheId] = {
                event: evt
            };
            return evt;
        } else if (this.cache[pid][cacheId]
            && (this.cache[pid][cacheId].event.begin != unit.begin || this.cache[pid][cacheId].event.status == 'PROCESSING')) {
            var evt = {
                eventType: 'UPDATE-UNIT',
                launchOptions: this.launchOptions,
                pid: pid,
                mid: mid,
                fid: fid,
                status: 'PROCESSING',
                label: this.labelMap[mid + '_' + fid],
                begin: unit.begin,
                message: unit.message,
                sequence: sequence
            };
            if (unit.fid.indexOf('read_alluxio_pagination') > -1) {
                evt.label = '(read)';
            } else if (unit.fid.indexOf('write_alluxio_pagination') > -1) {
                evt.label = '(write)';
            }
            this.cache[pid][cacheId] = {
                event: evt
            };
            return evt;
        } else if (this.cache[pid][cacheId]
            && (this.cache[pid][cacheId].event.begin != unit.begin || this.cache[pid][cacheId].event.status == 'SUCCESS')) {
            var evt = {
                eventType: 'BEGIN-UNIT',
                launchOptions: this.launchOptions,
                pid: pid,
                mid: mid,
                fid: fid,
                status: 'PROCESSING',
                label: this.labelMap[mid + '_' + fid],
                begin: unit.begin,
                sequence: sequence
            };
            if (unit.fid.indexOf('read_alluxio_pagination') > -1) {
                evt.label = '(read)';
            } else if (unit.fid.indexOf('write_alluxio_pagination') > -1) {
                evt.label = '(write)';
            }
            this.cache[pid][cacheId] = {
                event: evt
            };
            return evt;
        } else if (this.cache[pid][cacheId]
            && (this.cache[pid][cacheId].event.begin != unit.begin || this.cache[pid][cacheId].event.status == 'SUCCESS')) {
            var evt = {
                eventType: 'BEGIN-UNIT',
                launchOptions: this.launchOptions,
                pid: pid,
                mid: mid,
                fid: fid,
                status: 'PROCESSING',
                label: this.labelMap[mid + '_' + fid],
                begin: unit.begin,
                sequence: sequence
            };
            if (unit.fid.indexOf('read_alluxio_pagination') > -1) {
                evt.label = '(read)';
            } else if (unit.fid.indexOf('write_alluxio_pagination') > -1) {
                evt.label = '(write)';
            }
            this.cache[pid][cacheId] = {
                event: evt
            };
            return evt;
        }
    };

    EventDetector.prototype._createUnitEndEvent = function (pid, mid, unit, sequence) {
        var fid = unit.fid;
        var cacheId;
        // Subflow 의 sub function 일 경우 마지막 sub function 이 끝난 경우에만 Subflow 가 끝난 것이다.
        var subflow = this.subflowMap[mid + '_' + unit.fid];
        if (subflow) {
            fid = subflow.fid;
            cacheId = fid;
        } else {
            cacheId = fid + '@' + sequence;
        }

        if (this.cache[pid] &&
            this.cache[pid][cacheId] &&
            this.cache[pid][cacheId].event.status == 'PROCESSING' &&
            this.cache[pid][cacheId].event.status != unit.status) {

            this.cache[pid][cacheId].event.status = unit.status;
            return {
                eventType: 'END-UNIT',
                launchOptions: this.launchOptions,
                pid: pid,
                mid: mid,
                fid: fid,
                status: unit.status,
                label: this.labelMap[mid + '_' + fid],
                begin: unit.begin,
                end: unit.end,
                message: unit.message,
                sequence: sequence
            };

        }
    };

    EventDetector.prototype.createProcessEvent = function (pid, mid, begin, end, status, index) {
        var events = [], evt;

        evt = this._createProcessStartEvent(pid, mid, begin, index);
        if (evt) events.push(evt);

        evt = this._createProcessEndEvent(pid, mid, begin, end, status);
        if (evt) events.push(evt);

        return events;
    };

    EventDetector.prototype._createProcessStartEvent = function (pid, mid, begin, index) {
        if (mid.indexOf('internal_process') > -1) return;
        if (!this.cache[pid] || index != '0') {
            var evt = {
                eventType: 'BEGIN-PROCESS',
                launchOptions: this.launchOptions,
                pid: pid,
                mid: mid,
                label: this.labelMap[pid],
                status: 'PROCESSING',
                begin: begin
            };
            this.cache[pid] = {
                mid: evt.mid,
                status: evt.status
            };
            return evt;
        }
    };

    EventDetector.prototype._createProcessEndEvent = function (pid, mid, begin, end, status) {
        if (this.cache[pid] && this.cache[pid].status == 'PROCESSING' && this.cache[pid].status != status) {
            return {
                eventType: 'END-PROCESS',
                launchOptions: this.launchOptions,
                pid: pid,
                mid: mid,
                label: this.labelMap[pid],
                status: status,
                begin: begin,
                end: end
            };
        }
    };

    Brightics.VA.Implementation.DataFlow.EventDetector = EventDetector;

}).call(this);
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    function Job(options) {
        Brightics.VA.Core.JobDelegator.call(this, options);

        this.runnable = null;
        this._abort = false;
    }

    Job.prototype = Object.create(Brightics.VA.Core.JobDelegator.prototype);
    Job.prototype.constructor = Job;

    Job.prototype._start = function (runnable) {
        var opt = {
            url: 'api/va/v2/analytics/jobs/execute',
            data: JSON.stringify(runnable),
            type: 'POST',
            contentType: 'application/json; charset=utf-8',
            blocking: false
        };
        return Promise.resolve($.ajax(opt)).then(function (jsonString) {
            return JSON.parse(jsonString);
        });
    };

    Job.prototype._stop = function (type) {
        var opt = {
            url: 'api/va/v2/analytics/jobs/' + this.jobId + '/delete',
            type: 'POST',
            blocking: false,
            contentType: 'application/json; charset=utf-8'
        };
        if (type) {
            var data = { 'type': type };
            opt.data = JSON.stringify(data);
        }
        return $.ajax(opt);
    };

    Job.prototype._check = function (jobId) {
        var option = {
            url: 'api/va/v2/analytics/jobs/' + jobId,
            type: 'GET',
            blocking: false
        };
        return $.ajax(option);
    };

    Job.prototype._scheduleCheckStatus = function (jobId) {
        var _this = this;
        var checkTimer = function () {
            _this._check(jobId).done(function (res) {
                if (_this._abort) {
                    _this._fireAbort({
                        jobId: jobId,
                        end: Date.now(),
                        status: 'ABORT',
                        message: 'Job aborted by user'
                    });
                } else {
                    if (res.status === 'FAIL') {
                        _this._fireFail(res);
                    } else if (res.status === 'SUCCESS') {
                        _this._fireSuccess(res);
                    } else if (res.status === 'WAIT') {
                        _this._firePending(res);
                        setTimeout(checkTimer, 500);
                    } else {
                        _this._fireStatus(res);
                        setTimeout(checkTimer, 500);
                    }
                }
            }).fail(_this._fireCatch.bind(_this));
        };
        setTimeout(checkTimer, 500);
    };

    Job.prototype.start = function (runnable) {
        var _this = this;
        this.runnable = runnable;
        return this._start(runnable).then(function (res) {
            _this.jobId = res.result;
            _this._scheduleCheckStatus(res.result);
            return res;
        }, _this._fireCatch.bind(_this));
    };

    Job.prototype.stop = function (type) {
        this._stop(type);
        this._abort = true;
    };

    Brightics.VA.Implementation.DataFlow.Job = Job;

}).call(this);
/**
 * Created by daewon.park on 2016-03-02.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    Brightics.VA.Implementation.DataFlow.Editors.Diagram.Shapes.DiagramPaper = joint.dia.Paper.extend({
        sortViews: _.noop,
        initialize: function () {
            joint.dia.Paper.prototype.initialize.apply(this, arguments);
        }
    });

}).call(this);
/**
 * Created by daewon.park on 2016-02-03.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    // width: 225, height: 58
    Brightics.VA.Implementation.DataFlow.Editors.Diagram.Shapes.FnUnitFigure = joint.dia.Element.define('brtc.va.shapes.FnUnit',
        {
            fid: undefined,
            inputtable: undefined,
            outputtable: undefined,
            connectableFunctions: undefined,
            acceptableFunctions: undefined,
            z: 2,
            size: {
                width: Brightics.VA.Env.Diagram.FIGURE_WIDTH,
                height: Brightics.VA.Env.Diagram.FIGURE_HEIGHT
            },
            colorSet: {
                READY: '#E5E9EF',
                DEPRECATED: '#D3D3D3',
                PROCESSING: 'blue',
                SUCCESS: '#58bd7c',
                FAIL: 'red'
            },
            ports: {
                groups: {
                    'in:l': {
                        z: 2,
                        size: 0,
                        position: {
                            name: 'left',
                        },
                        attrs: {
                            magnet: true
                        }
                    },
                    'out:r': {
                        z: 2,
                        size: 0,
                        position: {
                            name: 'right',
                        },
                        attrs: {
                            magnet: true
                        }
                    }
                },
                items: [{
                    id: 'in-left',
                    group: 'in:l'
                }, {
                    id: 'out-right',
                    group: 'out:r'
                }]
            },
            attrs: {
                '.brtc-va-bounds': {
                    fill: '#DFDFEF',
                    'fill-opacity': 0,
                    width: Brightics.VA.Env.Diagram.FIGURE_WIDTH,
                    height: Brightics.VA.Env.Diagram.FIGURE_HEIGHT
                },
                '.brtc-va-outer': {
                    fill: '#FFFFFF',
                    ref: '.brtc-va-bounds',
                    'ref-y': 6,
                    width: Brightics.VA.Env.Diagram.FIGURE_WIDTH - 5,
                    height: Brightics.VA.Env.Diagram.FIGURE_HEIGHT - 12,
                    rx: (Brightics.VA.Env.Diagram.FIGURE_HEIGHT - 12) / 2,
                    ry: (Brightics.VA.Env.Diagram.FIGURE_HEIGHT - 12) / 2
                },
                '.brtc-va-icon': {
                    width: 16, height: 16,
                    'xlink:href': 'css/va/images/func-io-20.png',
                    ref: '.brtc-va-outer',
                    'ref-x': 25,
                    'ref-y': 16
                },
                '.brtc-va-label': {
                    fill: '#667185',
                    text: '',
                    ref: '.brtc-va-outer',
                    'ref-x': 50,
                    'ref-y': (Brightics.VA.Env.Diagram.FIGURE_HEIGHT - 8) / 2,
                    'y-alignment': 'middle',
                    'font-size': '12px',
                    'font-family': 'Arial, Dotum, Tahoma, sans-serif',
                    'font-weight': 'bold'
                },
                '.brtc-va-last-runtime': {
                    fill: '#667185',
                    text: '- -:- -:- -(-)',
                    ref: '.brtc-va-outer',
                    'ref-x': 120,
                    'ref-y': 50,
                    'font-size': 10,
                    'font-family': 'Arial, Dotum, Tahoma, sans-serif',
                    'font-weight': 'normal'
                },
                '.brtc-va-inner': {
                    fill: '#E5E9EF',
                    ref: '.brtc-va-bounds',
                    'ref-x': Brightics.VA.Env.Diagram.FIGURE_WIDTH - 6,
                    'ref-y': Brightics.VA.Env.Diagram.FIGURE_HEIGHT / 2,
                    'stroke-width': 2,
                    'stroke': '#FFFFFF',
                    r: 5
                },
                '.brtc-va-tooltip': {
                    fill: '#FFFFFF',
                    ref: '.brtc-va-bounds',
                    'ref-x': 8,
                    'ref-y': Brightics.VA.Env.Diagram.FIGURE_HEIGHT / 2 - 15,
                    'stroke-width': 2,
                    'stroke': '#E5E9EF',
                    r: 10,
                    // 'xlink:href': 'css/va/images/func-memo-s-11.png',
                    display: 'none'
                },
                '.brtc-va-tooltip-icon': {
                    width: 18,
                    height: 18,
                    'xlink:href': 'css/va/images/func-memo-18x18.png',
                    ref: '.brtc-va-tooltip',
                    'ref-x': 1,
                    'ref-y': 1,
                    display: 'none'
                }
            }
        },
        {
            markup: '' +
            '<g class="brtc-va-fnunit-wrapper">' +
            '    <rect class="brtc-va-bounds"/>' +
            '    <rect class="brtc-va-outer"/>' +
            '    <image class="brtc-va-icon"/>' +
            '    <text class="brtc-va-label"/>' +
            '    <text class="brtc-va-last-runtime"/>' +
            '    <circle class="brtc-va-inner"/>' +
            '    <circle class="brtc-va-tooltip"/>' +
            '    <image class="brtc-va-tooltip-icon"/>' +
            '    <title/>' +
            '</g>',
            portMarkup: '<circle class="fnunit-port" r="0"/>',
            portLabelMarkup: '<text/>',
            resource: {
                'scala': {
                    'classification': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-classification-20-scala.png',
                        'selected-image': 'css/va/images/func-classification-w-20.png'
                    },
                    'evaluation': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-evaluation-20-scala.png',
                        'selected-image': 'css/va/images/func-evaluation-w-20.png'
                    },
                    'extraction': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-extraction-20-scala.png',
                        'selected-image': 'css/va/images/func-extraction-w-20.png'
                    },
                    'io': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-io-20-scala.png',
                        'selected-image': 'css/va/images/func-io-w-20.png'
                    },
                    'brightics': {
                        "opacity": "0.3",
                        "stroke-dasharray": "2,5",
                        "fill": "green",
                        "image": "css/va/images/func-script-20-scala.png",
                        "selected-image": "css/va/images/func-script-w-20.png"
                    },
                    'control': {
                        fill: '#36968B',
                        image: 'css/va/images/func-control-20.png',
                        'selected-image': 'css/va/images/func-control-w-20.png'
                    },
                    'process': {
                        fill: '#9966FF',
                        image: 'css/va/images/func-process-20.png',
                        'selected-image': 'css/va/images/func-process-w-20.png'
                    },
                    'manipulation': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-manipulation-20-scala.png',
                        'selected-image': 'css/va/images/func-manipulation-w-20.png'
                    },
                    'regression': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-regression-20-scala.png',
                        'selected-image': 'css/va/images/func-regression-w-20.png'
                    },
                    'statistics': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-statistics-20-scala.png',
                        'selected-image': 'css/va/images/func-statistics-w-20.png'
                    },
                    'transform': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-transform-20-scala.png',
                        'selected-image': 'css/va/images/func-transform-w-20.png'
                    },
                    // 'validation'    : {fill: '#57BAB1', image: 'css/va/images/func-validation-20.png', 'selected-image': 'css/va/images/func-validation-w-20.png'},
                    'textanalytics': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-textanalytics-20.png',
                        'selected-image': 'css/va/images/func-textanalytics-w-20.png'
                    },
                    'script': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-script-20-scala.png',
                        'selected-image': 'css/va/images/func-script-w-20.png'
                    },
                    'streaming': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-streaming-20.png',
                        'selected-image': 'css/va/images/func-streaming-w-20.png'
                    },
                    'deeplearning': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-deeplearning-20-scala.png',
                        'selected-image': 'css/va/images/func-deeplearning-w-20.png'
                    },
                    'bigdata': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-bigdata-20.png',
                        'selected-image': 'css/va/images/func-bigdata-w-20.png'
                    },
                    'udf': {
                        fill: '#DD92EC',
                        image: 'css/va/images/func-udf-normal.png',
                        'selected-image': 'css/va/images/func-udf-select.png'
                    },
                    'clustering': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-clustering-20-scala.png',
                        'selected-image': 'css/va/images/func-clustering-w-20.png'
                    },
                    'recommendation': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-recommendation-20-scala.png',
                        'selected-image': 'css/va/images/func-recommendation-w-20.png'
                    },
                    'timeseries': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-timeseries-20-scala.png',
                        'selected-image': 'css/va/images/func-timeseries-w-20.png'
                    },
                    'autonomousanalytics': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-autonomousanalytics-20-scala.png',
                        'selected-image': 'css/va/images/func-autonomousanalytics-w-20.png'
                    },
                    'opt': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-opt-20-scala.png',
                        'selected-image': 'css/va/images/func-opt-w-20.png'
                    },
                    'ad': {
                        fill: '#E45A00',
                        image: 'css/va/images/func-ad-20-scala.png',
                        'selected-image': 'css/va/images/func-ad-w-20.png'
                    },
                    'unknown': {
                        fill: 'red',
                        image: 'css/va/images/func-unknown-20.png',
                        'selected-image': 'css/va/images/func-unknown-w-20.png'
                    },
                    'core-layer': {
                        fill: '#4CB87D',
                        image: 'css/va/images/func-deeplearning-20.png',
                        'selected-image': 'css/va/images/func-deeplearning-w-20.png'
                    },
                    'convolutional-layer': {
                        fill: '#4CB87D',
                        image: 'css/va/images/func-deeplearning-20.png',
                        'selected-image': 'css/va/images/func-deeplearning-w-20.png'
                    },
                    'pooling-layer': {
                        fill: '#4CB87D',
                        image: 'css/va/images/func-deeplearning-20.png',
                        'selected-image': 'css/va/images/func-deeplearning-w-20.png'
                    },
                    'application': {
                        fill: '#4CB87D',
                        image: 'css/va/images/func-deeplearning-20.png',
                        'selected-image': 'css/va/images/func-deeplearning-w-20.png'
                    },
                    'recurrent-layer': {
                        fill: '#4CB87D',
                        image: 'css/va/images/func-deeplearning-20.png',
                        'selected-image': 'css/va/images/func-deeplearning-w-20.png'
                    },
                    'merge-layer': {
                        fill: '#4CB87D',
                        image: 'css/va/images/func-deeplearning-20.png',
                        'selected-image': 'css/va/images/func-deeplearning-w-20.png'
                    },
                    'normalization-layer': {
                        fill: '#4CB87D',
                        image: 'css/va/images/func-deeplearning-20.png',
                        'selected-image': 'css/va/images/func-deeplearning-w-20.png'
                    },
                    'advanced-activations-layer': {
                        fill: '#4CB87D',
                        image: 'css/va/images/func-deeplearning-20.png',
                        'selected-image': 'css/va/images/func-deeplearning-w-20.png'
                    }
                },
                'python': {
                    'classification': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-classification-20-python.png',
                        'selected-image': 'css/va/images/func-classification-w-20.png'
                    },
                    'evaluation': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-evaluation-20-python.png',
                        'selected-image': 'css/va/images/func-evaluation-w-20.png'
                    },
                    'extraction': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-extraction-20-python.png',
                        'selected-image': 'css/va/images/func-extraction-w-20.png'
                    },
                    'io': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-io-20-python.png',
                        'selected-image': 'css/va/images/func-io-w-20.png'
                    },
                    'brightics': {
                        "opacity": "0.3",
                        "stroke-dasharray": "2,5",
                        "fill": "green",
                        "image": "css/va/images/func-script-20-python.png",
                        "selected-image": "css/va/images/func-script-w-20.png"
                    },
                    'control': {
                        fill: '#36968B',
                        image: 'css/va/images/func-control-20.png',
                        'selected-image': 'css/va/images/func-control-w-20.png'
                    },
                    'process': {
                        fill: '#9966FF',
                        image: 'css/va/images/func-process-20.png',
                        'selected-image': 'css/va/images/func-process-w-20.png'
                    },
                    'manipulation': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-manipulation-20-python.png',
                        'selected-image': 'css/va/images/func-manipulation-w-20.png'
                    },
                    'regression': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-regression-20-python.png',
                        'selected-image': 'css/va/images/func-regression-w-20.png'
                    },
                    'statistics': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-statistics-20-python.png',
                        'selected-image': 'css/va/images/func-statistics-w-20.png'
                    },
                    'transform': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-transform-20-python.png',
                        'selected-image': 'css/va/images/func-transform-w-20.png'
                    },
                    // 'validation'    : {fill: '#57BAB1', image: 'css/va/images/func-validation-20.png', 'selected-image': 'css/va/images/func-validation-w-20.png'},
                    'textanalytics': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-textanalytics-20-python.png',
                        'selected-image': 'css/va/images/func-textanalytics-w-20.png'
                    },
                    'script': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-script-20-python.png',
                        'selected-image': 'css/va/images/func-script-w-20.png'
                    },
                    'streaming': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-streaming-20-python.png',
                        'selected-image': 'css/va/images/func-streaming-w-20.png'
                    },
                    'deeplearning': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-deeplearning-20-python.png',
                        'selected-image': 'css/va/images/func-deeplearning-w-20.png'
                    },
                    'bigdata': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-bigdata-20.png',
                        'selected-image': 'css/va/images/func-bigdata-w-20.png'
                    },
                    'udf': {
                        fill: '#DD92EC',
                        image: 'css/va/images/func-udf-normal.png',
                        'selected-image': 'css/va/images/func-udf-select.png'
                    },
                    'clustering': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-clustering-20-python.png',
                        'selected-image': 'css/va/images/func-clustering-w-20.png'
                    },
                    'recommendation': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-recommendation-20-python.png',
                        'selected-image': 'css/va/images/func-recommendation-w-20.png'
                    },
                    'timeseries': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-timeseries-20-python.png',
                        'selected-image': 'css/va/images/func-timeseries-w-20.png'
                    },
                    'autonomousanalytics': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-autonomousanalytics-20-python.png',
                        'selected-image': 'css/va/images/func-autonomousanalytics-w-20.png'
                    },
                    'opt': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-opt-20-python.png',
                        'selected-image': 'css/va/images/func-opt-w-20.png'
                    },
                    'ad': {
                        fill: '#366E9D',
                        image: 'css/va/images/func-ad-20-python.png',
                        'selected-image': 'css/va/images/func-ad-w-20.png'
                    },
                    'unknown': {
                        fill: 'red',
                        image: 'css/va/images/func-unknown-20.png',
                        'selected-image': 'css/va/images/func-unknown-w-20.png'
                    },
                    'core-layer': {
                        fill: '#4CB87D',
                        image: 'css/va/images/func-deeplearning-20.png',
                        'selected-image': 'css/va/images/func-deeplearning-w-20.png'
                    },
                    'convolutional-layer': {
                        fill: '#4CB87D',
                        image: 'css/va/images/func-deeplearning-20.png',
                        'selected-image': 'css/va/images/func-deeplearning-w-20.png'
                    },
                    'pooling-layer': {
                        fill: '#4CB87D',
                        image: 'css/va/images/func-deeplearning-20.png',
                        'selected-image': 'css/va/images/func-deeplearning-w-20.png'
                    },
                    'application': {
                        fill: '#4CB87D',
                        image: 'css/va/images/func-deeplearning-20.png',
                        'selected-image': 'css/va/images/func-deeplearning-w-20.png'
                    },
                    'recurrent-layer': {
                        fill: '#4CB87D',
                        image: 'css/va/images/func-deeplearning-20.png',
                        'selected-image': 'css/va/images/func-deeplearning-w-20.png'
                    },
                    'advanced-activations-layer': {
                        fill: '#4CB87D',
                        image: 'css/va/images/func-deeplearning-20.png',
                        'selected-image': 'css/va/images/func-deeplearning-w-20.png'
                    }
                },
                'sql': {
                    'udf': {
                        fill: '#d771eb',
                        image: 'css/va/images/func-udf-normal.png',
                        'selected-image': 'css/va/images/func-udf-select.png'
                    }
                }
            },
            getColor: function () {
                var category = this.prop('category');
                var context = this.prop('context');
                var resource = this.resource[context][category] || this.resource[context].io;
                return resource.fill;
            },
            select: function () {
                this.prop('selected', true);
                var category = this.prop('category');
                var context = this.prop('context');

                var attrObj = {};

                var resource = this.resource[context][category] || this.resource[context].io;
                if (category && resource && resource.fill) {
                    attrObj['.brtc-va-outer'] = {opacity: resource.opacity || 1};
                    attrObj['.brtc-va-outer'] = {fill: resource.fill};
                    attrObj['.brtc-va-inner'] = {stroke: resource.fill};
                    attrObj['.brtc-va-icon'] = {"xlink:href": resource['selected-image']};
                }

                if (this.prop('deprecated')) {
                    var color = this.prop(['colorSet', 'DEPRECATED']);

                    attrObj['.brtc-va-outer'] = {fill: color};
                    attrObj['.brtc-va-inner'] = {stroke: color};
                }

                attrObj['.brtc-va-label'] = {fill: "#FFFFFF"};

                this.attr(attrObj);
            },
            unselect: function () {
                this.prop('selected', false);
                var category = this.prop('category');
                var context = this.prop('context');
                var customCategoryList = ['unknown', 'brightics'];
                var resource = this.resource[context][category] || this.resource[context].io;

                var attrObj = {
                    ".brtc-va-outer": {
                        opacity: resource.opacity || 1,
                        fill: customCategoryList.indexOf(category) > -1 ? resource.fill : "#FFFFFF"
                    },
                    ".brtc-va-label": {fill: customCategoryList.indexOf(category) > -1 ? "#FFFFFF" : "#667185"},
                    ".brtc-va-inner": {stroke: customCategoryList.indexOf(category) > -1 ? resource.fill : "#FFFFFF"}
                };

                if (this.prop('deprecated')) {
                    var color = this.prop(['colorSet', 'DEPRECATED']);

                    $.extend(true, attrObj, {
                        ".brtc-va-outer": {fill: color},
                        ".brtc-va-inner": {stroke: color}
                    });
                }

                if (category && resource && resource.image) {
                    $.extend(true, attrObj, {".brtc-va-icon": {"xlink:href": resource.image}});
                }

                this.attr(attrObj);
            },
            label: function (label, scale) {
                if (label) {
                    this.originalLabel = label;

                    var scaleValue = scale || 1;
                    var text = label;
                    var lines;

                    if (scaleValue < 0.7) {
                        text = label.replace(/\s/g, '\u0006');
                        text = joint.util.breakText(text,
                            {width: (Brightics.VA.Env.Diagram.FIGURE_WIDTH - 80) * scaleValue},
                            {
                                'font-size': 12 * scaleValue,
                                'font-family': 'Arial, Dotum, Tahoma, sans-serif',
                                'font-weight': 'bold'
                            });
                        lines = text.split('\n');
                        if (lines.length > 1) {
                            text = lines[0] + '...';
                        } else {
                            text = lines[0];
                        }
                        text = text.replace(/\u0006/g, ' ');

                        let attrObj = {
                            "text.brtc-va-label": {
                                text: text,
                                ref: '.brtc-va-outer',
                                "ref-x": 50,
                                "ref-y": 27,
                                "y-alignment": 'middle'
                            }
                        };
                        this.attr(attrObj);
                    } else {
                        text = joint.util.breakText(text,
                            {width: (Brightics.VA.Env.Diagram.FIGURE_WIDTH - 80) * scaleValue},
                            {
                                'font-size': 12 * scaleValue,
                                'font-family': 'Arial, Dotum, Tahoma, sans-serif',
                                'font-weight': 'bold'
                            });
                        lines = text.split('\n');
                        if (lines.length > 2) {
                            text = lines[0] + '\n' + lines[1] + '...';
                        }

                        let attrObj = {
                            "text.brtc-va-label": {
                                text: text,
                                ref: '.brtc-va-outer',
                                "ref-x": 50,
                                "ref-y": 25,
                                "y-alignment": 'middle'
                            }
                        };
                        this.attr(attrObj);
                    }
                } else {
                    console.log('label is undefined !!!');
                }
            },
            lastRuntime: function (time) {
                this.attr('text.brtc-va-last-runtime/text', time);
            },
            resetRuntime: function () {
                this.attr('text.brtc-va-last-runtime/text', '- -:- -:- -(-)');
            },
            tooltip: function (tooltip) {
                // this.attr('title/text', tooltip);
            },
            category: function (fnUnitDef) {
                var category = fnUnitDef.category;
                var context = fnUnitDef.defaultFnUnit.context || 'scala';
                let attrObj;
                this.prop('category', category);
                this.prop('context', context);
                var image = this.resource[context][category] ? this.resource[context][category].image : this.resource[context].io.image;
                if (category === 'unknown') {
                    attrObj = {
                        ".brtc-va-outer": {fill: this.resource[context][category].fill},
                        ".brtc-va-inner": {stroke: this.resource[context][category].fill},
                        ".brtc-va-icon": {"xlink:href": this.resource[context][category]['selected-image']},
                        ".brtc-va-label": {fill: "#FFFFFF"},
                    }
                } else if (category === 'brightics') {
                    attrObj = {
                        ".brtc-va-outer": {
                            fill: this.resource[context][category].fill,
                            opacity: this.resource[context][category].opacity
                        }
                    }
                } else {
                    this.attr('.brtc-va-icon/xlink:href', image);
                    attrObj = {".brtc-va-icon": {"xlink:href": image},}
                }
                this.attr(attrObj);
            },
            updateStatus: function (status) {
                this.attr('.brtc-va-inner/fill', this.prop(['colorSet', status]));
                if (status === 'FAIL') this.showError();
                if (status === 'SUCCESS') this.hideError();
            },
            refresh: function () {
                var color = this.prop(['colorSet', 'READY']);

                this.attr({
                    ".brtc-va-outer": {stroke: color},
                    ".brtc-va-inner": {fill: color}
                });
            },
            showError: function () {
                var color = this.prop(['colorSet', 'FAIL']);
                this.attr('.brtc-va-outer/stroke', color);
            },
            hideError: function () {
                var color = this.prop(['colorSet', 'READY']);
                this.attr('.brtc-va-outer/stroke', color);
            },
            showToolTipIcon: function () {
                this.attr({
                    ".brtc-va-tooltip": {display: 'block'},
                    ".brtc-va-tooltip-icon": {display: 'block'}
                });
            },
            hideToolTipIcon: function () {
                this.attr({
                    ".brtc-va-tooltip": {display: 'none'},
                    ".brtc-va-tooltip-icon": {display: 'none'}
                });
            },
            setOnShade: function () {
                this.attr({
                    "text.brtc-va-label": {opacity: '.25'},
                    ".brtc-va-icon": {opacity: '.25'},
                    "shade-type": "on"
                });
            },
            setOffShade: function () {
                if(this.attr("shade-type") === "on"){
                    this.attr({
                        "text.brtc-va-label": {opacity: '1'},
                        ".brtc-va-icon": {opacity: '1'},
                        "shade-type": "off"
                    });
                }

            },
            setCursorType: function (cursorType) {
                this.attr('.brtc-va-fnunit-wrapper/cursor', cursorType);
            },
            setDeprecated: function (message) {
                var color = this.prop(['colorSet', 'DEPRECATED']);
                this.prop('deprecated', true);

                this.attr({
                    "title": {text: 'Deprecated: ' + message},
                    ".brtc-va-label": {"text-decoration": "line-through"},
                    ".brtc-va-outer": {fill: color},
                    ".brtc-va-inner": {stroke: color},
                });
            }
        }
    );

}).call(this);
/**
 * Created by daewon.park on 2016-03-02.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    Brightics.VA.Implementation.DataFlow.Editors.Diagram.Shapes.LinkFigure = joint.dia.Link.define('brtc.va.shapes.Link',
        {
            z: 1,
            router: {
                name: 'metro',
            },
            connector: {name: 'rounded'},
            attrs: {
                wrapper: {
                    connection: true,
                    strokeWidth: 10,
                    strokeLinejoin: 'round'
                },
                line: {
                    connection: true,
                    stroke: '#9FA7A2',
                    strokeWidth: 2,
                    strokeLinejoin: 'round',
                    targetMarker: {
                        'type': 'path',
                        'd': 'M 10 -5 0 0 10 5 z'
                    }
                }
            },
            kid: undefined,
            sourceFid: undefined,
            targetFid: undefined,
        },
        {
            markup: [
                {
                    tagName: 'path',
                    selector: 'wrapper',
                    className: 'connection-wrap',
                    attributes: {
                        'fill': 'none',
                        'cursor': 'pointer',
                        'stroke': 'transparent'
                    }
                },
                {
                    tagName: 'path',
                    selector: 'line',
                    attributes: {
                        'fill': 'none',
                        'pointer-events': 'none'
                    }
                }
            ],
            renderLabels: function () {
                return this;
            },
            renderTools: function () {
                return this;
            },
            renderVertexMarkers: function () {
                return this;
            },
            renderArrowheadMarkers: function () {
                return this;
            },
            select: function () {
                this.prop('selected', true);
                this.attr({
                    line: {
                        stroke: '#8993DE',
                        strokeWidth: 4
                    }
                });
            },
            unselect: function () {
                this.prop('selected', false);
                this.attr({
                    line: {
                        stroke: '#9FA7A2',
                        strokeWidth: 2
                    }
                });
            }
        }
    );

}).call(this);
/**
 * Created by sungjin1.kim on 2016-02-01.
 */
/* global IN_DATA, OUT_DATA, FUNCTION_NAME, _, brtc_require, joint, Studio */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    var FnUnitUtils = brtc_require('FnUnitUtils');

    var BEHAVIOR_LINK = 'link';
    var BEHAVIOR_DEFAULT = 'default';

    var TOOLTIP_ENABLED = 'tooltip-enabled';

    var IN_PORT_ID = 'in-left';
    var OUT_PORT_ID = 'out-right';

    var checkCursorHold = function (_event) {
        return _event && _event.movementX === 0 && _event.movementY === 0
    }

    function DataFlowEditorPage(parentId, options) {
        this.MAX_FUNC_COUNT = Brightics.VA.SettingStorage.getValue('editor.maxfuncnum');
        this.MAX_FUNC_MESSAGE = 'You can only add up to ' + this.MAX_FUNC_COUNT + '.';

        this.parentId = parentId;
        this.options = options;
        this.options.scale = this.options.scale || 1;
        this.opacity4transition = {
            duration: 1000,
            timingFunction: joint.util.timing.inout,
            valueFunction: function (a, b) {
                return function (t) {
                    return Math.max(0.2, b + t);
                };
            }
        };
        this.translateProblems = {};
        this._highlightedViews = [];
        this._selectedLinkViews = [];
        this._selectedElements = [];
        this.dropContents = null;
        this.dropFigures = [];
        this.dropLinks = [];
        this.behaviorMode = BEHAVIOR_DEFAULT;
        this.toolItems = {};

        this.retrieveParent();
        this.createControls();
        this.registerDebugListener();
        this.render();

        this.registerCommandEventListener();
        this.registerGoHistoryEventListener();

        this.prvFnUnitSelectTrigger = {};

        var figures = this.graph.getElements();
        if (figures.length > 0) {
            var leftMost = figures[0];
            for (var i in figures) {
                if (leftMost.attributes.position.x > figures[i].attributes.position.x) {
                    leftMost = figures[i];
                }
            }
            this.ensureCenter(leftMost);
        }
        this.updateMiniMapWindow();
        Brightics.OptModelManager.renderOptModels(this);
    }

    DataFlowEditorPage.prototype.retrieveParent = function () {
        this.$parent = Brightics.VA.Core.Utils.WidgetUtils.retrieveWidget(this.parentId);
    };

    DataFlowEditorPage.prototype.createControls = function () {
        this.$mainControl = $('<div class="brtc-va-editors-diagram-diagrameditorpage brtc-style-editor-editorpage"></div>');
        this.$parent.append(this.$mainControl);

        var $paper = $('<div class="brtc-va-editors-diagram-diagrameditorpage-paper"></div>');
        this.$mainControl.append($paper);

        this.createMainPanel();
        this.createDiagramPaper();

        this.$createCue = $('' +
            '<div class="brtc-va-editors-diagram-diagrameditorpage-function-cue-create">' +
            '    <div class="brtc-va-editors-diagram-diagrameditorpage-function-cue-create-label-wrapper">' +
            '        <div class="brtc-va-editors-diagram-diagrameditorpage-function-cue">' +
            '           <div class="brtc-va-editors-diagram-diagrameditorpage-function-cue-create-label">Click</div>' +
            '           <div class="brtc-va-editors-diagram-diagrameditorpage-function-cue-create-label">to add Function</div>' +
            '       </div>' +
            '       <div class="brtc-va-editors-diagram-diagrameditorpage-function-cue-create-icon"></div>' +
            '    </div>' +
            '</div>');
        this.$selectedBounds = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-multiselected"></div>');
        this.$toolTip = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tooltip"></div>');
        this.$toolbar = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-toolbar"></div>');
        this.$guideBox = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-guidebox"></div>');
        this.$guideMessageBox = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-guidemessage"></div>');
        this.$dragSelection = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-drag-selection"></div>');

        $paper.append(this.$createCue);
        $paper.append(this.$selectedBounds);
        $paper.append(this.$toolTip);
        $paper.append(this.$toolbar);
        $paper.append(this.$guideBox);
        $paper.append(this.$guideMessageBox);
        $paper.append(this.$dragSelection);

        this.createFnUnitToolbar();
        this.createMultiSelectionToolbar();
        this.createCue();
        this._createMiniMapControl();

        this.changeScale(this.options.scale);
    };

    DataFlowEditorPage.prototype.createMainPanel = function () {
        var _this = this;

        this.$mainControl.perfectScrollbar();

        this.$mainControl.scroll(function () {
            _this.updateMiniMapWindow();
        });

        this.$mainControl.hover(function () {
            _this.fitToContent();
        }, function () {
            _this.fitToContent();
        });

        this.$mainControl.mouseleave(function () {
            if (!_this.switchFnUnitDialog) _this.hideCue();
        });
    };

    DataFlowEditorPage.prototype.createDiagramPaper = function () {
        this.$paperElement = this.$mainControl.find('.brtc-va-editors-diagram-diagrameditorpage-paper');

        this.graph = new joint.dia.Graph();
        this.paper = new joint.dia.Paper({
            sortViews: _.noop,
            el: this.$paperElement,
            width: this.options.width,
            height: this.options.height,
            model: this.graph,
            snapLinks: false,
            markAvailable: false,
            linkPinning: false,
            multiLinks: false,
            gridSize: 10,
            theme: 'none',
            clickThreshold: 3,
            interactive: function (cellView) {
                if (cellView.model instanceof joint.dia.Link) {
                    return {
                        linkMove: false,
                        labelMove: false,
                        arrowheadMove: true,
                        vertexMove: false,
                        vertexAdd: false,
                        vertexRemove: false,
                        useLinkTools: false
                    };
                } else {
                    return {
                        elementMove: false
                    };
                }
            }
        });

        this.paper.on('element:pointerdblclick', this.handleElementPointerDblClick.bind(this));
        this.paper.on('element:pointerclick', this.handleElementPointerClick.bind(this));
        this.paper.on('element:pointermove', this.handleElementPointerMove.bind(this));
        this.paper.on('element:pointerup', this.handleElementPointerUp.bind(this));
        this.paper.on('element:mouseenter', this.handleElementMouseEnter.bind(this));
        this.paper.on('element:mouseleave', this.handleElementMouseLeave.bind(this));

        this.paper.on('link:pointerclick', this.handleLinkPointerClick.bind(this));
        this.paper.on('link:pointermove', this.handleLinkPointerMove.bind(this));
        this.paper.on('link:pointerup', this.handleLinkPointerUp.bind(this));
        this.paper.on('link:mouseenter', this.handleLinkMouseEnter.bind(this));
        this.paper.on('link:mouseleave', this.handleLinkMouseLeave.bind(this));

        this.paper.on('blank:pointerclick', this.handleBlankPointerClick.bind(this));
        this.paper.on('blank:pointermove', this.handleBlankPointerMove.bind(this));
        this.paper.on('blank:pointerup', this.handleBlankPointerUp.bind(this));
        this.paper.on('blank:mousewheel', this.handleBlankMouseWheel.bind(this));
        this.$paperElement.mousemove(this.handleBlankMouseOver.bind(this));

        this.paper.on('render:done', function () {
            console.log('render:done');
        });
        this.graph.on('remove', this.handleGraphRemove.bind(this));

        this.makeDroppable();
    };

    DataFlowEditorPage.prototype.handleElementPointerDblClick = function (elementView, evt, x, y) {
        if (this.behaviorMode === BEHAVIOR_LINK) {
            if (this._isConnectableCell(elementView.model)) {
                this._handleLinkCellPointerClick(elementView, evt, x, y);
            } else {
                this._handleDefaultCellPointerClick(elementView, evt, x, y);
                this._triggerFnUnitDbClick();
            }
            this._setBehaviorModeToDefault();
        } else {
            this._handleDefaultCellPointerClick(elementView, evt, x, y);
            this._triggerFnUnitDbClick();
        }
    };

    DataFlowEditorPage.prototype.handleElementPointerClick = function (elementView, evt, x, y) {
        if (this.behaviorMode === BEHAVIOR_LINK) {
            if (this._isConnectableCell(elementView.model)) {
                this._handleLinkCellPointerClick(elementView, evt, x, y);
            } else {
                this._handleDefaultCellPointerClick(elementView, evt, x, y);
                this._triggerFnUnitSelect();
            }
            this._setBehaviorModeToDefault();
        } else {
            this._handleDefaultCellPointerClick(elementView, evt, x, y);
            this._triggerFnUnitSelect();
        }
    };

    DataFlowEditorPage.prototype._handleLinkCellPointerClick = function (elementView, evt, x, y) {
        var fromCell = this._fromCell;
        var toCell = elementView.model;
        var kid = Brightics.VA.Core.Utils.IDGenerator.link.id();
        var link = this._createLinkFigure(kid, fromCell, toCell);
        this.graph.addCells([link]);

        var command = this.createConnectFnUnitCommand(link);
        if (this.fireCommand(command)) {
            // link.set('target', { id: elementView.model.id, port: IN_PORT_ID });
        } else {
            link.remove();
            this.notification('warning', 'No connection could be made.');
        }
        elementView.unhighlight();
    };

    DataFlowEditorPage.prototype._handleDefaultCellPointerClick = function (elementView, evt, x, y) {
        var figure = elementView.model;
        if (!evt.ctrlKey) {
            this._unselectAllLinkViews();
            this._unselectAllElements();
        }
        this._selectElement(figure);
        this.showSelectionBox();
    };

    DataFlowEditorPage.prototype.handleElementPointerMove = function (elementView, evt, x, y) {
        if (this.behaviorMode === BEHAVIOR_LINK) {
            evt.stopPropagation();
            return;
        }

        var getPointerPositionStr = function (_evt) {
            return `x:${_evt.clientX},y:${_evt.clientY}`;
        };

        let _this = this;
        let figure = elementView.model;

        if (evt.data.dragging) {

            (_.throttle(function () {
                _this.forceScrollTo(evt, x, y);
                var data = evt.data;
                if (data.ghost) {
                    var boxMap = evt.data.boxMap;

                    data.ghost.children().forEach((cell) => {
                        let cellBox = boxMap[cell.id];
                        cell.attr({
                            'x': (x - cellBox.dx),
                            'y': (y - cellBox.dy)
                        });
                    })
                }
            }, 100))();


        } else if (evt.data.originalPositionStr && evt.data.originalPositionStr !== getPointerPositionStr(evt)) {

            evt.data.dragging = true;
            _this.dragging = true;

            if (this._selectedElements.indexOf(figure) === -1) {
                this._unselectAllElements();
                this._selectElement(figure);
            }

            this._configureDragEvent(elementView, evt, x, y);
            this._triggerFnUnitMove();
            this._unselectAllLinkViews();
            this.showGuideBox(figure);
            this.hideCue();
            this.hideGuideMessage();
            this.hideSelectionBox();
            this.hideTools(true);
        } else {
            evt.data.originalPositionStr = evt.data.originalPositionStr || getPointerPositionStr(evt);
        }
    };

    DataFlowEditorPage.prototype._configureDragEvent = function (elementView, evt, x, y) {
        var _this = this;

        var ghost = V('g');
        ghost.appendTo(this.paper.viewport);

        var boxMap = {};
        _this._selectedElements.map((fg) => {
            let fnUnit = V('rect');
            let fnBBox = fg.getBBox();

            fnUnit.attr({
                'x': fnBBox.x,
                'y': fnBBox.y + 6,
                'fill': 'transparent',
                'stroke': fg.getColor(),
                'stroke-dasharray': '4,4',
                'stroke-width': 4,
                width: Brightics.VA.Env.Diagram.FIGURE_WIDTH - 5,
                height: Brightics.VA.Env.Diagram.FIGURE_HEIGHT - 12,
                rx: (Brightics.VA.Env.Diagram.FIGURE_HEIGHT - 12) / 2,
                ry: (Brightics.VA.Env.Diagram.FIGURE_HEIGHT - 12) / 2
            });

            boxMap[fnUnit.id] = fnBBox;
            boxMap[fnUnit.id].dx = x - fnBBox.x;
            boxMap[fnUnit.id].dy = y - fnBBox.y - 6;
            boxMap[fnUnit.id].figure = fg;

            ghost.append(fnUnit);
        });

        evt.data.ghost = ghost;
        evt.data.boxMap = boxMap;
    };


    DataFlowEditorPage.prototype.handleElementPointerUp = function (elementView, evt, x, y) {
        var currentFigure = elementView.model;
        var _this = this;
        if (evt.data.dragging) {
            evt.data.dragging = false;
            _this.dragging = false;

            var figures = [];
            var changedFigures = [];

            var data = evt.data;
            if (data.ghost) {
                data.ghost.remove();

                let box, guideLocation;
                for (var id in data.boxMap) {
                    box = data.boxMap[id];
                    guideLocation = this.calcGuideLocation(x - box.dx, y - box.dy);
                    box.figure.position(guideLocation.x, guideLocation.y);
                    figures.push(box.figure);
                    changedFigures.push({
                        figure: box.figure,
                        position: guideLocation
                    });
                }
            }

            var message = Object.values(this.validateTranslate(figures))[0];
            if (message) {
                this.notification('warning', message);
                $.each(figures, function (index, f) {
                    _this._revertPosition(f);
                });
            } else {
                var commands = new Brightics.VA.Core.CompoundCommand(_this, {label: 'Change Position'});
                $.each(changedFigures, function (index, changedFigure) {
                    var f = changedFigure.figure;
                    var p = changedFigure.position;
                    var unit = _this.getFnUnitById(f.prop('fid'));
                    if (unit.display.diagram.position.x !== p.x || unit.display.diagram.position.y !== p.y) {
                        commands.add(_this.createSetFnUnitPositionCommand(f, p.x, p.y));
                    }
                });
                this.fireCommand(commands);

                if (figures.length == 1) {
                    setTimeout(function () {
                        _this.ensureCenter(currentFigure);
                    }, 100);
                }
                this._rerouteLink();
            }
            this.hideGuideBox();
            this.hideGuideMessage();
            this.showSelectionBox();
            this.showTools(currentFigure);
        }
    };

    DataFlowEditorPage.prototype.handleElementMouseEnter = function (elementView, evt) {
        if (this.behaviorMode === BEHAVIOR_LINK) {
            for (var i = 0; i < this._connectableFigures.length; i++) {
                if (this._connectableFigures[i].cid === elementView.model.cid) {
                    elementView.highlight();
                    break;
                }
            }
        } else {
            this.showTools(elementView.model);
            this.showToolTip(elementView.model);
        }
    };

    DataFlowEditorPage.prototype.handleElementMouseLeave = function (elementView, evt) {
        if (elementView.model !== this._fromCell) {
            elementView.unhighlight();
        }
        this.hideTools();
        this.hideToolTip();
    };

    DataFlowEditorPage.prototype.handleLinkPointerClick = function (linkView, evt, x, y) {
        this._setBehaviorModeToDefault();

        this._unselectAllLinkViews();
        this._unselectAllElements();

        this.hideSelectionBox();
        this.addLinkTools(linkView);
        this._selectLinkView(linkView);

        this._triggerFnUnitSelect();
        if (this.$guideBox) this.$guideBox.hide();
    };

    DataFlowEditorPage.prototype.handleLinkPointerMove = function (linkView, evt, x, y) {
        var getAnchorStr = function (_linkView) {
            return JSON.stringify(_linkView.sourceAnchor) + JSON.stringify(_linkView.targetAnchor);
        };

        var _this = this;
        if (evt.data.dragging) {
            (_.throttle(function () {
                _this.fitToContent();
                _this.forceScrollTo(evt, x, y);
            }, 100))();
        } else if (evt.data.originalAnchorStr && evt.data.originalAnchorStr !== getAnchorStr(linkView)) {
            evt.data.dragging = true;
            this.dragging = true;
            this._triggerFnUnitMove();
            this.hideCue();
        } else {
            evt.data.originalAnchorStr = evt.data.originalAnchorStr || getAnchorStr(linkView);
        }
    };

    DataFlowEditorPage.prototype.handleLinkPointerUp = function (linkView, evt, x, y) {
        if (evt.data.dragging) {
            evt.data.dragging = false;
            this.dragging = false;

            let link = linkView.model;
            var currentSource = link.getSourceElement();
            var currentTarget = link.getTargetElement();
            var currentSourceFid = currentSource.prop('fid');
            var currentTargetFid = currentTarget.prop('fid');
            link.prop({'sourceFid': currentSourceFid, 'targetFid': currentTargetFid});

            var message = this.validateConnect([link]);
            if (message) {
                this.notification('warning', message);
                this._revertLink(link);
            } else {
                link.set({
                    'source': {id: currentSource.id, port: OUT_PORT_ID},
                    'target': {id: currentTarget.id, port: IN_PORT_ID},
                    'sourceFid': currentSourceFid,
                    'targetFid': currentTargetFid,
                });

                var command = this.createReconnectFnUnitCommand(link);
                this.fireCommand(command);
            }
            this._unselectAllLinkViews();
            this._selectLinkView(linkView);
            this.addLinkTools(linkView);
        }
    };

    DataFlowEditorPage.prototype.handleLinkMouseEnter = function (linkView, evt, x, y) {
        // if (linkView.model.prop('selected')) {
        //     this.addLinkTools(linkView);
        // }
    };

    DataFlowEditorPage.prototype.handleLinkMouseLeave = function (linkView, evt, x, y) {
        // linkView.removeTools();
    };

    DataFlowEditorPage.prototype.handleBlankPointerClick = function (evt, x, y) {
        this._unselectAllLinkViews();
        this._setBehaviorModeToDefault();

        if (this.getEditor().getSheetEditorPageArea().css('visibility') === 'hidden'
            || Brightics.VA.SettingStorage.getValue('editor.closePanelOnClick') === 'true') {
            this._unselectAllElements();
            this.hideSelectionBox();
            this._triggerFnUnitSelect();
        }
    };

    DataFlowEditorPage.prototype.handleBlankPointerMove = function (evt, x, y) {
        var _this = this;

        if (evt.data.dragging) {
            (_.throttle(function () {
                var paperOffset = _this.$paperElement.offset();
                var x = evt.pageX - paperOffset.left;
                var y = evt.pageY - paperOffset.top;

                var startX = _this.$dragSelection.attr('start-x');
                var startY = _this.$dragSelection.attr('start-y');
                _this.$dragSelection.css({
                    left: Math.min(x, startX),
                    top: Math.min(y, startY),
                    width: Math.abs(x - startX),
                    height: Math.abs(y - startY),
                });
                _this.forceScrollTo(evt, x, y);
            }, 200))();
        } else {
            if (checkCursorHold(evt.originalEvent)) return;
            evt.data.dragging = true;
            _this.dragging = true;
            this._unselectAllElements();
            this._unselectAllLinkViews();
            this._triggerFnUnitSelect();

            this.hideSelectionBox();
            this.hideTools();
            this.hideToolTip();

            this.$dragSelection.css({
                display: 'block',
                width: 0,
                height: 0
            });
            this.$dragSelection.attr('start-x', x * this.options.scale);
            this.$dragSelection.attr('start-y', y * this.options.scale);
        }
    };

    DataFlowEditorPage.prototype.handleBlankPointerUp = function (evt, x, y) {
        var _this = this;
        if (evt.data.dragging) {
            evt.data.dragging = false;
            _this.dragging = false;

            var width = this.$dragSelection.width();
            var height = this.$dragSelection.height();
            if (width > 10 && height > 10) {
                var pos = this.$dragSelection.position();
                var bounds = new g.rect(pos.left / this.options.scale,
                    pos.top / this.options.scale,
                    width / this.options.scale,
                    height / this.options.scale);
                var models = this.graph.findModelsInArea(bounds);
                if (models.length > 0) {
                    this._selectElements(models);
                    this.showSelectionBox();

                    if (models.length === 1) setTimeout(function () {
                        _this.ensureCenter(models[0]);
                    }, 100);
                }
                this._triggerFnUnitSelect();
            }
            this.$dragSelection.css({display: 'none'});
        }
    };

    DataFlowEditorPage.prototype.handleBlankMouseWheel = function (evt, x, y, delta) {
        if (evt.ctrlKey) {
            var scale = this.options.scale;
            scale += 0.2 * delta
            scale = Math.min(scale, 1.0);
            scale = Math.max(scale, 0.2);
            this.changeScale(parseFloat(scale.toFixed(1)));
            evt.stopPropagation();
            evt.preventDefault();
        }
    };

    DataFlowEditorPage.prototype.handleBlankMouseOver = function (evt, x, y) {
        var _this = this;

        if (this.options.scale < 0.6) return

        (_.throttle(function () {
            if (!_this.dragging && !_this.dropping) {
                var paperOffset = _this.$paperElement.offset();
                var x = evt.pageX - paperOffset.left;
                var y = evt.pageY - paperOffset.top;

                var xx = x;
                var yy = y;
                var gap_width = _this.GAP_WIDTH || Brightics.VA.Env.Diagram.GAP_WIDTH;
                var gap_height = _this.GAP_HEIGHT || Brightics.VA.Env.Diagram.GAP_HEIGHT;
                var total_width = Brightics.VA.Env.Diagram.FIGURE_WIDTH + gap_width;
                var total_height = Brightics.VA.Env.Diagram.FIGURE_HEIGHT + gap_height;
                var differenceX = xx % Number.parseInt(total_width * _this.options.scale);
                var differenceY = yy % Number.parseInt(total_height * _this.options.scale);
                xx = xx - differenceX;
                xx = xx + Number.parseInt(Brightics.VA.Env.Diagram.PAPER_MARGIN_LEFT * _this.options.scale);
                yy = yy - differenceY;
                yy = yy + Number.parseInt(Brightics.VA.Env.Diagram.PAPER_MARGIN_TOP * _this.options.scale);
                var models = _this.graph.findModelsFromPoint({
                    x: xx / _this.options.scale,
                    y: yy / _this.options.scale
                });


                if (models.length === 0 && !checkCursorHold(evt.originalEvent)) {
                    _this.$createCue.attr('mousedown', 'false');
                    _this.$createCue.css({display: 'flex', left: xx, top: yy});

                    var label = Brightics.VA.SettingStorage.getValue('editor.function.add.doubleclick') !== 'true' ? 'Click' : 'Double-Click';
                    _this.$createCue.find('.brtc-va-editors-diagram-diagrameditorpage-function-cue-create-label').first().text(label);
                }
            }
        }, 200))();
    };

    DataFlowEditorPage.prototype.handleGraphRemove = function (model, collection, opt) {
        if (model.isLink() && opt.ui === true) {
            var command = this.createDisconnectFnUnitCommand(model);
            this.fireCommand(command);
            this.notification('success', 'The connection was removed.');
        }
        ;
        // Do not reroute the link for performance. by daewon.park
    };

    DataFlowEditorPage.prototype._unselectAllLinkViews = function () {
        if (this._selectedLinkViews.length) {
            this._selectedLinkViews.map(l => {
                l.removeTools();
                l.model.unselect();
            });
            this._selectedLinkViews = [];
        }
    };

    DataFlowEditorPage.prototype._selectLinkViews = function (linkViews) {
        linkViews.map(l => l.model.select());
        this._selectedLinkViews = linkViews;
    };

    DataFlowEditorPage.prototype._selectLinkView = function (linkView) {
        this._selectLinkViews([linkView]);
    };

    DataFlowEditorPage.prototype._unselectAllElements = function () {
        if (this._selectedElements.length) {
            this._selectedElements.map(e => e.unselect());
            this._selectedElements = [];
        }
    };

    DataFlowEditorPage.prototype._unselectElements = function (elements) {
        elements.map(e => e.unselect());
        this._selectedElements = this._selectedElements.filter(e => elements.indexOf(e) === -1);
    };

    DataFlowEditorPage.prototype._unselectElement = function (element) {
        this._unselectElements([element]);
    };

    DataFlowEditorPage.prototype._selectAllElements = function () {
        this._selectedElements = $.extend(true, [], this.graph.getElements());
        this._selectedElements.map(e => e.select());
    }

    DataFlowEditorPage.prototype._selectElements = function (elements) {
        elements.map(e => e.select());
        this._selectedElements = this._selectedElements.concat(elements);
    };

    DataFlowEditorPage.prototype._selectElement = function (element) {
        this._selectElements([element]);
    };

    DataFlowEditorPage.prototype._triggerFnUnitDbClick = function () {
        this.$parent.trigger('fnUnit:dbclick', [this._selectedElements.map(e => e.prop('fid'))]);
    };

    DataFlowEditorPage.prototype._triggerFnUnitSelect = function () {
        this.$parent.trigger('fnUnit:select', [this._selectedElements.map(e => e.prop('fid'))]);
    };

    DataFlowEditorPage.prototype._triggerFnUnitMove = function () {
        this.$parent.trigger('fnUnit:move');
    };

    DataFlowEditorPage.prototype._triggerMouseLeave = function () {
        this.$parent.trigger('mouseleave');
    };

    DataFlowEditorPage.prototype.forceScrollTo = function (evt, x, y) {
        let _this = this;
        let padding = {
            top: 120,
            right: 220,
            bottom: 50,
            left: 220
        };
        (_.throttle(function () {
            let cx = evt.clientX;
            let cy = evt.clientY;

            let scrollLeft = _this.$mainControl.scrollLeft();
            let scrollTop = _this.$mainControl.scrollTop();
            let scrollSpeed = 20;

            let width = document.querySelector('html').clientWidth;
            let height = document.querySelector('html').clientHeight;

            let change = false;
            if (cy < padding.top && scrollTop > 0) {
                change = true;
                scrollTop -= scrollSpeed;
            }
            if (cx > width - padding.right) {
                change = true;
                scrollLeft += scrollSpeed;
            }
            if (cy > height - padding.bottom) {
                change = true;
                scrollTop += scrollSpeed;
            }
            if (cx < padding.left && scrollLeft > 0) {
                change = true;
                scrollLeft -= scrollSpeed;
            }

            if (change) {
                _this.$mainControl.scrollLeft(scrollLeft);
                _this.$mainControl.scrollTop(scrollTop);
            }
        }, 200))();
    };

    DataFlowEditorPage.prototype.createFnUnitToolbar = function () {
        var _this = this;

        this.$tools = this.$mainControl.find('.brtc-va-editors-diagram-diagrameditorpage-function-toolbar');
        this.$tools.hover(function () {
            _this.clearHideToolsTimer();
        }, function () {
            _this.hideTools(false);
        });

        this.createRemoveToolItem();
        this.createClearLinkToolItem();
        this.createShiftLeftToolItem();
        this.createShiftRightToolItem();
        this.createSwitchToolItem();
        this.createConnectToolItem();
        this.createCloneToolItem();
        this.createEnterToolItem();
        this.createPopupToolItem();
    };

    DataFlowEditorPage.prototype.createRemoveToolItem = function () {
        var _this = this;

        var $remove = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tools brtc-va-editors-diagram-diagrameditorpage-function-tools-remove" title="Remove"></div>');
        this.$tools.append($remove);

        $remove.click(function () {
            var cid = _this.$tools.attr('cid');
            var figure = _this.graph.getCell(cid);
            _this._unselectElement(figure);
            _this.removeFnUnitFigure(figure);
            _this._unselectAllLinkViews();
            _this.showSelectionBox();
            _this._triggerFnUnitSelect();
            _this.hideTools(true);
        });
        this.toolItems.remove = $remove;
    };

    DataFlowEditorPage.prototype.createClearLinkToolItem = function () {
        var _this = this;

        var $clearLink = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tools brtc-va-editors-diagram-diagrameditorpage-function-tools-clearlink"><i class="fa fa-chain-broken"></i></div>');
        this.$tools.append($clearLink);

        $clearLink.click(function () {
            var cid = _this.$tools.attr('cid');
            var figure = _this.graph.getCell(cid);
            _this.removeFnUnitLink(figure);
        });
        this.toolItems.clearLink = $clearLink;
    };

    DataFlowEditorPage.prototype.createShiftLeftToolItem = function () {
        var _this = this;

        var $shiftLeft = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tools brtc-va-editors-diagram-diagrameditorpage-function-tools-shiftleft brtc-style-flex-center"><i class="fa fa-angle-double-left fa-lg"></i></div>');
        this.$tools.append($shiftLeft);

        $shiftLeft.click(function () {
            var cid = _this.$tools.attr('cid');
            var figure = _this.graph.getCell(cid);
            var command = _this.createShiftLeftCommand(figure);
            if (_this.fireCommand(command) === false) {
                _this.notification('warning', command.message);
            } else {
                _this.hideSelectionBox();
                _this.showSelectionBox();
            }
        });
        this.toolItems.shiftLeft = $shiftLeft;
    };

    DataFlowEditorPage.prototype.createShiftRightToolItem = function () {
        var _this = this;

        var $shiftRight = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tools brtc-va-editors-diagram-diagrameditorpage-function-tools-shiftright brtc-style-flex-center"><i class="fa fa-angle-double-right fa-lg"></i></div>');
        this.$tools.append($shiftRight);

        $shiftRight.click(function () {
            var cid = _this.$tools.attr('cid');
            var figure = _this.graph.getCell(cid);
            var command = _this.createShiftRightCommand(figure);
            _this.fireCommand(command);
            _this.hideSelectionBox();
            _this.showSelectionBox();
        });
        this.toolItems.shiftRight = $shiftRight;
    };

    DataFlowEditorPage.prototype.createSwitchToolItem = function () {
        var _this = this;

        var $switch = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tools brtc-va-editors-diagram-diagrameditorpage-function-tools-switch" title="Change Function"></div>');
        this.$tools.append($switch);

        $switch.click(function (event) {
            var closeHandler = function (dialogResult) {
                if (dialogResult.OK) {
                    var cid = _this.$tools.attr('cid');
                    var figure = _this.graph.getCell(cid);
                    var currUnit = _this.getFnUnitById(figure.attributes.fid);
                    if (currUnit.func !== dialogResult.func) {
                        var replaceUnit = _this.getModel().newFnUnit(dialogResult.func);
                        replaceUnit.display.diagram.position = $.extend({}, currUnit.display.diagram.position);
                        var command = _this.createSwitchFnUnitCommand(figure, replaceUnit, currUnit);
                        command.event.source = this;
                        _this.fireCommand(command);
                    }
                }
                _this.switchFnUnitDialog = null;
            };

            var preCid = _this.$tools.attr('cid');
            var preFigure = _this.graph.getCell(preCid);
            var preFnUnit = _this.getModel().getPrevious(preFigure.attributes.fid);
            _this.switchFnUnitDialog = new Brightics.VA.Core.Dialogs.SwitchFnUnitDialog($(event.target), {
                preFnUnit: _this.getFnUnitById(preFnUnit[0]),
                modelType: _this.getModel().type,
                close: closeHandler
            });
        });
        this.toolItems.switch = $switch;
    };

    DataFlowEditorPage.prototype.createConnectToolItem = function () {
        var _this = this;
        var fromCell, link;
        var $link = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tools brtc-va-editors-diagram-diagrameditorpage-function-tools-connect" title="Connect"></div>');
        this.$tools.append($link);

        $link.click(function () {
            var cid = _this.$tools.attr('cid');
            fromCell = _this.graph.getCell(cid);
            var fromCellView = _this.paper.findViewByModel(fromCell);
            _this._highlightedViews.push(fromCellView);
            fromCellView.highlight();
            _this._connectableFigures = _this._findConnectableFigures(fromCell);
            _this._fromCell = fromCell;
            _this._unselectAllLinkViews();
            _this._unselectAllElements();
            _this.hideSelectionBox();
            _this._setBehaviorModeToLink();
            _this._triggerFnUnitSelect();
        });

        $link.draggable({
            appendTo: _this.$paperElement,
            helper: function (event) {
                return $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tools-link-helper"></div>');
            },
            start: function (event, ui) {
                _this.dragging = true;
                _this._unselectAllLinkViews();
                var cid = _this.$tools.attr('cid');
                fromCell = _this.graph.getCell(cid);
                var kid = Brightics.VA.Core.Utils.IDGenerator.link.id();
                link = _this._createLinkFigure(kid, fromCell, {
                    x: ui.position.left / _this.options.scale,
                    y: ui.position.top / _this.options.scale
                });
                _this.graph.addCells([link]);
                ui.helper.attr('cid', link.cid);
            },
            drag: function (event, ui) {
                var pointX = event.pageX - _this.$paperElement.offset().left;
                var pointY = event.pageY - _this.$paperElement.offset().top;

                var x = pointX / _this.options.scale;
                var y = pointY / _this.options.scale;

                var models = _this.graph.findModelsFromPoint({
                    x: x,
                    y: y
                });
                _this._unhighlightAll();

                var sourceModel = fromCell;

                if (models.length > 0 && _this._isConnectableFnUnit(sourceModel, models[0])) {
                    link.set('target', {id: models[0].id, port: IN_PORT_ID});

                    var highlightedView = _this.paper.findViewByModel(models[0]);
                    _this._highlightedViews.push(highlightedView);
                    highlightedView.highlight();
                } else {
                    link.set('target', {
                        x: x,
                        y: y
                    });
                }

                (_.throttle(function () {
                    _this.fitToContent();
                    _this.forceScrollTo(event, x, y);
                }, 200))();

            },
            stop: function (event, ui) {
                _this.dragging = false;
                var pointX = event.pageX - _this.$paperElement.offset().left;
                var pointY = event.pageY - _this.$paperElement.offset().top;

                _this._unhighlightAll();
                var models = _this.graph.findModelsFromPoint({
                    x: pointX / _this.options.scale,
                    y: pointY / _this.options.scale
                });
                if (models.length > 0) {
                    if (link.attributes.source.id === models[0].id) {
                        link.remove();
                        _this.notification('warning', 'No connection could be made because connection loop.');
                    } else {
                        link.prop({'targetFid': models[0].prop('fid')});
                        var message = _this.validateConnect([link]);
                        if (message) {
                            _this.notification('warning', message);
                            link.remove();
                        } else {
                            var command = _this.createConnectFnUnitCommand(link);
                            if (!_this.fireCommand(command)) {
                                link.remove();
                                _this.notification('warning', 'No connection could be made because connection already exists.');
                            }
                        }
                    }
                } else {
                    link.remove();
                    _this.notification('warning', 'No connection could be made.');
                }
            },
            scope: 'tasks'
        });
        this.toolItems.connect = $link;
    };

    DataFlowEditorPage.prototype.createCloneToolItem = function () {
        var _this = this;

        var $duplicate = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tools brtc-va-editors-diagram-diagrameditorpage-function-tools-clone" title="Duplicate"></div>');
        this.$tools.append($duplicate);

        $duplicate.click(function () {
            _this.notification('info', 'Click and drag to clone function');
        });

        $duplicate.draggable({
            appendTo: _this.$paperElement,
            helper: function (event) {
                return $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tools-clone-helper"></div>');
            },
            start: function (event, ui) {
                _this.dragging = true;
                var cid = _this.$tools.attr('cid');
                var model = _this.graph.getCell(cid);

                // need to change about 'id' & 'outData'
                var duplicated = model.clone();
                duplicated.unselect();
                duplicated.resetRuntime();

                var dummy = {
                    functions: [_.cloneDeep(_this.getFnUnitById(duplicated.attributes.fid))],
                    links: [],
                    innerModels: {},
                    type: 'data'
                };
                dummy.innerModels = _this._collectInnerModels(_this.getEditor().getModel(), dummy);

                var dummyModel = Brightics.VA.Core.Utils.ModelUtils.cloneModel(dummy);

                _this.duplicatedFnUnit = dummyModel.functions[0];
                FnUnitUtils.clearInData(_this.duplicatedFnUnit);

                _this.duplicatedDummyModel = dummyModel;

                duplicated.attributes.dummy = true;
                duplicated.attributes.fid = _this.duplicatedFnUnit.fid;

                var x = ui.position.left / _this.options.scale - model.attributes.position.x;
                var y = ui.position.top / _this.options.scale - model.attributes.position.y;
                duplicated.translate(x, y);
                _this.graph.addCells([duplicated]);

                ui.helper.attr('cid', duplicated.cid);
                _this.hideCue();
                _this.showGuideBox(duplicated);
            },
            drag: function (event, ui) {
                var cid = ui.helper.attr('cid');
                var duplicated = _this.graph.getCell(cid);
                var x = ui.position.left / _this.options.scale - duplicated.attributes.position.x;
                var y = ui.position.top / _this.options.scale - duplicated.attributes.position.y;
                duplicated.translate(x, y);
                _this.showGuideBox(duplicated);
            },
            stop: function (event, ui) {
                _this.dragging = false;
                var cid = ui.helper.attr('cid');
                var duplicated = _this.graph.getCell(cid);

                var message = Object.values(_this.validateTranslate([duplicated]))[0];
                if (message) {
                    _this.hideGuideBox();
                    _this.hideGuideMessage();
                    _this.notification('warning', message);

                    duplicated.remove();
                } else if (_this.getFunctionsLength() + 1 > _this.MAX_FUNC_COUNT) {
                    _this.hideGuideBox();
                    _this.hideGuideMessage();

                    duplicated.remove();
                    Brightics.VA.Core.Utils.WidgetUtils.openErrorDialog(_this.MAX_FUNC_MESSAGE);
                } else {
                    var x = ui.position.left / _this.options.scale - duplicated.attributes.position.x;
                    var y = ui.position.top / _this.options.scale - duplicated.attributes.position.y;
                    duplicated.translate(x, y);
                    _this.hideGuideBox();
                    var pos = _this.calcGuidePosition(duplicated);
                    duplicated.position(pos.x, pos.y);
                    duplicated.attributes.dummy = false;

                    var links = [];
                    if (Brightics.VA.SettingStorage.getValue('editor.diagram.autoconnect') === 'true') links = _this.connectSmartly(duplicated);
                    _this.graph.addCells(links);

                    var commands = new Brightics.VA.Core.CompoundCommand(_this, {label: 'Clone a Function'});

                    commands.add(_this.createNewFnUnitCommand(duplicated,
                        _this.duplicatedFnUnit,
                        _this.duplicatedDummyModel));

                    commands.add(_this.createSetFnUnitPositionCommand(duplicated, pos.x, pos.y));
                    for (var i in links) {
                        commands.add(_this.createConnectFnUnitCommand(links[i]));
                    }
                    _this.fireCommand(commands);

                    _this._unselectAllElements();
                    _this._selectElement(duplicated);
                    _this.showSelectionBox();
                    _this._triggerFnUnitSelect();
                }
            }
        });
        this.toolItems.duplicate = $duplicate;
    };

    DataFlowEditorPage.prototype.createEnterToolItem = function () {
        var _this = this;
        var $enter = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tools brtc-va-editors-diagram-diagrameditorpage-function-tools-enter" title="Step Into"></div>');
        this.$tools.append($enter);
        $enter.click(function () {
            var cid = _this.$tools.attr('cid');
            var figure = _this.graph.getCell(cid);
            _this.hideTools(true);
            _this.$parent.trigger('fnUnit:dbclick', [[figure.attributes.fid]]);
        });
        this.toolItems.enter = $enter;
    };

    DataFlowEditorPage.prototype.createPopupToolItem = function () {
        var _this = this;
        var $popup = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tools brtc-va-editors-diagram-diagrameditorpage-function-tools-popup" title="Popup"></div>');
        this.$tools.append($popup);
        $popup.click(function (event) {
            var cid = _this.$tools.attr('cid');
            var figure = _this.graph.getCell(cid);
            _this.hideTools(true);

            var fnUnit = _this.getFnUnitById(figure.attributes.fid);
            var clonedFnUnit = $.extend(true, {}, fnUnit);
            var func = fnUnit.func;

            var anchorOffset = $(event.target).offset();
            var pos = {
                x: anchorOffset.left - 402 + 26,
                y: anchorOffset.top - 10 + 40
            };

            //원래는 propertiespanel에서 구현된 내용을 그대로 쓰는것으로 컨셉을 잡았으나...
            //일단 dialog로 해결...
            var TargetDialog;
            switch (func) {
                case "setValue":
                    TargetDialog = Brightics.VA.Core.Dialogs.SetValueSettingDialog;
                    break;
                case "import":
                    TargetDialog = Brightics.VA.Core.Dialogs.ImportDataSettingDialog;
                    break;
                case "export":
                    TargetDialog = Brightics.VA.Core.Dialogs.ExportDataSettingDialog;
                    break;
            }

            new TargetDialog(_this.$mainControl, {
                event: event,
                editor: _this.getEditor(),
                fnUnit: clonedFnUnit,
                param: clonedFnUnit.param,
                position: pos,
                title: 'Setting Configuration',
                close: function (dialogResult) {
                    if (dialogResult.OK && dialogResult.results) {
                        _this.createSetDialogFnUnitCommand(dialogResult.results.fnUnit, fnUnit);
                    }
                }
            });

        });
        this.toolItems.popup = $popup;
    };

    DataFlowEditorPage.prototype.createMultiSelectionToolbar = function () {
        var _this = this;

        this.$multiTools = this.$mainControl.find('.brtc-va-editors-diagram-diagrameditorpage-function-multiselected');
        this.$multiTools.append('' +
            '<div class="brtc-va-editors-diagram-diagrameditorpage-function-multiselected-toolbar">' +
            '   <div class="brtc-va-editors-diagram-diagrameditorpage-function-multiselected-tools brtc-va-editors-diagram-diagrameditorpage-function-multiselected-tools-remove" title="Remove"></div>' +
            '   <div class="brtc-va-editors-diagram-diagrameditorpage-function-multiselected-tools brtc-va-editors-diagram-diagrameditorpage-function-multiselected-tools-add-library" title="Add to Template"></div>' +
            '   <div class="brtc-va-editors-diagram-diagrameditorpage-function-multiselected-tools brtc-va-editors-diagram-diagrameditorpage-function-multiselected-tools-run" title="Run"></div>' +
            '   <div class="brtc-va-editors-diagram-diagrameditorpage-function-multiselected-tools brtc-va-editors-diagram-diagrameditorpage-function-multiselected-tools-add-clipboard" title="Add to Clipboard"></div>' +
            '   <div class="brtc-va-editors-diagram-diagrameditorpage-function-multiselected-tools brtc-va-editors-diagram-diagrameditorpage-function-multiselected-tools-bind-functions" title="Bind for OPT"></div>' +
            '</div>');

        var $remove = this.$multiTools.find('.brtc-va-editors-diagram-diagrameditorpage-function-multiselected-tools-remove');
        $remove.click(function () {
            var figures = _this.getSelectedFigures();
            _this.removeFnUnitFigures(figures);
            _this._unselectAllElements();
            _this._unselectAllLinkViews();
            _this._triggerFnUnitSelect();
            _this.hideSelectionBox();
            _this.hideTools(true);
        });

        var $addLibrary = this.$multiTools.find('.brtc-va-editors-diagram-diagrameditorpage-function-multiselected-tools-add-library');
        $addLibrary.click(function () {
            if (_this.getEditor().getEditorState('readonly-figure-selected')) return;
            var template = _this.makeTemplate.call(_this);

            var editor = Brightics.VA.Core.Utils.WidgetUtils.getModelEditorRef(_this.$mainControl);
            editor.addToLibrary(template);
        });

        var $addClippboard = this.$multiTools.find('.brtc-va-editors-diagram-diagrameditorpage-function-multiselected-tools-add-clipboard');
        $addClippboard.click(function () {
            if (_this.getEditor().getEditorState('readonly-figure-selected')) return;
            var template = _this.makeTemplate.call(_this);

            var editor = Brightics.VA.Core.Utils.WidgetUtils.getModelEditorRef(_this.$mainControl);
            editor.addToFunctionClipboard(template);
        });

        var $run = this.$multiTools.find('.brtc-va-editors-diagram-diagrameditorpage-function-multiselected-tools-run');
        $run.click(function () {
            var fnUnit, figure;
            var link;
            var original = _this.getModel();
            var virtual = $.extend(true, {}, original);
            virtual.functions = [];
            var figures = _this.getSelectedFigures();
            var fids = [];
            for (var f in figures) {
                figure = figures[f];
                fnUnit = $.extend(true, {}, _this.getFnUnitById(figure.attributes.fid));
                virtual.addFnUnit(fnUnit);
                fids.push(fnUnit.fid);
            }
            var removeLinks = [];
            for (var k in virtual.links) {
                link = virtual.links[k];
                if (fids.indexOf(link[SOURCE_FID]) < 0 || fids.indexOf(link[TARGET_FID]) < 0) {
                    removeLinks.push(link);
                }
            }
            for (var r in removeLinks) {
                virtual.links.splice(virtual.links.indexOf(removeLinks[r]), 1);
            }

            var closeHandler = function (dialogResult) {
                if (dialogResult.OK) {
                    Brightics.VA.Core.DataQueryTemplate.removeCache(virtual.mid);
                    Studio.getJobExecutor().launchModel(virtual, dialogResult.args);
                }
            };

            if (Brightics.VA.SettingStorage.getValue('editor.variable.visible') === 'true' &&
                Object.keys(_this.getEditor().getModel().variables).length > 0) {
                new Brightics.VA.Core.Dialogs.RunDataDialog($(this), {
                    close: closeHandler,
                    analyticsModel: _this.getEditor().getModel()
                });
            } else {
                var defaultArgs = {};
                for (var key in _this.getEditor().getModel().variables) {
                    var gvDef = _this.getEditor().getModel().variables[key];
                    var temp;
                    if (_.isArray(gvDef.value) && gvDef.value.length === 1) {
                        temp = gvDef.value[0];
                    } else {
                        temp = gvDef.value;
                    }

                    if (!_.isUndefined(temp)) defaultArgs[key] = gvDef.value;
                }
                closeHandler({
                    OK: true,
                    args: defaultArgs
                });
            }
        });

        var $bindFunctionsButton = this.$multiTools.find('.brtc-va-editors-diagram-diagrameditorpage-function-multiselected-tools-bind-functions');
        $bindFunctionsButton.click(function () {
            var JointConverter = {
                convertFigures2Fids: function (figures) {
                    var fids = [];
                    for (var i = 0; i < figures.length; i++) {
                        fids.push(figures[i].attributes.fid);
                    }
                    return fids;
                }
            };
            var pid = _this.getEditor().getEditorInput().getProjectId();
            var mid = _this.getEditor().getEditorInput().getFileId();

            if (mid !== _this.getEditor().activeModel.mid) {
                return Brightics.VA.Core.Utils.WidgetUtils.openErrorDialog(
                    "OPT models cannot be made in inner models."
                );
            }

            var figures = _this.getSelectedFigures();
            var fids = JointConverter.convertFigures2Fids(figures);
            var hash = fids.sort().join("_");

            var optModels = _this.getEditor().activeModel.optModels;
            for (var key in optModels) {
                if (optModels[key].hash === hash) {
                    return Brightics.VA.Core.Utils.WidgetUtils.openErrorDialog(
                        "This OPT model already exists."
                    );
                }
            }

            var command = Brightics.OptModelManager.createNewOptModelCommand(pid, mid, fids);
            _this.fireCommand(command);

            return undefined;
        });
    };

    DataFlowEditorPage.prototype.createCue = function () {
        var _this = this;
        var closeHandler = function (dialogResult) {
            if (dialogResult.OK) {
                var figures = [];
                var fnUnit = _this.getModel().newFnUnit(dialogResult.func);
                var pos = dialogResult.position;
                fnUnit.display.diagram.position = _this.calcGuideLocation(pos.left / _this.options.scale, pos.top / _this.options.scale);
                var figure = _this.createFnUnitFigure(fnUnit);
                figures.push(figure);
                _this.graph.addCells(figures);

                var command = new Brightics.VA.Core.CompoundCommand(_this, {label: 'Create a Function'});
                var links = [];
                if (Brightics.VA.SettingStorage.getValue('editor.diagram.autoconnect') === 'true') links = _this.connectSmartly(figure);
                _this.graph.addCells(links);

                if (links.length > 0) {
                    command.add(_this.createNewFnUnitCommand(figure, fnUnit));
                    for (var i in links) {
                        command.add(_this.createConnectFnUnitCommand(links[i]));
                    }
                } else {
                    command.add(_this.createNewFnUnitCommand(figure, fnUnit));
                }
                _this.fireCommand(command);
                _this.hideCue();

                _this._unselectAllElements();
                _this._selectElement(figure);
                _this.showSelectionBox();
                _this._triggerFnUnitSelect();
            }

            _this.switchFnUnitDialog = null;
        };

        if (!this.getFunctionsLength()) {
            this.$createCue.css({
                display: 'flex',
                left: '19.5px',
                top: '27px'
            })
        }

        this.$createCue.find('.brtc-va-editors-diagram-diagrameditorpage-function-cue-create-label-wrapper').mousedown(function (event) {
            _this.$createCue.attr('mousedown', 'true');
            var localPoint = _this.paper.snapToGrid({x: event.clientX, y: event.clientY});
            _this.$dragSelection.css({
                display: 'block',
                width: 0,
                height: 0
            });
            _this.$dragSelection.attr('start-x', localPoint.x * _this.options.scale);
            _this.$dragSelection.attr('start-y', localPoint.y * _this.options.scale);
        });

        this.$createCue.find('.brtc-va-editors-diagram-diagrameditorpage-function-cue-create-label-wrapper').mouseup(function (event) {
            if (Brightics.VA.SettingStorage.getValue('editor.closePanelOnClick') === 'true') {
                _this._unselectAllElements();
                _this.hideSelectionBox();
                _this._triggerFnUnitSelect();
            }
            if (Brightics.VA.SettingStorage.getValue('editor.function.add.doubleclick') === 'true') {
                return;
            }
            if (_this.$createCue.attr('mousedown') === 'false') return;

            _this.MAX_FUNC_COUNT = Brightics.VA.SettingStorage.getValue('editor.maxfuncnum');
            _this.MAX_FUNC_MESSAGE = 'You can only add up to ' + _this.MAX_FUNC_COUNT + '.';

            if (_this.getFunctionsLength() + 1 > _this.MAX_FUNC_COUNT) {
                Brightics.VA.Core.Utils.WidgetUtils.openErrorDialog(_this.MAX_FUNC_MESSAGE);
            } else {
                _this.switchFnUnitDialog = new Brightics.VA.Core.Dialogs.SwitchFnUnitDialog($(event.target), {
                    modelType: _this.getModel().type,
                    close: closeHandler,
                    position: _this.$createCue.position()
                });
            }
        });

        this.$createCue.find('.brtc-va-editors-diagram-diagrameditorpage-function-cue-create-label-wrapper').dblclick(function (event) {
            if (Brightics.VA.SettingStorage.getValue('editor.function.add.doubleclick') !== 'true') return;

            if (_this.getFunctionsLength() + 1 > _this.MAX_FUNC_COUNT) {
                Brightics.VA.Core.Utils.WidgetUtils.openErrorDialog(_this.MAX_FUNC_MESSAGE);
            } else {
                _this.switchFnUnitDialog = new Brightics.VA.Core.Dialogs.SwitchFnUnitDialog($(event.target), {
                    modelType: _this.getModel().type,
                    close: closeHandler,
                    position: _this.$createCue.position()
                });
            }
        });
    };

    DataFlowEditorPage.prototype._createMiniMapControl = function () {
        this.minimap = new Brightics.VA.Core.Editors.Diagram.MinimapBoat(this.$parent.parent('.brtc-va-editors-modeleditor-splitter'), {diagramEditorPage: this});
    };

    DataFlowEditorPage.prototype.createExpressionControl = function () {
        if (this.expression) this.expression.destroy();
        if (!this.options.editor.getActiveModel().isMainModel()) {
            this.expression = new Brightics.VA.Core.Editors.Diagram.ExpressionBoat(this.$parent.parent('.brtc-va-editors-modeleditor-splitter'),
                {
                    editor: this.options.editor,
                    resizable: false
                });
        }
    };

    DataFlowEditorPage.prototype.getFunctionsLength = function () {
        return this.getModel().functions.length;
    };

    DataFlowEditorPage.prototype.ensureCenter = function (figure) {
        var centerFigure = figure;
        if (!centerFigure) return;

        var panel = {
            width: this.$mainControl.width(),
            height: this.$mainControl.height(),
            x: this.$mainControl.scrollLeft(),
            y: this.$mainControl.scrollTop()
        };

        var pos = {
            x: centerFigure.attributes.position.x * this.options.scale,
            y: centerFigure.attributes.position.y * this.options.scale
        };

        var xPage = (pos.x / panel.width) | 0;
        var scrollLeft = (xPage * panel.width) + (pos.x % panel.width) - (panel.width / 2) + (Brightics.VA.Env.Diagram.FIGURE_WIDTH * this.options.scale / 2);

        var yPage = (pos.y / panel.height) | 0;
        var scrollTop = (yPage * panel.height) + (pos.y % panel.height) - (panel.height / 2) + (Brightics.VA.Env.Diagram.FIGURE_HEIGHT * this.options.scale / 2);

        this.$mainControl.animate({scrollLeft: scrollLeft, scrollTop: scrollTop}, 500);
    };

    DataFlowEditorPage.prototype.ensureVisible = function (figure) {
        if (!figure) return;

        var panel = {
            width: this.$mainControl.width(),
            heigth: this.$mainControl.height(),
            x: this.$mainControl.scrollLeft(),
            y: this.$mainControl.scrollTop()
        };
        var pos = {
            x: figure.attributes.position.x * this.options.scale,
            y: figure.attributes.position.y * this.options.scale
        };

        if (panel.x > pos.x) {
            this.$mainControl.scrollLeft(pos.x - 10);
        }
        if (panel.y > pos.y) {
            this.$mainControl.scrollTop(pos.y - 10);
        }
        if (panel.x + panel.width < pos.x + 109) {
            this.$mainControl.scrollLeft(pos.x - panel.width + 110);
        }
        if (panel.y + panel.heigth < pos.y + 44) {
            this.$mainControl.scrollTop(panel.y + pos.y - panel.heigth + 45);
        }
    };

    DataFlowEditorPage.prototype.changeScale = function (scale) {
        if (this.options.scale === scale) return

        this.options.scale = scale;
        if (this.options.scale < 0.6) {
            this.controlSmallPaper();
            return;
        }

        if (this.options.scale === 0.8) {
            this.$paperElement.removeClass('brtc-va-editors-diagram-diagrameditorpage-paper-scale-small');
            this.$paperElement.addClass('brtc-va-editors-diagram-diagrameditorpage-paper-scale-normal');
            this.paper.scale(this.options.scale);
        } else if (this.options.scale === 0.6) {
            this.$paperElement.removeClass('brtc-va-editors-diagram-diagrameditorpage-paper-scale-normal');
            this.$paperElement.addClass('brtc-va-editors-diagram-diagrameditorpage-paper-scale-small');
            this.paper.scale(this.options.scale);
        } else if (this.options.scale === 1.0) {
            this.$paperElement.removeClass('brtc-va-editors-diagram-diagrameditorpage-paper-scale-small');
            this.$paperElement.removeClass('brtc-va-editors-diagram-diagrameditorpage-paper-scale-normal');
            this.paper.scale(this.options.scale);
        } else {
            //select same scale twice.
            return;
        }

        this.showSelectionBox();
        var selected = this.getSelectedFigures();
        if (selected.length > 0) {
            this.ensureCenter(selected[0]);
        }

        this.updateMiniMapWindow();
        Brightics.OptModelManager.renderOptModels();
    };

    DataFlowEditorPage.prototype.controlSmallPaper = function () {
        this._unselectAllElements()
        this._unselectAllLinkViews()
        this._triggerFnUnitSelect()
        this.hideSelectionBox()
        this.hideTools()
        this.hideGuideBox()
        this.hideGuideMessage()
        this.hideCue()
        this.$paperElement.removeClass('brtc-va-editors-diagram-diagrameditorpage-paper-scale-normal');
        this.$paperElement.addClass('brtc-va-editors-diagram-diagrameditorpage-paper-scale-small');
        this.paper.scale(this.options.scale)
        this.updateMiniMapWindow()
        Brightics.OptModelManager.renderOptModels()
    };

    DataFlowEditorPage.prototype.changeTooltipEnabled = function (enabled) {
        this.getEditor().setEditorState(TOOLTIP_ENABLED, enabled);
    };

    DataFlowEditorPage.prototype.makeDroppable = function () {
        var _this = this;

        /* 다이얼로그의 드래그 이동을 위한 상위 element */
        _this.$mainControl.closest('.brtc-va-editor').droppable({
            accept: '.ui-dialog',
            drop: function (event, ui) {
                /* draggable의 이동시에 intersect되는 모든 droppables의 isover상태가 true가 되기 때문에, drop이 끝난 후 isover를 false로 맞춰주어야 함. */
                $.ui.ddmanager.droppables.default.forEach(d => {
                    d.isover = false;
                });
            }
        });

        _this.$mainControl.droppable({
            accept: '.brtc-va-studio-dm-draggable',
            activate: function (event, ui) {
                _this.dropping = true;
                _this.fitToContent();
            },
            deactivate: function (event, ui) {
                _this.dropping = false;
                if (ui.helper.css('visibility') === 'visible') {
                    _this.fitToContent();
                }
            },
            over: function (event, ui) {
                _this.hideSelectionBox();
                var figure, x, y;
                ui.helper.css('visibility', 'hidden');
                ui.helper.bind('feedback', function (event, eventData) {
                    var pos = _this.paper.clientToLocalPoint({x: eventData.clientX, y: eventData.clientY});
                    for (var i in _this.dropContents.functions) {
                        figure = _this.dropFigures[i];
                        x = pos.x - 50 + _this.dropContents.functions[i].display.diagram.position.x;
                        y = pos.y - 30 + _this.dropContents.functions[i].display.diagram.position.y;
                        figure.position(x, y);
                    }
                    _this.showGuideBox(_this.dropFigures[0]);
                });

                var templateContents = Brightics.VA.Core.Utils.WidgetUtils.getData(ui.helper, 'template');
                var dragSource = Brightics.VA.Core.Utils.WidgetUtils.getData(ui.helper, 'source');
                var pos = _this.paper.clientToLocalPoint({x: event.clientX, y: event.clientY});

                if (dragSource instanceof Brightics.VA.Core.Views.Palette) {
                    _this.dropContents = {
                        functions: [],
                        links: [],
                        isPalette: true
                    };
                    _this.dropContents.functions.push(_this.getModel().newFnUnit(templateContents.functions[0].func));
                } else {
                    _this.dropContents = templateContents;
                }

                _this.dropFigures = [];
                for (let i in _this.dropContents.functions) {
                    figure = _this.createFnUnitFigure(_this.dropContents.functions[i]);
                    figure.attributes.dummy = true;
                    _this.dropFigures.push(figure);
                }
                for (let i in _this.dropContents.functions) {
                    figure = _this.dropFigures[i];
                    x = pos.x - 50 + _this.dropContents.functions[i].display.diagram.position.x;
                    y = pos.y - 30 + _this.dropContents.functions[i].display.diagram.position.y;
                    figure.position(x, y);
                }

                var tempFigure = _.zipObject(_this.dropFigures.map((obj) => [obj.attributes.fid, obj]));
                _this.dropLinks = [];
                for (let i in _this.dropContents.links) {
                    let linkUnit = _this.dropContents.links[i];
                    let sFid = linkUnit[SOURCE_FID];
                    let tFid = linkUnit[TARGET_FID];

                    var linkFigure = _this.createLinkFigure(linkUnit, tempFigure[sFid], tempFigure[tFid]);
                    if (linkFigure) {
                        _this.dropLinks.push(linkFigure);
                    }
                }

                var cells = _this.dropFigures.concat(_this.dropLinks);
                _this.graph.addCells(cells);
            },
            out: function (event, ui) {
                ui.helper.css('visibility', 'visible');
                ui.helper.unbind('feedback');
                for (var i in _this.dropFigures) {
                    _this.dropFigures[i].remove();
                }
                _this.dropContents = null;
                _this.dropFigures = [];
                _this.dropLinks = [];

                _this.hideGuideBox();
                _this.hideGuideMessage();
                _this.hideTools(true);
                _this.showSelectionBox();
                _this._triggerMouseLeave();
            },
            drop: function (event, ui) {
                var i, links = [];
                _this.hideGuideBox();

                var figures = _this.dropFigures;
                var message = Object.values(_this.validateTranslate(figures))[0];
                if (message) {
                    _this.hideGuideMessage();
                    _this.notification('warning', message);
                    for (i in _this.dropFigures) {
                        _this.dropFigures[i].remove();
                    }
                } else if (_this.getFunctionsLength() + _this.dropFigures.length > _this.MAX_FUNC_COUNT) {
                    _this.hideGuideMessage();
                    for (i in _this.dropFigures) {
                        _this.dropFigures[i].remove();
                    }
                    Brightics.VA.Core.Utils.WidgetUtils.openErrorDialog(_this.MAX_FUNC_MESSAGE);
                } else if (_this.dropFigures.length > 0) {
                    var isMaintainIntable = false;
                    for (i in _this.dropFigures) {
                        var pos = _this.calcGuidePosition(_this.dropFigures[i]);
                        _this.dropFigures[i].position(pos.x, pos.y);
                        _this.dropFigures[i].attributes.dummy = false;
                    }
                    if (_this.dropFigures.length === 1 && Brightics.VA.SettingStorage.getValue('editor.diagram.autoconnect') === 'true') {
                        links = _this.connectSmartly(_this.dropFigures[i]);
                    } else {
                        isMaintainIntable = true;
                    }
                    _this.graph.addCells(links); // ???
                    _this.showTools(_this.dropFigures[0]);

                    var commands = new Brightics.VA.Core.CompoundCommand(_this, {label: 'Create a Function'});

                    for (i in _this.dropFigures) {
                        if (isMaintainIntable !== true) {
                            FnUnitUtils.clearInData(_this.dropContents.functions[i]);
                        }
                        commands.add(_this.createNewFnUnitCommand(_this.dropFigures[i],
                            _this.dropContents.functions[i],
                            _this.dropContents.isPalette ? undefined : _this.dropContents
                        ));
                        commands.add(_this.createSetFnUnitPositionCommand(_this.dropFigures[i], _this.dropFigures[i].attributes.position.x, _this.dropFigures[i].attributes.position.y));
                    }

                    for (i in _this.dropLinks) {
                        commands.add(_this.createConnectFnUnitCommand(_this.dropLinks[i], isMaintainIntable));
                    }

                    for (i in links) {
                        commands.add(_this.createConnectFnUnitCommand(links[i]));
                    }
                    _this.fireCommand(commands);
                    _this._rerouteLink();

                    _this._unselectAllElements();
                    _this._selectElements(_this.dropFigures);
                    _this.showSelectionBox();
                    _this._triggerFnUnitSelect();
                }

                _this.dropContents = null;
                _this.dropFigures = [];
                _this.dropLinks = [];

                _this.showSelectionBox();
            }
        });
    };

    DataFlowEditorPage.prototype._rerouteLink = function () {
        var _this = this;
        if (_this.rerouteLinkTaskTimeOut) {
            clearTimeout(_this.rerouteLinkTaskTimeOut);
        }
        var rerouteLinkTask = function () {
            var links = _this.graph.getLinks();
            for (var i in links) {
                _this.paper.findViewByModel(links[i]).update();
            }
        };

        _this.rerouteLinkTaskTimeOut = setTimeout(rerouteLinkTask, 1000);
    };

    DataFlowEditorPage.prototype.configureSelectionBounds = function () {
        this.$multiTools.toggleClass('single-selected', this.getSelectedFigures().length === 1);
    };

    DataFlowEditorPage.prototype.showSelectionBounds = function () {
        var selectedRect;
        var figures = this.getSelectedFigures();
        var readOnlyFigureSelected = false;
        if (figures.length > 0) {
            for (var i in figures) {
                readOnlyFigureSelected =
                    readOnlyFigureSelected || this.isReadOnlyFigure(figures[i]);
                if (selectedRect) {
                    selectedRect.top = Math.min(selectedRect.top, figures[i].attributes.position.y);
                    selectedRect.left = Math.min(selectedRect.left, figures[i].attributes.position.x);
                    selectedRect.bottom = Math.max(selectedRect.bottom, figures[i].attributes.position.y + Brightics.VA.Env.Diagram.FIGURE_HEIGHT);
                    selectedRect.right = Math.max(selectedRect.right, figures[i].attributes.position.x + Brightics.VA.Env.Diagram.FIGURE_WIDTH);
                } else {
                    selectedRect = {
                        top: figures[i].attributes.position.y,
                        left: figures[i].attributes.position.x,
                        bottom: figures[i].attributes.position.y + Brightics.VA.Env.Diagram.FIGURE_HEIGHT,
                        right: figures[i].attributes.position.x + Brightics.VA.Env.Diagram.FIGURE_WIDTH
                    };
                }
            }

            var top = (selectedRect.top * this.options.scale);
            var left = (selectedRect.left * this.options.scale) + 3;
            var width = ((selectedRect.right - selectedRect.left) * this.options.scale) - 5;
            var height = ((selectedRect.bottom - selectedRect.top) * this.options.scale) + 7;

            this.$selectedBounds.css({display: 'block', top: top, left: left, width: width, height: height});
        } else {
            this.$selectedBounds.css({
                display: 'none'
            });
        }
        this.getEditor().setEditorState('readonly-figure-selected', readOnlyFigureSelected);
        this.$multiTools.toggleClass('readonly-figure-selected', readOnlyFigureSelected);
    };

    DataFlowEditorPage.prototype.hideCue = function () {
        this.$createCue.css({display: 'none'});
    }

    DataFlowEditorPage.prototype.hideSelectionBounds = function () {
        if (this.$selectedBounds) this.$selectedBounds.hide();
    };

    DataFlowEditorPage.prototype.showSelectionBox = function () {
        if (this.options.scale < 0.6) return
        this.configureSelectionBounds();
        this.showSelectionBounds();
    };

    DataFlowEditorPage.prototype.updateSelectionBox = function (figure) {
    };

    DataFlowEditorPage.prototype.hideSelectionBox = function (figure) {
        this.hideSelectionBounds();
    };

    DataFlowEditorPage.prototype._triggerClickOrDoubleClickEvent = function (fnUnitIds) {
    };

    DataFlowEditorPage.prototype.showErrorBox = function (figures) {
        for (var i in figures) {
            if (figures[i] instanceof Brightics.VA.Implementation.DataFlow.Editors.Diagram.Shapes.FnUnitFigure) {
                figures[i].showError();
            }
        }
    };

    DataFlowEditorPage.prototype.updateErrorBox = function (figure) {
    };

    DataFlowEditorPage.prototype.hideErrorBox = function () {
        var figures = this.graph.getElements();
        for (var i in figures) {
            figures[i].hideError();
        }
    };

    DataFlowEditorPage.prototype.showValidationToolTip = function (figure) {
        this.$validationTooltip.empty();
        for (var i in this.problems) {
            if (this.problems[i].fid === figure.attributes.fid) {
                var $problem = $('<div class="brtc-va-editors-diagram-diagrameditorpage-validation-problem">' +
                    '<i class="fa fa-exclamation-triangle" aria-hidden="true"></i> ' + this.problems[i].message +
                    '</div>');
                this.$validationTooltip.append($problem);
            }
        }
        this.$validationTooltip.css('display', 'block');
    };

    DataFlowEditorPage.prototype.hideValidationToolTip = function () {
        if (this.$validationTooltip) this.$validationTooltip.css('display', 'none');
    };

    DataFlowEditorPage.prototype.validateTranslate = function (figures) {
        this.translateProblems = {};
        for (var i in figures) {
            var figure = figures[i];
            var message;
            if (this.checkOverPosition(figure) === false) message = 'Can not move over other function.';
            else if (this.checkOutRangePosition(figure) === false) message = 'Can not move out of range.';
            if (message) {
                this.translateProblems[figure.cid] = message;
            }
        }
        return this.translateProblems;
    };

    DataFlowEditorPage.prototype.validateConnect = function (links) {
        for (var i in links) {
            var link = links[i];
            if (this.checkConnectedLink(link) === false) return 'No connection could be made.';
            else if (this.checkLoopLink(link) === false) return 'No connection could be made because connection loop.';
            else if (this.checkAlreadyExistLink(link) === false) return 'No connection could be made because connection already exists.';

            // link reconnection undo 버그 있어서 주석 처리
            // if (this.checkAlreadyExistLinkByTableId(link) === false) return 'No connection could be made because connection already exists.';
        }
        return undefined;
    };

    DataFlowEditorPage.prototype.notification = function (template, message) {
        var editor = Brightics.VA.Core.Utils.WidgetUtils.getModelEditorRef(this.$mainControl);
        editor.notification(template, message);
    };

    DataFlowEditorPage.prototype.createSetDialogFnUnitCommand = function (newFnUnit, oldFnUnit) {
        var commands = new Brightics.VA.Core.CompoundCommand(this, {label: 'Change a Function'});

        var paramCommand = new Brightics.VA.Core.Editors.Diagram.Commands.SetDialogFnUnitCommand(this, {
            fnUnit: oldFnUnit,
            ref: {param: newFnUnit.param}
        });

        var renameCommand = new Brightics.VA.Core.Editors.Diagram.Commands.RenameFnUnitCommand(this, {
            fid: newFnUnit.fid,
            name: newFnUnit.display.label,
            description: newFnUnit.display.description
        });

        commands.add(paramCommand);
        commands.add(renameCommand);

        var modelEditorRef = Brightics.VA.Core.Utils.WidgetUtils.getModelEditorRef(this.$mainControl);
        if (modelEditorRef) {
            modelEditorRef.getCommandManager().execute(commands);
        }
    };

    DataFlowEditorPage.prototype.createConfigurationCommand = function (param, fnUnit) {
        var commandOption = {
            fnUnit: fnUnit,
            ref: {param: param}
        };

        var command = new Brightics.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, commandOption);
        var modelEditorRef = Brightics.VA.Core.Utils.WidgetUtils.getModelEditorRef(this.$mainControl);
        if (modelEditorRef) {
            modelEditorRef.getCommandManager().execute(command);
        }
    };

    DataFlowEditorPage.prototype.setConnectToolItemVisible = function (visibled) {
        var connectTool = this.$tools.find('.brtc-va-editors-diagram-diagrameditorpage-function-tools-connect');
        if (!visibled) {
            connectTool.css('display', 'none');
        } else {
            connectTool.css('display', 'block');
        }
    };

    DataFlowEditorPage.prototype._findConnectableFigures = function (fromCell) {
        var connectableFigures = [];
        var _this = this;

        var connectableFids = this._getConnectableFids(fromCell.attributes.fid);

        if (fromCell.attributes.connectableFunctions) {
            connectableFids = connectableFids.filter(function (fid) {
                var fromFnUnit = _this.getFnUnitById(fid);
                return fromCell.attributes.connectableFunctions.indexOf(fromFnUnit.func) >= 0;
            });
        }

        var figure;

        var connectedCellCids = [];

        var _link = this.graph.getConnectedLinks(fromCell);

        for (let i in _link) {
            connectedCellCids.push(_link[i].getTargetElement().cid);
        }

        for (let i in connectableFids) {
            figure = this.getFigureByFnUnitId(connectableFids[i]);
            if (fromCell.attributes.connectableFunctions) {
                if (connectedCellCids.indexOf(figure.cid) < 0) {
                    connectableFigures.push(figure);
                }
            } else {
                if (figure.attributes.inputtable && connectedCellCids.indexOf(figure.cid) < 0) {
                    connectableFigures.push(figure);
                }
            }
        }

        return connectableFigures;
    };

    DataFlowEditorPage.prototype._setBehaviorModeToDefault = function () {
        if (this.behaviorMode === BEHAVIOR_DEFAULT) return;

        this.behaviorMode = BEHAVIOR_DEFAULT;
        var figures = this.graph.getElements();
        for (var i in figures) {
            figures[i].setOffShade();
        }
        this._connectableFigures = [];
        this._unhighlightAll();
    };

    DataFlowEditorPage.prototype._setBehaviorModeToLink = function () {
        if (this.behaviorMode === BEHAVIOR_LINK) return;

        this.behaviorMode = BEHAVIOR_LINK;
        var figures = this.graph.getElements();
        for (var i in figures) {
            if (figures[i] instanceof Brightics.VA.Implementation.DataFlow.Editors.Diagram.Shapes.FnUnitFigure) {
                if (!this._isConnectableCell(figures[i])) {
                    figures[i].setOnShade();
                }
            }
        }
    };

    DataFlowEditorPage.prototype._isConnectableCell = function (figure) {
        var isConnectable = false;
        for (var i in this._connectableFigures) {
            if (this._connectableFigures[i] === figure) {
                isConnectable = true;
                break;
            }
        }
        return isConnectable;
    };

    DataFlowEditorPage.prototype._isConnectableFnUnit = function (fromCell, targetCell) {

        var isConnectable = false;
        var connectableFunctions = fromCell.attributes.connectableFunctions;
        var acceptableFunctions = targetCell.attributes.acceptableFunctions;

        if (connectableFunctions) {
            var targetFnUnit = this.getFnUnitById(targetCell.attributes.fid);
            for (var i = 0; i < connectableFunctions.length; i++) {
                if (connectableFunctions[i] === targetFnUnit.func) {
                    isConnectable = true;
                    break;
                }
            }
        } else if (acceptableFunctions) {
            var fromFnUnit = this.getFnUnitById(fromCell.attributes.fid);
            isConnectable = _.indexOf(acceptableFunctions, fromFnUnit.func) >= 0;
        } else if (targetCell.attributes.inputtable) {
            isConnectable = true;
        }

        return isConnectable;
    };

    DataFlowEditorPage.prototype._unhighlightAll = function () {
        for (var i = 0; i < this._highlightedViews.length; i++) {
            this._highlightedViews[i].unhighlight();
        }
        this._highlightedViews = [];
    };

    DataFlowEditorPage.prototype._collectInnerModels = function (mainModel, model) {
        return _.reduce(
            _.map(Brightics.VA.Core.Utils.NestedFlowUtils.getAllSubModelsFromModel(
                mainModel,
                model
            ), function (innerModel) {
                var ret = {};
                ret[innerModel.mid] = innerModel;
                return ret;
            }), _.merge, {});
    };

    DataFlowEditorPage.prototype.makeTemplate = function () {
        var template = {
            functions: [],
            links: [],
            innerModels: {},
            type: 'data'
        };

        var mainModel = this.getEditor().getModel();
        var figures = this.getSelectedFigures();
        var i, j, minX = Number.MAX_VALUE, minY = Number.MAX_VALUE, kids = [];
        for (i in figures) {
            var fnUnit = this.getFnUnitById(figures[i].attributes.fid);
            minX = Math.min(minX, fnUnit.display.diagram.position.x);
            minY = Math.min(minY, fnUnit.display.diagram.position.y);
            template.functions.push($.extend(true, {}, fnUnit));
            var connection = this.graph.getConnectedLinks(figures[i]);
            for (j in connection) {
                if (kids.indexOf(connection[j].attributes.kid) < 0) {
                    kids.push(connection[j].attributes.kid);
                }
            }
        }
        for (i in template.functions) {
            template.functions[i].display.diagram.position.x -= minX;
            template.functions[i].display.diagram.position.y -= minY;
        }
        for (i in kids) {
            var linkUnit = this.getLinkUnitById(kids[i]);
            var findCount = 0;
            for (j in template.functions) {
                if (template.functions[j].fid === linkUnit[SOURCE_FID]) findCount++;
                if (template.functions[j].fid === linkUnit[TARGET_FID]) findCount++;
                if (findCount == 2) break;
            }
            if (findCount == 2) {
                template.links.push($.extend(true, {}, linkUnit));
            }
        }

        template.functions.sort(function (a, b) {
            if (a.display.diagram.position.x === b.display.diagram.position.x) {
                return a.display.diagram.position.y - b.display.diagram.position.y;
            } else {
                return a.display.diagram.position.x - b.display.diagram.position.x;
            }
        });

        template.innerModels = this._collectInnerModels(mainModel, template);

        var isProcessFn = Brightics.VA.Core.Utils.NestedFlowUtils.isProcessFunction;
        var isNotProcessFn = _.negate(isProcessFn);

        template = Brightics.VA.Core.Utils.ModelUtils.extendModel(template, true);

        var validTid = _.flatten(
            _.map(
                _.filter(template.functions, isNotProcessFn),
                (fn) => FnUnitUtils.getOutData(fn)
            )
        );

        (function removeInvalidTid(model, validTid) {
            var hash = validTid.reduce(function (acc, tid) {
                return _.merge(acc, _.set({}, tid, true));
            }, {});

            var kv = function (k, v) {
                return _.set({}, k, v);
            };
            var isValidTid = _.partial(_.has, hash);
            var filterTableByValidTid = _.partial(_.filter, _, isValidTid);
            var allOutData = [];

            model.functions = model.functions.map(function (fn) {
                if ((isNotProcessFn(fn) || !FnUnitUtils.isThirdPartyFunction(fn)) && fn[IN_DATA]) {
                    var removedIndex = _.reject(_.map(fn[IN_DATA], function (tid, idx) {
                        return isValidTid(tid) ? -1 : idx;
                    }, _.partial(_.isEqual, -1)));

                    var removeByIndex = function (tids) {
                        return _.reject(tids, function (tid, idx) {
                            return _.indexOf(removedIndex, idx) >= 0;
                        });
                    };
                    var subModels =
                        _.map(Brightics.VA.Core.Utils.NestedFlowUtils.getSubModels(model, fn), IN_DATA);

                    _.forEach(subModels, function (subModel) {
                        subModel[IN_DATA] = removeByIndex(subModel[IN_DATA]);
                    });
                    fn[IN_DATA] = removeByIndex(fn[IN_DATA]);
                } else if (isProcessFn(fn) || FnUnitUtils.isThirdPartyFunction(fn)) {
                    var _fn = _.clone(fn);
                    var int = _.clone(filterTableByValidTid(fn[IN_DATA]));
                    var outt = _.clone(filterTableByValidTid(fn[OUT_DATA]));
                    return _.merge({}, _.omit(_fn, [IN_DATA, OUT_DATA]),
                        kv(IN_DATA, int),
                        kv(OUT_DATA, outt)
                    );
                }

                allOutData = _.union(allOutData, FnUnitUtils.getOutData(fn));

                return fn;
            });

            model.functions = model.functions.map(function (fn) {
                if ((isNotProcessFn(fn) || !FnUnitUtils.isThirdPartyFunction(fn)) && FnUnitUtils.hasInput(fn) && FnUnitUtils.hasMeta(fn)) {
                    var inData = FnUnitUtils.getInData(fn);
                    for (var i in inData) {
                        var tid = inData[i];
                        var type = FnUnitUtils.getTypeByTableId(fn, tid);

                        if (_.indexOf(allOutData, tid) < 0) {
                            FnUnitUtils.removeInData(fn, type, tid);
                        }
                    }
                }
                return fn;
            });

            return model;
        }(template, validTid));
        return template;
    };

    DataFlowEditorPage.prototype.createNewFnUnitCommand = function (figure, fnUnit, dummyMainModel) {
        figure.attributes.fid = fnUnit.fid;
        var _this = this;
        var commands = [];

        if (fnUnit[FUNCTION_NAME] !== 'DataViewer' && fnUnit.skip) {
            fnUnit.skip = false;
        }

        commands.push(new Brightics.VA.Core.Editors.Diagram.Commands.NewFnUnitCommand(this, {fnUnit: fnUnit}));

        var options = (function (fnUnit) {
            var ret = [];
            if (fnUnit.func === 'if') {
                ret.push({mid: fnUnit.param.if.mid, type: fnUnit.func, conditionType: 'if'});
                ret = ret.concat(_.map(fnUnit.param.elseif, function (elseif) {
                    return {
                        mid: elseif.mid,
                        type: fnUnit.func,
                        conditionType: 'elseif'
                    };
                }));
                ret.push({
                    mid: fnUnit.param.else.mid,
                    type: fnUnit.func,
                    conditionType: 'else'
                });
            } else if (fnUnit.func === 'forLoop' ||
                fnUnit.func === 'whileLoop') {
                ret.push({
                    mid: fnUnit.param.mid,
                    type: fnUnit.func
                });
            }
            return ret;
        }(fnUnit));

        commands = commands.concat(_.flatten(_.map(options, function (opt) {
            var opts = (function () {
                if (dummyMainModel) {
                    var model = dummyMainModel.getInnerModel(opt.mid);
                    var models = Brightics.VA.Core.Utils.NestedFlowUtils
                        .getAllSubModelsFromModel(dummyMainModel, model).concat(model);
                    model[IN_DATA] = [];

                    return _.map(models, function (m) {
                        return {
                            contents: m,
                            mid: m.mid
                        };
                    });
                } else {
                    return [opt];
                }
            }());
            return _.map(opts, function (o) {
                return new Brightics.VA.Core.Editors.Diagram.Commands
                    .NewActivityCommand(_this, o);
            });
        })));

        return commands;
    };

    DataFlowEditorPage.prototype.getActivityModels = function (fnUnit) {
        var models = Brightics.VA.Core.Utils.NestedFlowUtils
            .getSubModels(this.getEditor().getModel(), fnUnit);

        return _.map(models, function (model) {
            return model.mid;
        });
    };

    DataFlowEditorPage.prototype.createRemoveFnUnitCommand = function (figure) {
        var compoundCommand = new Brightics.VA.Core.CompoundCommand(this);

        var fnUnit = this.getFnUnitById(figure.attributes.fid);
        var targetModels = this.getActivityModels(fnUnit);

        _.map(targetModels, function (mid) {
            compoundCommand.add(new Brightics.VA.Core.Editors.Diagram.Commands.RemoveActivityCommand(this, {
                mid: mid
            }));
        }.bind(this));

        compoundCommand.add(new Brightics.VA.Core.Editors.Diagram.Commands.RemoveFnUnitCommand(this, {
            fid: figure.attributes.fid
        }));

        return compoundCommand;
    };

    DataFlowEditorPage.prototype.createSetFnUnitPositionCommand = function (figure, x, y) {
        return new Brightics.VA.Core.Editors.Diagram.Commands.SetFnUnitPositionCommand(this, {
            fid: figure.attributes.fid,
            position: {x: x, y: y}
        });
    };

    DataFlowEditorPage.prototype.createShiftLeftCommand = function (figure) {
        return new Brightics.VA.Core.Editors.Diagram.Commands.ShiftLeftCommand(this, {
            fid: figure.attributes.fid
        });
    };

    DataFlowEditorPage.prototype.createShiftRightCommand = function (figure) {
        return new Brightics.VA.Core.Editors.Diagram.Commands.ShiftRightCommand(this, {
            fid: figure.attributes.fid
        });
    };

    DataFlowEditorPage.prototype.createSwitchFnUnitCommand = function (figure, fnUnit, prvFnUnit) {
        return new Brightics.VA.Core.Editors.Diagram.Commands.SwitchFnUnitCommand(this, {
            modelType: this.getModel().type,
            fid: figure.attributes.fid,
            fnUnit: fnUnit,
            prvFnUnit: prvFnUnit
        });
    };

    DataFlowEditorPage.prototype.createConnectFnUnitCommand = function (link, isMaintainIntable) {
        var commands = new Brightics.VA.Core.CompoundCommand(this, {
            label: 'Connect a Function'
        });

        var connectFnUnit = {
            kid: link.prop('kid'),
            'sourceFid': link.prop('sourceFid'),
            'targetFid': link.prop('targetFid')
        };
        if (isMaintainIntable === true) {
            connectFnUnit.isMaintainIntable = isMaintainIntable;
        }

        commands.add(new Brightics.VA.Core.Editors.Diagram.Commands.ConnectFnUnitCommand(this, connectFnUnit));
        connectFnUnit = {
            kid: link.prop('kid'),
            'sourceFid': link.prop('sourceFid'),
            'targetFid': link.prop('targetFid')
        };
        if (isMaintainIntable === true) {
            connectFnUnit.isMaintainIntable = isMaintainIntable;
        }
        return commands;
    };

    DataFlowEditorPage.prototype.createDisconnectFnUnitCommand = function (link) {
        return new Brightics.VA.Core.Editors.Diagram.Commands.DisconnectFnUnitCommand(this, {
            kid: link.prop('kid'),
            'sourceFid': link.prop('sourceFid'),
            'targetFid': link.prop('targetFid')
        });
    };

    DataFlowEditorPage.prototype.createReconnectFnUnitCommand = function (link) {
        return new Brightics.VA.Core.Editors.Diagram.Commands.ReconnectFnUnitCommand(this, {
            kid: link.prop('kid'),
            'sourceFid': link.prop('sourceFid'),
            'targetFid': link.prop('targetFid')
        });
    };

    DataFlowEditorPage.prototype.fireCommand = function (command) {
        if (command.constructor === Brightics.VA.Core.CompoundCommand) {
            if (command.commandList.length === 0) {
                return false;
            }
        }

        var editor = Brightics.VA.Core.Utils.WidgetUtils.getModelEditorRef(this.$mainControl);
        return editor.getCommandManager().execute(command);
    };

    DataFlowEditorPage.prototype.registerDebugListener = function () {
        var _this = this;
        this.debugListener = function (event, eventData) {
            var selected = _this.$mainControl.closest('.brtc-va-editor-wrapper').hasClass('selected');
            if (!selected) return;

            if (eventData.mid === _this.getModel().mid) {
                if (eventData.eventType === 'BEGIN-PROCESS'
                    && eventData.launchOptions.mode !== 'unit') {
                    _this._unselectAllElements();
                    _this.hideSelectionBox();
                    _this._triggerFnUnitSelect();
                } else if (eventData.eventType === 'BEGIN-UNIT') {
                    _this.getFigureByFnUnitId(eventData.fid);
                } else if (eventData.eventType === 'END-UNIT') {
                    _this.renderCompletedFnUnit(eventData);
                }
            }
        };

        Studio.getInstance().addDebugListener(this.debugListener);
    };

    DataFlowEditorPage.prototype.registerCommandEventListener = function () {
        var _this = this;
        var modelEditorRef = Brightics.VA.Core.Utils.WidgetUtils.getModelEditorRef(this.$mainControl);

        modelEditorRef.addCommandListener(this.onCommand.bind(_this));
    };

    DataFlowEditorPage.prototype.onCommand = function (command) {
        if (this.behaviorMode === BEHAVIOR_LINK) {
            this._setBehaviorModeToDefault();
        } else {
            this._unselectAllLinkViews();
        }
        if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.AppendNewFnUnitCommand) this.onAppendNewFnUnitCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.PrependNewFnUnitCommand) this.onPrependNewFnUnitCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.NewFnUnitCommand) this.onNewFnUnitCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.RemoveFnUnitCommand) this.onRemoveFnUnitCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.ConnectFnUnitCommand) this.onConnectFnUnitCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.DisconnectFnUnitCommand) this.onDisconnectFnUnitCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.ReconnectFnUnitCommand) this.onReconnectFnUnitCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand) this.onSetFnUnitCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand) this.onSetFnUnitCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.ChangeIntableCommand) this.onSetFnUnitCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.ChangeInputsCommand) this.onSetFnUnitCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.AddFnUnitParameterCommand) this.onSetFnUnitCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.RemoveFnUnitParameterCommand) this.onSetFnUnitCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.ReplaceFnUnitParamCommand) this.onSetFnUnitCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.SetFnUnitPositionCommand) this.onSetFnUnitPositionCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.ShiftLeftCommand) this.onShiftCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.ShiftRightCommand) this.onShiftCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.RenameFnUnitCommand) this.onRenameFnUnitCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.SetDialogFnUnitCommand) this.onSetDialogFnUnitCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.NewOptModelCommand) this.onNewOptModelCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.SetOptModelCommand) this.onSetOptModelCommand(command);
        else if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.RemoveOptModelCommand) this.onRemoveOptModelCommand(command);
        else if (command instanceof Brightics.VA.Core.CompoundCommand) this.onCompoundCommand(command);

        this.hideGuideMessage();
    };

    DataFlowEditorPage.prototype.onCompoundCommand = function (command) {
        var i;
        if (command.event.type === 'REDO' || command.event.type === 'EXECUTE') {
            for (i in command.commandList) {
                this.onCommand(command.commandList[i]);
            }
        } else if (command.event.type === 'UNDO') {
            for (i = command.commandList.length - 1; i > -1; i--) {
                this.onCommand(command.commandList[i]);
            }
        }
    };

    DataFlowEditorPage.prototype.onAppendNewFnUnitCommand = function (command) {
        this.onCompoundCommand(command);

        if (command.event.type === 'EXECUTE') {
            var figure = this.getFigureByFnUnitId(command.options.fnUnit.fid);
            this._selectElement(figure);
            this.showSelectionBox();
            this._triggerFnUnitSelect();
        }
    };

    DataFlowEditorPage.prototype.onPrependNewFnUnitCommand = function (command) {
        this.onCompoundCommand(command);

        if (command.event.type === 'EXECUTE') {
            var figure = this.getFigureByFnUnitId(command.options.fnUnit.fid);
            this._selectElement(figure);
            this.showSelectionBox();
            this._triggerFnUnitSelect();
        }
    };

    DataFlowEditorPage.prototype.onNewFnUnitCommand = function (command) {
        var figure, fnUnit;
        if (command.event.type === 'REDO' ||
            command.event.type === 'EXECUTE' && command.event.source !== this) {
            this._unselectAllElements();
            this._unselectAllLinkViews();

            fnUnit = command.options.fnUnit;
            figure = this.createFnUnitFigure(fnUnit);
            this.graph.addCells([figure]);
            this.ensureVisible(figure);

            this._selectElement(figure);
            this.showSelectionBox();
            this.showTools(figure);
            this._triggerFnUnitSelect();
        } else if (command.event.type === 'UNDO') {
            fnUnit = command.options.fnUnit;
            figure = this.getFigureByFnUnitId(fnUnit.fid);
            this._removeFigure(figure);
            this._unselectAllElements();
            this._unselectAllLinkViews();
            this.hideSelectionBox();
            this._triggerFnUnitSelect();
            this.hideTools(true);
        }
    };

    DataFlowEditorPage.prototype.onRemoveFnUnitCommand = function (command) {
        var figure, fnUnit;

        if (command.event.type === 'REDO' ||
            command.event.type === 'EXECUTE' && command.event.source !== this) {
            figure = this.getFigureByFnUnitId(command.options.fid);
            this._unselectElement(figure);
            this._removeFigure(figure);
            this.showSelectionBox();
        } else if (command.event.type === 'UNDO') {
            fnUnit = this.getFnUnitById(command.options.fid);
            figure = this.createFnUnitFigure(fnUnit);
            this.graph.addCells([figure]);
            this.showSelectionBox();

            this.fitToContent();
            this.ensureVisible(figure);
        }

        // _removeFigure에 durtaion이 설정되어 있음.
        setTimeout(function () {
            Brightics.OptModelManager.renderOptModels();
        }, 600);
    };

    DataFlowEditorPage.prototype.onConnectFnUnitCommand = function (command) {
        var link;

        if (command.event.type === 'REDO' ||
            command.event.type === 'EXECUTE' && command.event.source !== this) {

            var linkUnit = this.getLinkUnitById(command.options.kid);
            link = this.createLinkFigure(linkUnit);
            if (link) {
                this.graph.addCells([link]);
            }
        } else if (command.event.type === 'UNDO') {
            link = this.getLinkFigureByLinkUnitId(command.options.kid);
            this._removeLink(link);
        }
    };

    DataFlowEditorPage.prototype.onDisconnectFnUnitCommand = function (command) {
        var link;

        if (command.event.type === 'REDO' ||
            command.event.type === 'EXECUTE' && command.event.source !== this) {

            link = this.getLinkFigureByLinkUnitId(command.options.kid);
            this._removeLink(link);
        } else if (command.event.type === 'UNDO') {
            var linkUnit = this.getLinkUnitById(command.options.kid);
            link = this.createLinkFigure(linkUnit);
            if (link) {
                this.graph.addCells([link]);
            }
        }
    };

    DataFlowEditorPage.prototype.onReconnectFnUnitCommand = function (command) {
        var link, linkUnit, sourceFigure, targetFigure;

        if (command.event.type === 'REDO' ||
            command.event.type === 'UNDO' ||
            command.event.type === 'EXECUTE' && command.event.source !== this) {

            linkUnit = this.getModel().getLinkUnitById(command.options.kid);
            sourceFigure = this.getFigureByFnUnitId(linkUnit[SOURCE_FID]);
            targetFigure = this.getFigureByFnUnitId(linkUnit[TARGET_FID]);

            link = this.getLinkFigureByLinkUnitId(linkUnit.kid);
            link.set('source', {
                id: sourceFigure.id,
                port: OUT_PORT_ID
            });
            link.set('target', {
                id: targetFigure.id,
                port: IN_PORT_ID
            });
        }
    };

    DataFlowEditorPage.prototype.onSetFnUnitCommand = function (command) {
        var figure;

        if (command.event.type === 'REDO' ||
            command.event.type === 'UNDO') {

            figure = this.getFigureByFnUnitId(command.options.fnUnit.fid);
            if (figure) {
                this._unselectAllElements();
                this._selectElement(figure);
                this.showSelectionBox();
                this._triggerFnUnitSelect();
            }
        }
    };

    DataFlowEditorPage.prototype.onSetDialogFnUnitCommand = function (command) {
        if (command.event.type === 'REDO' ||
            command.event.type === 'UNDO') {
            //현재 아무것도 하지 않지만 뭔가를 화면에서 보여줘야 하는지?
        }
    };

    DataFlowEditorPage.prototype.onNewOptModelCommand = function (command) {
        Brightics.OptModelManager.renderOptModels();
    };

    DataFlowEditorPage.prototype.onSetOptModelCommand = function (command) {
        Brightics.OptModelManager.renderOptModels();
    };

    DataFlowEditorPage.prototype.onRemoveOptModelCommand = function (command) {
        Brightics.OptModelManager.renderOptModels();
    };

    DataFlowEditorPage.prototype.onSetFnUnitPositionCommand = function (command) {
        var figure, fnUnit;

        if (command.event.type === 'REDO' ||
            command.event.type === 'UNDO' ||
            command.event.type === 'EXECUTE' && command.event.source !== this) {

            figure = this.getFigureByFnUnitId(command.options.fid);
            fnUnit = this.getFnUnitById(command.options.fid);
            if (fnUnit) {
                figure.position(fnUnit.display.diagram.position.x, fnUnit.display.diagram.position.y);
            }
            this._rerouteLink();
            this.showSelectionBox();
        }
        Brightics.OptModelManager.renderOptModels();
    };

    DataFlowEditorPage.prototype.onShiftCommand = function (command) {
        var fid, figure, fnUnit;
        for (var i in command.options.changed) {
            fid = command.options.changed[i];
            fnUnit = this.getFnUnitById(fid);
            figure = this.getFigureByFnUnitId(fid);
            if (fnUnit && figure) {
                figure.position(fnUnit.display.diagram.position.x, fnUnit.display.diagram.position.y);
            }
        }
        this.hideSelectionBox();
        this.hideTools(true);
        this.showSelectionBox();
        Brightics.OptModelManager.renderOptModels();
    };

    DataFlowEditorPage.prototype.onRenameFnUnitCommand = function (command) {
        var figure = this.getFigureByFnUnitId(command.options.fid);
        var fnUnit = this.getFnUnitById(command.options.fid);
        if (fnUnit) {
            figure.label(fnUnit.display.label, this.options.scale);

            if (this._hasDescription(fnUnit)) figure.showToolTipIcon();
            else figure.hideToolTipIcon();
        }
    };

    DataFlowEditorPage.prototype.getFnUnitById = function (fid) {
        return this.getModel().getFnUnitById(fid);
    };

    DataFlowEditorPage.prototype.getLinkUnitById = function (kid) {
        return this.getModel().getLinkUnitById(kid);
    };

    DataFlowEditorPage.prototype.getFigureByFnUnitId = function (fid) {
        var figures = this.graph.getElements();
        for (var i in figures) {
            if (figures[i].attributes.fid === fid) {
                return figures[i];
            }
        }
        return undefined;
    };

    DataFlowEditorPage.prototype.getLinkFigureByLinkUnitId = function (kid) {
        var links = this.graph.getLinks();
        for (var i in links) {
            if (links[i].attributes.kid === kid) {
                return links[i];
            }
        }
        return undefined;
    };

    DataFlowEditorPage.prototype.getSelectedFigureElements = function () {
        return _.toArray(this.$paperElement[0]
            .querySelectorAll('.brtc-va-editors-diagram-diagrameditorpage-function-selected'));
    };

    DataFlowEditorPage.prototype.getSelectedFigures = function () {
        return this._selectedElements;
    };

    DataFlowEditorPage.prototype.getSelectedFigureIds = function () {
        return this.getSelectedFigures().map(_.property('cid')).sort();
    };

    DataFlowEditorPage.prototype.selectFunction = function (fid) {
        var _this = this;
        if (_this.behaviorMode === BEHAVIOR_LINK) _this._setBehaviorModeToDefault();
        var figure = this.getFigureByFnUnitId(fid);
        this._unselectAllElements();
        this._selectElement(figure);
        this.showSelectionBox();
        this._triggerFnUnitSelect();
        setTimeout(function () {
            _this.ensureCenter(figure);
        }, 100);
    };

    DataFlowEditorPage.prototype.isReadOnlyFigure = function (figure) {
        return (figure.attributes.attrs.category === 'brightics') ? true : false;
    };

    DataFlowEditorPage.prototype.calcGuidePosition = function (figure) {
        return this.calcGuideLocation(figure.attributes.position.x, figure.attributes.position.y);
    };

    DataFlowEditorPage.prototype.calcGuideLocation = function (x, y) {
        var gap_width = this.GAP_WIDTH || Brightics.VA.Env.Diagram.GAP_WIDTH;
        var gap_height = this.GAP_HEIGHT || Brightics.VA.Env.Diagram.GAP_HEIGHT;

        var w = (Brightics.VA.Env.Diagram.FIGURE_WIDTH + gap_width);
        var h = (Brightics.VA.Env.Diagram.FIGURE_HEIGHT + gap_height);

        var xx = x - Brightics.VA.Env.Diagram.PAPER_MARGIN_LEFT;
        var minX = Math.floor(xx / w) * w;
        if (xx > minX + w / 2) {
            xx = minX + w;
        } else {
            xx = minX;
        }
        xx += Brightics.VA.Env.Diagram.PAPER_MARGIN_LEFT;

        var yy = y - Brightics.VA.Env.Diagram.PAPER_MARGIN_TOP;
        var minY = Math.floor(yy / h) * h;
        if (yy > minY + h / 2) {
            yy = minY + h;
        } else {
            yy = minY;
        }
        yy += Brightics.VA.Env.Diagram.PAPER_MARGIN_TOP;

        return {x: xx, y: yy};
    };

    DataFlowEditorPage.prototype.showGuideBox = function (figure) {
        if (this.options.scale < 0.6) {
            this.hideGuideBox();
            return;
        }
        var pos = this.calcGuidePosition(figure);
        this.$guideBox.css({
            top: pos.y * this.options.scale,
            left: pos.x * this.options.scale,
            display: 'block'
        });
    };

    DataFlowEditorPage.prototype.updateGuideBox = function (figure) {
        var pos = this.calcGuidePosition(figure);
        this.$guideBox.css({
            top: pos.y * this.options.scale,
            left: pos.x * this.options.scale
        });
    };

    DataFlowEditorPage.prototype.hideGuideBox = function () {
        if (this.$guideBox) this.$guideBox.hide();
    };

    DataFlowEditorPage.prototype.showGuideMessage = function (figure, message) {
        if (this.options.scale < 0.6) {
            this.hideGuideMessage()
            return
        }
        var pos = {
            x: figure.attributes.position.x,
            y: figure.attributes.position.y + Brightics.VA.Env.Diagram.FIGURE_HEIGHT
        };
        this.guideMessage = message;
        this.$guideMessageBox.text(message);
        this.$guideMessageBox.css({
            top: Math.max(0, pos.y * this.options.scale),
            left: Math.max(0, pos.x * this.options.scale),
            display: 'block'
        });
    };

    DataFlowEditorPage.prototype.hideGuideMessage = function () {
        this.guideMessage = null;
        if (this.$guideMessageBox) this.$guideMessageBox.hide();
    };

    DataFlowEditorPage.prototype.renderStartedFnUnit = function (figure) {
        this.ensureCenter(figure);
    };

    DataFlowEditorPage.prototype._getRunningTime = function (runningTime) {
        let result = '(-)';
        if (typeof runningTime !== 'number' || runningTime < 0) return result;

        if (runningTime < 1000) result = (runningTime / 1000).toFixed(1) + 's';
        else if (runningTime < 10000) result = (runningTime / 1000).toFixed(1) + 's';
        else if (runningTime < 120000) result = (runningTime / 1000).toFixed(0) + 's';
        else if (runningTime < 6000000) result = (runningTime / 1000 / 60).toFixed(1) + 'm';
        else result = (runningTime / 1000 / 60 / 60).toFixed(1) + 'h';

        return '(' + result + ')';
    };

    DataFlowEditorPage.prototype.renderCompletedFnUnit = function (eventData) {
        var figure = this.getFigureByFnUnitId(eventData.fid);
        var date = eventData.end ? new Date(parseInt(eventData.end)) : Date.now();

        let runningTime = eventData.end - eventData.begin;

        if (figure) figure.lastRuntime(date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds() + this._getRunningTime(runningTime));

        var item = $.extend(true, {}, eventData);
        delete item.launchOptions;
        delete item.originalResponse;

        if (window.sessionStorage) sessionStorage.setItem(item.fid, JSON.stringify(item));
    };

    DataFlowEditorPage.prototype.render = function (_editorInput) {
        var editorInput = _editorInput || this.getModel();
        // this.$paperElement.children('.brtc-va-editors-diagram-diagrameditorpage-function-selected').remove();

        var cells = [];
        for (let i in editorInput.functions) {
            let fnUnit = editorInput.functions[i];
            let figure = this.createFnUnitFigure(fnUnit);
            if (sessionStorage) {
                var storedEventData = JSON.parse(sessionStorage.getItem(fnUnit.fid) || "{}");
                if (storedEventData && storedEventData.end) {
                    var date = new Date(parseInt(storedEventData.end));
                    let runningTime = storedEventData.end - storedEventData.begin;
                    figure.lastRuntime(date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds() + this._getRunningTime(runningTime));
                }
            }
            cells.push(figure);
        }

        var tempFigure = _.zipObject(cells.map((obj) => [obj.attributes.fid, obj]));
        for (let i in editorInput.links) {
            let linkUnit = editorInput.links[i];
            let sFid = linkUnit[SOURCE_FID];
            let tFid = linkUnit[TARGET_FID];
            let linkFigure = this.createLinkFigure(linkUnit, tempFigure[sFid], tempFigure[tFid]);
            if (linkFigure) {
                cells.push(linkFigure);
            }
        }
        this.graph.resetCells(cells);

        this.fitToContent();
    };

    DataFlowEditorPage.prototype.findError = function (problems) {
        var _this = this;
        var errorIds = [];
        var errorFigures = [];
        var tmpProblems = [];

        if (problems) {
            tmpProblems = (problems.constructor === Array) ? problems : [problems];
            $.each(tmpProblems, function (index, element) {
                var figure = _this.getFigureByFnUnitId(element.fid);
                if ($.inArray(element.fid, errorIds) < 0) {
                    if (figure) {
                        errorIds.push(element.fid);
                        errorFigures.push(figure);
                    }
                }
            });
        }
        return errorFigures;
    };

    DataFlowEditorPage.prototype.onActivated = function () {
        // var links = this.graph.getLinks();
        // $.each(links, function (index, link) {
        //     link.remove();
        // });

        // var _this = this;
        // setTimeout(function () {
        //     for (var i in _this.getModel().links) {
        //         var linkUnit = _this.getModel().links[i];
        //         var linkFigure = _this.createLinkFigure(linkUnit);
        //         if (linkFigure) {
        //             _this.graph.addCells([linkFigure]);
        //         }
        //     }
        //     links = _this.graph.getLinks();
        //     $.each(links, function (index, link) {
        //         link.toBack();
        //     });
        // }, 400);
    };

    DataFlowEditorPage.prototype.getPaperSize = function () {
        var size = {};

        var box = this.graph.getBBox(this.graph.getElements());
        if (box) {
            size.width = (box.x + box.width) + 900;
            size.width = size.width + (900 - size.width % 900);
            size.width = Math.max(size.width, this.$mainControl.width());

            size.height = (box.y + box.height) + 50;
            size.height = size.height + (50 - size.height % 50);
            size.height = Math.max(size.height, this.$mainControl.height() - 4);
        } else {
            size.width = this.$mainControl.width();
            size.height = this.$mainControl.height() - 4;
        }

        return size;
    };

    DataFlowEditorPage.prototype.fitToContent = function () {
        // var size = this.getPaperSize();
        // var width = size.width;
        // var height = size.height;

        // this.paper.setDimensions(width, height);

        this.paper.fitToContent({
            gridWidth: 10,
            gridHeight: 10,
            padding: {top: 0, right: 900, bottom: 700, left: 0},
            minWidth: 1840,
            minHeight: 830,
        });

        this.updateMiniMapWindow();

        this.$mainControl.perfectScrollbar('update');
    };

    DataFlowEditorPage.prototype.updateMiniMapWindow = function () {
        this.minimap.updateMiniMapWindow();
    };

    DataFlowEditorPage.prototype.checkInputtable = function (fnUnit) {
        return (FnUnitUtils.getTotalInRangeCount(fnUnit).min > 0)
            ? true : FnUnitUtils.isBluffNode(fnUnit);
    };

    DataFlowEditorPage.prototype.createFnUnitFigure = function (fnUnit) {
        var clazz = this.getModel().type;

        var figure = new Brightics.VA.Implementation.DataFlow.Editors.Diagram.Shapes.FnUnitFigure({
            colorSet: this.options.editor.getColorSet(),
            position: fnUnit.display.diagram.position,
            fid: fnUnit.fid,
            inputtable: FnUnitUtils.isInputtable(fnUnit),
            outputtable: FnUnitUtils.isOutputtable(fnUnit),
            connectableFunctions: Brightics.VA.Core.Utils.WidgetUtils.getFunctionLibrary(clazz, fnUnit.func)['connectable-functions'],
            acceptableFunctions: Brightics.VA.Core.Utils.WidgetUtils.getFunctionLibrary(clazz, fnUnit.func)['acceptable-functions']
        });
        figure.label(fnUnit.display.label, this.options.scale);

        var funcDef = Brightics.VA.Core.Utils.WidgetUtils.getFunctionLibrary(clazz, fnUnit.func);
        if (funcDef) {
            figure.category(funcDef);
            if (funcDef.deprecated) {
                figure.setDeprecated(funcDef['deprecated-message']);
            }
        }

        if (this._hasDescription(fnUnit)) figure.showToolTipIcon();
        else figure.hideToolTipIcon();

        return figure;
    };

    DataFlowEditorPage.prototype._hasDescription = function (fnUnit) {
        return (fnUnit.display.description && fnUnit.display.description !== '' && fnUnit.display.description && fnUnit.display.description !== '<p><br></p>');
    };

    DataFlowEditorPage.prototype.createLinkFigure = function (linkUnit, sourceFigureP, targetFigureP) {
        var sourceFigure = sourceFigureP || this.getFigureByFnUnitId(linkUnit[SOURCE_FID]);
        var targetFigure = targetFigureP || this.getFigureByFnUnitId(linkUnit[TARGET_FID]);

        if (sourceFigure && targetFigure) {
            var link = new Brightics.VA.Implementation.DataFlow.Editors.Diagram.Shapes.LinkFigure({
                source: {
                    id: sourceFigure.id,
                    port: OUT_PORT_ID
                },
                target: {
                    id: targetFigure.id,
                    port: IN_PORT_ID
                },
                kid: linkUnit.kid,
                sourceFid: linkUnit[SOURCE_FID],
                targetFid: linkUnit[TARGET_FID]
            });
            return link;
        }
        return undefined;
    };

    DataFlowEditorPage.prototype._createLinkFigure = function (kid, sourceFigure, targetFigure) {
        var opt = {
            source: {
                id: sourceFigure.id,
                port: OUT_PORT_ID
            },
            target: {
                id: targetFigure.id,
                port: IN_PORT_ID
            },
            kid: kid,
        };
        if (sourceFigure.prop) {
            opt.sourceFid = sourceFigure.prop('fid');
        }
        if (targetFigure.prop) {
            opt.targetFid = targetFigure.prop('fid');
        }

        if (sourceFigure.x && sourceFigure.y) {
            opt.source = {
                x: sourceFigure.x,
                y: sourceFigure.y
            };
        }
        if (targetFigure.x && targetFigure.y) {
            opt.target = {
                x: targetFigure.x,
                y: targetFigure.y
            };
        }

        var link = new Brightics.VA.Implementation.DataFlow.Editors.Diagram.Shapes.LinkFigure(opt);
        return link;
    };

    DataFlowEditorPage.prototype.addLinkTools = function (linkView) {
        var SourceArrowhead = joint.linkTools.SourceArrowhead.extend({
            tagName: 'circle',
            attributes: {
                'cx': 4,
                'r': 8,
                'fill': '#8993DE',
                'stroke': '#8993DE',
                'stroke-width': 1,
                'cursor': 'move'
            }
        });

        var TargetArrowhead = joint.linkTools.TargetArrowhead.extend({
            tagName: 'circle',
            attributes: {
                'cx': -8,
                'r': 8,
                'fill': '#8993DE',
                'stroke': '#8993DE',
                'stroke-width': 1,
                'cursor': 'move'
            }
        });

        var Remove = joint.linkTools.Remove.extend({
            children: [{
                tagName: 'circle',
                selector: 'button',
                attributes: {
                    'r': 9,
                    'fill': '#f6f6f6',
                    'stroke': '#8993DE',
                    'stroke-width': 2,
                    'cursor': 'pointer'
                }
            }, {
                tagName: 'path',
                selector: 'icon',
                attributes: {
                    'd': 'M -4 -4 4 4 M -4 4 4 -4',
                    'fill': 'none',
                    'stroke': '#5755a1',
                    'stroke-width': 4,
                    'pointer-events': 'none'
                }
            }],
        })

        var sourceArrowheadTool = new SourceArrowhead();
        var targetArrowheadTool = new TargetArrowhead();
        var tools = [sourceArrowheadTool, targetArrowheadTool];
        if (linkView.getConnectionLength() > 100) {
            var startPointRemoveButton = new Remove({distance: 33});
            var endPointRemoveButton = new Remove({distance: linkView.getConnectionLength() - 38});
            tools.push(startPointRemoveButton);
            tools.push(endPointRemoveButton);
        } else {
            var removeButton = new Remove({distance: '50%'});
            tools.push(removeButton);
        }
        var toolsView = new joint.dia.ToolsView({tools: tools});
        linkView.addTools(toolsView);
        linkView.showTools();
    };

    DataFlowEditorPage.prototype.showTools = function (figure) {
        var _this = this;
        if (this.options.scale < 0.6) {
            this.hideTools();
            return;
        }

        var pos = figure.attributes.position;
        if (pos && figure instanceof Brightics.VA.Implementation.DataFlow.Editors.Diagram.Shapes.FnUnitFigure && !figure.attributes.dummy) {
            this.clearHideToolsTimer();
            this.clearShowToolsTimer();
            this.showToolsTimer = setTimeout(function () {
                var fid = figure.attributes.fid;

                var fnUnit = _this.options.editor.getActiveModel().getFnUnitById(fid);
                if (!fnUnit) return;

                _this.$tools.attr('has-model',
                    _this.hasModel(figure.attributes.attrs.category, fnUnit));
                _this.$tools.attr('cid', figure.cid);
                _this.$tools.attr('category', figure.attributes.attrs.category);
                _this.$tools.attr('select', figure.attributes.attrs['.brtc-va-outer'].fill !== '#FFFFFF');
                _this.$tools.css({
                    top: pos.y * _this.options.scale,
                    left: pos.x * _this.options.scale,
                    display: 'block'
                });
            }, 50);
        }
        this.setConnectToolItemVisible(figure.attributes.outputtable);
    };

    DataFlowEditorPage.prototype.updateToolsPosition = function (figure) {
        var _this = this;
        var pos = figure.attributes.position;
        this.$tools.css({
            top: pos.y * _this.options.scale,
            left: pos.x * _this.options.scale
        });
    };

    DataFlowEditorPage.prototype.clearShowToolsTimer = function () {
        if (this.showToolsTimer) {
            clearTimeout(this.showToolsTimer);
            this.showToolsTimer = null;
        }
    };

    DataFlowEditorPage.prototype.hideTools = function (immediately) {
        var _this = this;
        if (this.$tools) {
            if (immediately) {
                Brightics.OptModelManager.renderOptModels(_this);
                this.$tools.hide();
            } else {
                this.clearShowToolsTimer();
                this.clearHideToolsTimer();
                this.hideToolsTimer = setTimeout(function () {
                    Brightics.OptModelManager.renderOptModels(_this);
                    _this.$tools.hide();
                }, 200);
            }
        }
    };

    DataFlowEditorPage.prototype.clearHideToolsTimer = function () {
        if (this.hideToolsTimer) {
            clearTimeout(this.hideToolsTimer);
            this.hideToolsTimer = null;
        }
    };

    DataFlowEditorPage.prototype.showToolTip = function (figure) {
        if (this.options.scale < 0.6) {
            this.hideToolTip();
            return;
        }

        var _this = this;
        var labelColor;
        var clazz = this.getModel().type;
        var pos = figure.attributes.position;
        if (pos && figure instanceof Brightics.VA.Implementation.DataFlow.Editors.Diagram.Shapes.FnUnitFigure &&
            !figure.attributes.dummy && this.getEditor().getEditorState(TOOLTIP_ENABLED)) {
            var fnUnit = _this.getFnUnitById(figure.attributes.fid);
            var funcDef = Brightics.VA.Core.Utils.WidgetUtils.getFunctionLibrary(clazz, fnUnit.func);
            labelColor = figure.getColor();
            _this.$toolTip.empty();
            var $tooltipHeaderFunc = $('' +
                '<div class="brtc-va-editors-diagram-diagrameditorpage-function-tooltip-header-func">' +
                '   <label class="brtc-va-editors-diagram-diagrameditorpage-function-tooltip-header-func-label" style="background-color:' + labelColor + '"></label>' +
                '</div>');
            if (funcDef.category === 'udf') {
                $tooltipHeaderFunc.find('.brtc-va-editors-diagram-diagrameditorpage-function-tooltip-header-func-label').text('UDF');
            } else {
                $tooltipHeaderFunc.find('.brtc-va-editors-diagram-diagrameditorpage-function-tooltip-header-func-label').text(funcDef.defaultFnUnit.display.label);
            }
            _this.$toolTip.append($tooltipHeaderFunc);
            var $tooltipHeader = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tooltip-header"><p></p></div>');
            $tooltipHeader.find('p').text(fnUnit.display.label);
            _this.$toolTip.append($tooltipHeader);

            _this.$toolTip.addClass('brtc-va-editors-visible');
            _this.$toolTip.css({
                top: (pos.y + Brightics.VA.Env.Diagram.FIGURE_HEIGHT) * _this.options.scale,
                left: (pos.x) * _this.options.scale
            });
            var $container, $contents, $editButton;
            if (_this._hasDescription(fnUnit)) {
                $container = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tooltip-contents-container"></div>');
                $contents = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tooltip-contents">' + fnUnit.display.description + '</div>');
                $editButton = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tooltip-contents-edit"></div>');
                _this.$toolTip.append($container);
                $container.append($contents);
                $container.append($editButton);
                $contents.perfectScrollbar();
            } else {
                $container = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tooltip-contents-empty-container"></div>');
                $editButton = $('<div class="brtc-va-editors-diagram-diagrameditorpage-function-tooltip-contents-edit"></div>');
                _this.$toolTip.append($container);
                $container.append($editButton);
                $container.append($editButton);
            }
            $editButton.click(function (event) {
                var dialogOptions = {
                    title: 'Edit Function',
                    label: fnUnit.display.label,
                    description: fnUnit.display.description || '',
                    close: function (dialogResult) {
                        if (dialogResult.OK) {
                            _this.doEditFunction(fnUnit.fid, dialogResult.label, dialogResult.description);
                        }
                    }
                };
                new Brightics.VA.Core.Dialogs.EditResourceDialog(_this.$mainControl, dialogOptions);
            });
        }
    };

    DataFlowEditorPage.prototype.hideToolTip = function () {
        if (this.$toolTip) this.$toolTip.removeClass('brtc-va-editors-visible');
    };

    DataFlowEditorPage.prototype.doEditFunction = function (fid, label, description) {
        var command = new Brightics.VA.Core.Editors.Diagram.Commands.RenameFnUnitCommand(this, {
            fid: fid,
            name: label,
            description: description
        });
        this.fireCommand(command);
    };

    DataFlowEditorPage.prototype.removeFnUnitFigure = function (figure) {
        var activeModelEditor = Studio.getEditorContainer().getActiveModelEditor();
        var pid = activeModelEditor.getEditorInput().getProjectId();
        var mid = activeModelEditor.getEditorInput().getFileId();

        var fnUnit = this.getFnUnitById(figure.attributes.fid);
        var label = fnUnit.display.label;
        this.notification('success', 'The function [' + label + '] was removed.');

        var commands = new Brightics.VA.Core.CompoundCommand(this, {
            label: 'Remove a Function'
        });

        // Unbind Global Parameter
        for (var paramKey in fnUnit.param) {
            var variable = fnUnit.parent().getVariable(fnUnit.fid, paramKey);
            if (variable) {
                commands.add(new Brightics.VA.Core.Editors.Diagram.Commands.UnBindVariableCommand(this, {
                    fid: fnUnit.fid,
                    paramKey: paramKey,
                    variable: variable
                }));
            }
        }

        var links = this.graph.getConnectedLinks(figure);
        for (var i in links) {
            this._removeLink(links[i]);
            commands.add(this.createDisconnectFnUnitCommand(links[i]));
        }

        this._removeFigure(figure);
        commands.add(this.createRemoveFnUnitCommand(figure));
        commands.add(this.createRemoveConnectedOutDataCommand([figure]));

        var targetOptModelId = Brightics.OptModelManager.getTargetOptModelId(pid, mid, fnUnit.fid);
        if (targetOptModelId) {
            commands.add(Brightics.OptModelManager.createRemoveOptModelCommand(pid, mid, targetOptModelId));
        }

        this.fireCommand(commands);
    };

    DataFlowEditorPage.prototype.removeFnUnitFigures = function (figures) {
        var activeModelEditor = Studio.getEditorContainer().getActiveModelEditor();
        var pid = activeModelEditor.getEditorInput().getProjectId();
        var mid = activeModelEditor.getEditorInput().getFileId();

        var commands = new Brightics.VA.Core.CompoundCommand(this, {
            label: 'Remove functions'
        });

        var fnUnit;
        var fnUnits = [];
        var links = [], linkIds = [];
        var i, j;
        for (i in figures) {
            fnUnit = this.getFnUnitById(figures[i].attributes.fid);
            fnUnits.push(fnUnit);

            var connection = this.graph.getConnectedLinks(figures[i]);
            for (j in connection) {
                if (linkIds.indexOf(connection[j].attributes.kid) < 0) {
                    linkIds.push(connection[j].attributes.kid);
                    links.push(connection[j]);
                }
            }
        }

        // Remove LinkUnit
        for (i in links) {
            this._removeLink(links[i]);
            commands.add(this.createDisconnectFnUnitCommand(links[i]));
        }

        // Remove FnUnit
        var targetOptModelIds = {};
        for (i in figures) {
            figures[i].remove();
            commands.add(this.createRemoveFnUnitCommand(figures[i]));

            // Unbind Global Parameter
            var variables = fnUnits[i].parent().getVariables(fnUnits[i].fid);
            for (var key in variables) {
                commands.add(new Brightics.VA.Core.Editors.Diagram.Commands.UnBindVariableCommand(this, {
                    fid: fnUnits[i].fid,
                    paramKey: key,
                    variable: variables[key]
                }));
            }

            var targetOptModelId = Brightics.OptModelManager.getTargetOptModelId(pid, mid, fnUnits[i].fid);
            if (targetOptModelId) {
                targetOptModelIds[targetOptModelId] = true;
            }
        }

        for (var optId in targetOptModelIds) {
            commands.add(Brightics.OptModelManager.createRemoveOptModelCommand(pid, mid, optId));
        }

        commands.add(this.createRemoveConnectedOutDataCommand(figures));

        this.notification('success', figures.length + ' functions were removed.');
        this.fireCommand(commands);
    };

    DataFlowEditorPage.prototype.removeFnUnitLink = function (figure) {
        var links = this.graph.getConnectedLinks(figure);
        if (links.length > 0) {
            var fnUnit = this.getFnUnitById(figure.attributes.fid);
            var label = fnUnit.display.label;
            this.notification('success', 'All associated connections to [' + label + '] was removed.');

            var commands = new Brightics.VA.Core.CompoundCommand(this, {});
            for (var i in links) {
                this._removeLink(links[i]);
                commands.add(this.createDisconnectFnUnitCommand(links[i]));
            }
            this.fireCommand(commands);
        } else {
            this.notification('info', 'Already removed all the associated connections to the function');
        }
    };

    DataFlowEditorPage.prototype._removeFigure = function (figure) {
        if (figure) {
            var transition = {
                duration: 200,
                timingFunction: joint.util.timing.inout,
                valueFunction: function (a, b) {
                    return function (t) {
                        return 1 - (b + t);
                    };
                }
            };
            figure.on('transition:end', function () {
                figure.remove();
            });
            figure.transition('attrs/rect.outer/opacity', 0.2, transition);
            figure.transition('attrs/text/opacity', 0.2, transition);
            figure.attributes.dummy = true;

            if (figure.cid === this.$tools.attr('cid')) {
                this.hideTools(true);
            }
        }
    };

    DataFlowEditorPage.prototype._revertPosition = function (figure) {
        var revert = this.getFnUnitById(figure.attributes.fid).display.diagram.position;
        var pos = figure.position();
        if (revert.x !== pos.x || revert.y !== pos.y) {
            figure.position(revert.x, revert.y);
        }
    };

    DataFlowEditorPage.prototype._revertLink = function (link) {
        var linkUnit = this.getLinkUnitById(link.attributes.kid);
        var sourceFigure = this.getFigureByFnUnitId(linkUnit[SOURCE_FID]);
        var targetFigure = this.getFigureByFnUnitId(linkUnit[TARGET_FID]);
        link.set({
            'source': {id: sourceFigure.id, port: OUT_PORT_ID},
            'target': {id: targetFigure.id, port: IN_PORT_ID},
            'sourceFid': sourceFigure.prop('fid'),
            'targetFid': targetFigure.prop('fid'),
        });
    };

    DataFlowEditorPage.prototype._removeLink = function (link) {
        if (link) {
            var transition = {
                duration: 200,
                timingFunction: joint.util.timing.inout,
                valueFunction: function (a, b) {
                    return function (t) {
                        return 1 - (b + t);
                    };
                }
            };
            link.on('transition:end', function () {
                link.remove();
            });
            link.transition('attrs/path/opacity', 0.2, transition);
        }
    };

    DataFlowEditorPage.prototype.connectSmartly = function (figure) {
        var links = [], linkUnit,
            inLink, outLink;
        var x = figure.attributes.position.x;
        var y = figure.attributes.position.y;
        var gap_width = this.GAP_WIDTH || Brightics.VA.Env.Diagram.GAP_WIDTH;

        var prev = this.graph.findModelsFromPoint({
            x: x - gap_width,
            y: y
        });
        var next = this.graph.findModelsFromPoint({
            x: x + Brightics.VA.Env.Diagram.FIGURE_WIDTH + gap_width,
            y: y
        });

        var inbounds = this.graph.getConnectedLinks(figure, {inbound: true});
        if (inbounds.length === 0 && prev.length > 0 && !prev[0].attributes.connectableFunctions && figure.attributes.inputtable && prev[0].attributes.outputtable && (prev[0].attributes.position.y === y)) {
            linkUnit = {
                kid: Brightics.VA.Core.Utils.IDGenerator.link.id(),
                'sourceFid': prev[0].attributes.fid,
                'targetFid': figure.attributes.fid
            };
            inLink = this.createLinkFigure(linkUnit);
            if (inLink) {
                links.push(inLink);
            }
        }
        var outbounds = this.graph.getConnectedLinks(figure, {outbound: true});
        if (!figure.attributes.connectableFunctions && outbounds.length === 0 && next.length > 0 && next[0].attributes.inputtable && figure.attributes.outputtable && (next[0].attributes.position.y === y)) {
            linkUnit = {
                kid: Brightics.VA.Core.Utils.IDGenerator.link.id(),
                'sourceFid': figure.attributes.fid,
                'targetFid': next[0].attributes.fid
            };
            outLink = this.createLinkFigure(linkUnit);
            if (outLink) {
                links.push(outLink);
            }
        }

        if (links.length) {
            this.graph.addCells(links);
        }

        return links;
    };

    DataFlowEditorPage.prototype.checkOverPosition = function (figure) {
        var pos = this.calcGuidePosition(figure);
        var models = this.graph.findModelsFromPoint(pos);
        for (var i in models) {
            if (models[i] !== figure) {
                if (models[i].position().x === pos.x && models[i].position().y === pos.y) {
                    return false;
                }
            }
        }
        return true;
    };

    DataFlowEditorPage.prototype.checkPreviousPosition = function (figure) {
        var pos = this.calcGuidePosition(figure);
        var inLinks = this.graph.getConnectedLinks(figure, {inbound: true});
        for (var i in inLinks) {
            if (inLinks[i].getSourceElement().position().x >= pos.x) {
                return false;
            }
        }

        return true;
    };

    DataFlowEditorPage.prototype.checkNextPosition = function (figure) {
        var pos = this.calcGuidePosition(figure);
        var outLinks = this.graph.getConnectedLinks(figure, {outbound: true});
        for (var i in outLinks) {
            if (outLinks[i].getTargetElement().position().x <= pos.x) {
                return false;
            }
        }

        return true;
    };

    DataFlowEditorPage.prototype.checkOutRangePosition = function (figure) {
        var pos = this.calcGuidePosition(figure);
        return pos.x > 0 && pos.y > 0;
    };

    DataFlowEditorPage.prototype.checkConnectedLink = function (link) {
        return link.getSourceElement() != null && link.getTargetElement() != null;
    };

    DataFlowEditorPage.prototype.checkLoopLink = function (link) {
        var sourceFid = link.prop('sourceFid');
        var targetFid = link.prop('targetFid');
        return this._getConnectableFids(sourceFid).indexOf(targetFid) >= 0;
    };

    DataFlowEditorPage.prototype._getConnectableFids = function (startFid) {
        var _this = this;
        var links = this.options.editor.getActiveModel().links;
        var fids = [];

        this.options.editor.getActiveModel().functions.forEach(function (a) {
            fids.push(a.fid)
        });

        var reverseLinks = {};
        var n = fids.length;
        var m = links.length;
        var i;
        for (i = 0; i < n; i++) {
            reverseLinks[fids[i]] = [];
        }
        for (i = 0; i < m; i++) {
            reverseLinks[links[i]['targetFid']].push(links[i]['sourceFid']);
        }

        var visited = {};
        var dfs = function (cur) {
            visited[cur] = true;
            for (var i = 0; i < reverseLinks[cur].length; i++) {
                var nxt = reverseLinks[cur][i];
                if (!visited[nxt]) {
                    dfs(nxt);
                }
            }
        };

        dfs(startFid);

        var result = [];
        for (i = 0; i < n; i++) {
            if (!visited[fids[i]]) {
                result.push(fids[i]);
            }
        }

        var fnS = this.getFnUnitById(startFid);
        result = result.filter(function (fid) {
            var fnT = _this.getFnUnitById(fid);
            var defT = Brightics.VA.Core.Utils.WidgetUtils.getFunctionLibrary('data', fnT.func);
            return !defT['acceptable-functions'] ||
                defT['acceptable-functions'].indexOf(fnS.func) >= 0;
        });
        return result;
    };

    DataFlowEditorPage.prototype.checkLinkPosition = function (link) {
        var sourceElement = link.getSourceElement();
        var targetElement = link.getTargetElement();
        if (typeof sourceElement.position === 'function' && typeof targetElement.position === 'function') {
            var sourcePos = sourceElement.position();
            var targetPos = targetElement.position();
            return targetPos.x > sourcePos.x;
        } else {
            return true;
        }
    };

    DataFlowEditorPage.prototype.checkAlreadyExistLink = function (link) {
        var sourceFid = link.prop('sourceFid');
        var targetFid = link.prop('targetFid');
        var links = this.getModel().links;
        for (var i = 0; i < links.length; i++) {
            if (links[i][SOURCE_FID] === sourceFid && links[i][TARGET_FID] === targetFid) return false;
        }
        return true;
    };

    DataFlowEditorPage.prototype.checkAlreadyExistLinkByTableId = function (link) {
        var sourceFid = link.prop('sourceFid');
        var targetFid = link.prop('targetFid');

        var sourceFnUnit = this.getFnUnitById(sourceFid);
        var targetFnUnit = this.getFnUnitById(targetFid);

        var sourceOutData = FnUnitUtils.getOutData(sourceFnUnit);
        var targetInData = FnUnitUtils.getInData(targetFnUnit);

        for (var sourceIndex in sourceOutData) {
            if (targetInData && targetInData.indexOf(sourceOutData[sourceIndex]) > -1) return false;
        }

        return true;
    };

    DataFlowEditorPage.prototype.registerGoHistoryEventListener = function () {
        var _this = this;
        var modelEditorRef = Brightics.VA.Core.Utils.WidgetUtils.getModelEditorRef(this.$mainControl);
        this.onGoHistoryCommand = function (command) {
            _this.hideSelectionBox();
            _this._triggerFnUnitSelect();
            _this.render();

            var errorIds = [];
            var errorFigures = [];
            for (var j in _this.problems) {
                if (errorIds[_this.problems[j].fid] === undefined) {
                    errorIds.push(_this.problems[j].fid);
                    errorFigures.push(_this.getFigureByFnUnitId(_this.problems[j].fid));
                }
            }
            _this.hideErrorBox();
            _this.showErrorBox(errorFigures);
        };

        modelEditorRef.addGoHistoryListener(this.onGoHistoryCommand);
    };

    DataFlowEditorPage.prototype.updateStatus = function (event) {
        var figure = this.getFigureByFnUnitId(event.fid);
        if (figure) figure.updateStatus(event.status);
    };

    DataFlowEditorPage.prototype.destroy = function () {
        Studio.getInstance().removeProblemListener(this.problemsListener);
        Studio.getInstance().removeDebugListener(this.debugListener);
    };

    DataFlowEditorPage.prototype.setModel = function (model) {
        this.render();
        this.hideAdditionalItems();
    };

    DataFlowEditorPage.prototype.hideAdditionalItems = function (model) {
        this.hideValidationToolTip();
        this.hideSelectionBox();
        this.hideErrorBox();
        this.hideGuideBox();
        this.hideGuideMessage();
        this.hideTools(true);
        this.hideToolTip();
    };

    DataFlowEditorPage.prototype.createNewActivityCommand = function (fnUnit) {
        var options = Brightics.VA.Core.Utils.NestedFlowUtils.getNewActivityCommandOptions(fnUnit);
        return _.map(options, function (opt) {
            return new Brightics.VA.Core.Editors.Diagram.Commands.NewActivityCommand(this, opt);
        }.bind(this));
    };

    DataFlowEditorPage.prototype.createRemoveConnectedOutDataCommand = function (figures) {
        var _this = this;
        var commands = [];
        var indices = [];
        var activeModel = this.getEditor().getActiveModel();
        _.forEach(figures, function (figure) {
            var fnUnit = _this.getFnUnitById(figure.attributes.fid);
            var outData = FnUnitUtils.getOutData(fnUnit);

            for (var i = 0; outData && i < outData.length; i++) {
                var index = _.indexOf(activeModel[OUT_DATA], outData[i]);
                if (index > -1) {
                    indices.push(index);
                }
            }
        });

        indices.sort(function (a, b) {
            return b - a;
        });

        for (var i = 0; i < indices.length; i++) {
            commands.push(new Brightics.VA.Core.Editors.Diagram.Commands.RemoveOperationCommand(
                this,
                {
                    target: activeModel,
                    path: [OUT_DATA, indices[i]]
                }
            ));
        }

        if (this.isNestedFlow()) {
            var nextFnUnitOutTableSize =
                Brightics.VA.Core.Utils.NestedFlowUtils.calcNextFnUnitOutTableSize(
                    this.getEditor().getModel(),
                    this.getEditor().getActiveFnUnit(),
                    activeModel.mid,
                    -indices.length);

            commands.push(Brightics.VA.Core.Utils.NestedFlowUtils.createAdjustOutTableCommand(
                this,
                this.getEditor().getModel(),
                this.getEditor().getActiveFnUnit(),
                nextFnUnitOutTableSize
            ));
        }
        return _.flatten(commands);
    };

    DataFlowEditorPage.prototype.getEditorInput = function () {
        return this.getEditor().getEditorInput();
    };

    DataFlowEditorPage.prototype.getEditor = function () {
        return this.options.editor;
    };

    DataFlowEditorPage.prototype.getModel = function () {
        return this.options.editor.getActiveModel();
    };

    DataFlowEditorPage.prototype.isNestedFlow = function () {
        var activeFnUnit = this.getEditor().getActiveFnUnit();
        return activeFnUnit &&
            (activeFnUnit.func === 'if' ||
                activeFnUnit.func === 'forLoop' ||
                activeFnUnit.func === 'whileLoop');
    };

    DataFlowEditorPage.prototype.getOptions = function () {
        return this.options;
    };

    DataFlowEditorPage.prototype.hasModel = function (categoty, fnUnit) {
        var categoryArr = ['process', 'control'];

        return (categoryArr.indexOf(categoty) > -1 &&
            fnUnit[FUNCTION_NAME] !== 'Flow') ? true : false;
    };

    DataFlowEditorPage.prototype.changeCursor = function (model, cursor) {
        var clazz = [
            'brtc-style-cursor-pointer',
            'brtc-style-cursor-move'
        ];
        var view = V(this.paper.findViewByModel(model).el);
        clazz.forEach(function (cl) {
            view.removeClass(cl, false);
        });

        if (cursor === 'pointer') {
            view.addClass('brtc-style-cursor-pointer', true);
        } else if (cursor === 'move') {
            view.addClass('brtc-style-cursor-move', true);
        }
    };

    DataFlowEditorPage.prototype.ensureCenterByFnUnit = function (fnUnit) {
        var figure = this.getFigureByFnUnitId(fnUnit.fid);
        this.ensureCenter(figure);
    };

    DataFlowEditorPage.prototype.refresh = function () {
        var figures = this.graph.getElements();
        for (var i in figures) {
            figures[i].refresh();
        }
    };


    Brightics.VA.Implementation.DataFlow.Editors.Diagram.EditorPage = DataFlowEditorPage;
    /* eslint-disable no-invalid-this */

}).call(this);
/**
 * Created by jmk09.jung on 2016-02-03.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    function PanelFactory() {
    }

    PanelFactory.prototype = Object.create(Brightics.VA.Core.Editors.Sheet.PanelFactory.prototype);
    PanelFactory.prototype.constructor = PanelFactory;

    PanelFactory.prototype.createInDataPanel = function ($parent, options) {
        if (options.fnUnit[IN_DATA]) {
            options.title = options.title || 'In';
            options.resizable = options.fnUnit[OUT_DATA] ? true : false;

            var func = options.fnUnit.func;
            var DataPanel = Brightics.VA.Core.Editors.Sheet.Panels.DataPanel;
            
            // in과 out 구분을 DataPanel 내부에서 하고 있어서, export는 in panel만 있는 상태에서 if로 구분하였음.. 
            // TODO: InDataPanel, OutDataPanel 클래스를 따로 구현해야 할듯.
            if (func === 'export') {
                DataPanel = Brightics.VA.Implementation.DataFlow.Functions[func].DataPanel;
            }
            return new DataPanel($parent, options);
        }
    };

    PanelFactory.prototype.createOutDataPanel = function ($parent, options) {
        if (options.fnUnit[OUT_DATA]) {
            options.title = options.title || 'Out';
            options.resizable = options.fnUnit[IN_DATA] ? true : false;
            var func = options.fnUnit.func;
            var DataPanel = Brightics.VA.Implementation.DataFlow.Functions[func].DataPanel || Brightics.VA.Core.Editors.Sheet.Panels.DataPanel;    

            if (func === 'eDA') {
                DataPanel = Brightics.VA.Implementation.DataFlow.Functions[func].DataPanel;
            }
            
            return new DataPanel($parent, options);
        }
    };

    Brightics.VA.Implementation.DataFlow.Editors.Sheet.PanelFactory = PanelFactory;

}).call(this);
/**
 * Created by SDS on 2017-10-11.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    function EDAOutPanel(parentId, options) {
        this.colorSet = [
            '#FD026C', '#4682B8', '#A5D22D', '#F5CC0A', '#FE8C01', '#6B9494', '#B97C46',
            '#84ACD0', '#C2E173', '#F9DD5B', '#FE569D', '#FEB356', '#9CB8B8', '#D0A884',
            '#2E6072', '#6D8C1E', '#A48806', '#A90148', '#A95E01', '#476363', '#7B532F'
        ];

        Brightics.VA.Core.Editors.Sheet.Panels.DataPanel.call(this, parentId, options);
        this._queryTable();
    }

    EDAOutPanel.prototype = Object.create(Brightics.VA.Core.Editors.Sheet.Panels.DataPanel.prototype);
    EDAOutPanel.prototype.constructor = EDAOutPanel;

    EDAOutPanel.prototype.destroy = function () {
        if (this.pagination) {
            this.pagination.destroy();
        }
        if (this.dataWorksheet) {
            this.dataWorksheet.destroy();
        }
        Brightics.VA.Core.Editors.Sheet.Panels.BasePanel.prototype.destroy.call(this);
        this.options.modelEditor.removeCommandListener(this.commandListener);
    };

    // EDAOutPanel.prototype.createTopAreaHeaderTitle = function ($parent) {
    //     this.$header = $('' +
    //         '<div class="brtc-va-editors-sheet-panels-basepanel-header brtc-va-editors-sheet-panels-datapanel-header">' +
    //         '   <div class="brtc-va-editors-sheet-panels-basepanel-header-container brtc-interactive-prediction-out-panel">' +
    //         '       <div class="brtc-va-editors-sheet-panels-basepanel-header-title" />' +
    //         '   </div>' +
    //         '</div>');
    //     $parent.append(this.$header);
    // };

    // EDAOutPanel.prototype.refreshHeaderTitle = function () {
    //     var $title = this.$mainControl.find('.brtc-va-editors-sheet-panels-basepanel-header-title');
    //     if (this.display.panelType === 'out') {
    //         $title.text(this.options.title);
    //         $title.attr('title', this.options.title);
    //     }
    // };

    // EDAOutPanel.prototype.createTopAreaHeaderToolbar = function () {
    //     this.$toolbar = $('<div class="brtc-va-editors-sheet-panels-datapanel-toolbar"/>');
    //     this.$header.append(this.$toolbar);
    //     this.createMinMaxToolItem(this.$toolbar);
    // };

    // EDAOutPanel.prototype.createBottomArea = function () {
    //     this.$bottomArea = $('<div class="brtc-va-editors-sheet-panels-basepanel-bottom-area"></div>');
    //     this.$mainControl.append(this.$bottomArea);
    // };

    // EDAOutPanel.prototype.createBottomAreaControls = function ($parent) {
    // };

    EDAOutPanel.prototype._queryTable = function () {
        var _this = this, tableList = this.display.tableList;
        var errorCallback = function (err) {
            if (dataArray.length === 0) {
                _this.$contentsArea.empty();
                var $dataworkSheetArea = $('<div class="brtc-va-editors-sheet-controls-dataworksheet brtc-style-interactive-prediction-out-panel"></div>');
                _this.$contentsArea.append($dataworkSheetArea);
                $dataworkSheetArea.empty();
                var $messageArea = $('' +
                    '<div class="brtc-va-interactive-prediction-message-wrapper brtc-style-interactive-prediction-message-wrapper">' +
                    '   <div class="brtc-va-interactive-prediction-message brtc-style-interactive-prediction-message">Please run the function for results.</div>' +
                    '</div>');
                $dataworkSheetArea.append($messageArea);
            } else {
                if (_this._isDisposed() === false) {
                    _this.createDataWorksheet(dataArray);
                    _this.$topArea.attr('has-data', 'true');
                }
            }
        };

        var dataArray = [];
        if (tableList.length === 9) {
            _this.options.dataProxy.requestDataForEDA(tableList[0], function (data) {
                dataArray.push(data);
                _this.options.dataProxy.requestDataForEDA(tableList[1], function (data) {
                    dataArray.push(data);
                    _this.options.dataProxy.requestDataForEDA(tableList[2], function (data) {
                        dataArray.push(data);
                        _this.options.dataProxy.requestDataForEDA(tableList[3], function (data) {
                            dataArray.push(data);
                            _this.options.dataProxy.requestDataForEDA(tableList[4], function (data) {
                                dataArray.push(data);
                                _this.options.dataProxy.requestDataForEDA(tableList[5], function (data) {
                                    dataArray.push(data);
                                    _this.options.dataProxy.requestDataForEDA(tableList[6], function (data) {
                                        dataArray.push(data);
                                        _this.options.dataProxy.requestDataForEDA(tableList[7], function (data) {
                                            dataArray.push(data);
                                            _this.options.dataProxy.requestDataForEDA(tableList[8], function (data) {
                                                dataArray.push(data);
                                                if (_this._isDisposed() === false) {
                                                    _this.createDataWorksheet(dataArray);
                                                    _this.$topArea.attr('has-data', 'true');
                                                }
                                            }, errorCallback);
                                        }, errorCallback);
                                    }, errorCallback);
                                }, errorCallback);
                            }, errorCallback);
                        }, errorCallback);
                    }, errorCallback);
                }, errorCallback);
            }, errorCallback);
        }
    };

    EDAOutPanel.prototype.createDataWorksheet = function (dataArray) {
        var _this = this;
        _this.$contentsArea.empty();

        var dataFlag = (dataArray !== undefined);

        var $dataworkSheetArea = $('' +
            '<div class="brtc-va-editors-sheet-controls-dataworksheet brtc-style-interactive-prediction-out-panel" style="overflow-y: auto">' +
            '   <div class="brtc-va-editors-sheet-controls-dataworksheet-chart-area brtc-style-editors-sheet-controls-dataworksheet-chart-area">' +
            '       <div class="brtc-va-editors-sheet-controls-dataworksheet-chart-scatter brtc-style-editors-sheet-controls-dataworksheet-chart-title">Scatter Matrix</div>' +
            '       <div class="brtc-va-editors-sheet-controls-dataworksheet-chart-scatter brtc-style-editors-sheet-controls-dataworksheet-chart" style="height: 500px"/>' +
            '       <div class="brtc-va-editors-sheet-controls-dataworksheet-chart-pie brtc-style-editors-sheet-controls-dataworksheet-chart-title">Summary of Label</div>' +
            '       <div class="brtc-va-editors-sheet-controls-dataworksheet-chart-pie brtc-style-editors-sheet-controls-dataworksheet-chart" style="height: 400px"/>' +
            '       <div class="brtc-va-editors-sheet-controls-dataworksheet-chart-pietable brtc-style-editors-sheet-controls-dataworksheet-chart" style="height: 100px"/>' +
            '       <div class="brtc-va-editors-sheet-controls-dataworksheet-chart-histogram-title brtc-style-editors-sheet-controls-dataworksheet-chart-title">Summary of Continuous Features</div>' +
            '       <div class="brtc-va-editors-sheet-controls-dataworksheet-chart-histogram brtc-style-editors-sheet-controls-dataworksheet-chart"/>' +
            '       <div class="brtc-va-editors-sheet-controls-dataworksheet-chart-histogramtable brtc-style-editors-sheet-controls-dataworksheet-chart" style="height: 150px"/>' +
            '   </div>' +
            '</div>');
        _this.$contentsArea.append($dataworkSheetArea);
        if (dataFlag) {
            $dataworkSheetArea.find('.brtc-va-interactive-prediction-message-wrapper').remove();

            this._createScatterChartControls($dataworkSheetArea.find('.brtc-va-editors-sheet-controls-dataworksheet-chart-scatter'), dataArray);
            this._createPieChartControls($dataworkSheetArea.find('.brtc-va-editors-sheet-controls-dataworksheet-chart-pie'), dataArray[3]);
            this._createTableChartControls($dataworkSheetArea.find('.brtc-va-editors-sheet-controls-dataworksheet-chart-pietable'), dataArray[4]);
            this._createHistogramChartControls($dataworkSheetArea.find('.brtc-va-editors-sheet-controls-dataworksheet-chart-histogram'), dataArray[5]);
            this._createTableChartControls($dataworkSheetArea.find('.brtc-va-editors-sheet-controls-dataworksheet-chart-histogram'), dataArray[6]);

            if (dataArray[7] !== undefined && dataArray[8] !== undefined) {
                if (dataArray[7].count !== 0 && dataArray[8].count !== 0) {
                    var $categoryFeaturesArea = $('' +
                        '<div class="brtc-va-editors-sheet-controls-dataworksheet-chart-pie2-title brtc-style-editors-sheet-controls-dataworksheet-chart-title">Summary of Category Features</div>' +
                        '<div class="brtc-va-editors-sheet-controls-dataworksheet-chart-pie2 brtc-style-editors-sheet-controls-dataworksheet-chart"/>' +
                        '<div class="brtc-va-editors-sheet-controls-dataworksheet-chart-pie2table brtc-style-editors-sheet-controls-dataworksheet-chart" style="height: 100px"/>');
                    $dataworkSheetArea.find('.brtc-va-editors-sheet-controls-dataworksheet-chart-histogram').append($categoryFeaturesArea);

                    this._createCategoryPieChartControls($dataworkSheetArea.find('.brtc-va-editors-sheet-controls-dataworksheet-chart-pie2'), dataArray[7]);
                    this._createTableChartControls($dataworkSheetArea.find('.brtc-va-editors-sheet-controls-dataworksheet-chart-pie2'), dataArray[8]);
                }
            }
        } else {
            $dataworkSheetArea.empty();
            var $messageArea = $('' +
                '<div class="brtc-va-interactive-prediction-message-wrapper brtc-style-interactive-prediction-message-wrapper">' +
                '   <div class="brtc-va-interactive-prediction-message brtc-style-interactive-prediction-message">Please run the function for results.</div>' +
                '</div>');
            $dataworkSheetArea.append($messageArea);
        }
    };

    EDAOutPanel.prototype._createScatterChartControls = function ($parent, dataArray) {
        var myChart = echarts.init($parent[1]);

        this.resizeHandler = function () {
            myChart.resize();
        };
        $(window).resize(this.resizeHandler);

        var schartChartData = dataArray[0].data;
        var chartCategories = dataArray[1].data;
        var chartDatas = dataArray[2].data;

        if (_.isEmpty(schartChartData)|| 
            _.isEmpty(chartCategories)||
            _.isEmpty(chartDatas)) return;

        var chartCategoriesData = [];

        for (var i in chartCategories) {
            if (chartCategories[i][1] === 'category') {
                for (var j in chartCategories[i][2]) {
                    if (chartCategories[i][2][j] == null) {
                        chartCategories[i][2][j] = '(empty)';
                    }
                }
                if (chartCategories[i][schartChartData[0][4]] == null) {
                    chartDatas[i][schartChartData[0][4]] = '(empty)';
                }
                chartCategoriesData.push(chartCategories[i][2]);
            }
        }

        var seriesDatas = [];

        for (var i in chartDatas) {
            if (chartDatas[i][schartChartData[0][4]] == null) {
                chartDatas[i][schartChartData[0][4]] = '(empty)';
            }

            var seriesData = {
                name: chartDatas[i][0],
                value: chartDatas[i][1]
            }
            seriesDatas.push(seriesData);
        }

        var CATEGORY_DIM_COUNT = schartChartData[0][1];
        var GAP = 2;
        var BASE_LEFT = 5;
        var BASE_TOP = 10;
        // var GRID_WIDTH = 220;
        // var GRID_HEIGHT = 220;
        var GRID_WIDTH = (100 - BASE_LEFT - GAP) / CATEGORY_DIM_COUNT - GAP;
        var GRID_HEIGHT = (100 - BASE_TOP - GAP) / CATEGORY_DIM_COUNT - GAP;
        var CATEGORY_DIM = schartChartData[0][4];
        var SYMBOL_SIZE = 3;

        function retrieveScatterData(data, dimX, dimY) {
            var result = [];
            for (var i = 0; i < data.length; i++) {
                var item = [data[i][dimX], data[i][dimY]];
                item[CATEGORY_DIM] = data[i][CATEGORY_DIM];
                result.push(item);
            }
            return result;
        }

        function generateGrids(option) {
            var index = 0;

            for (var i = 0; i < CATEGORY_DIM_COUNT; i++) {
                for (var j = 0; j < CATEGORY_DIM_COUNT; j++) {
                    if (CATEGORY_DIM_COUNT - i + j >= CATEGORY_DIM_COUNT) {
                        continue;
                    }

                    option.grid.push({
                        left: BASE_LEFT + i * (GRID_WIDTH + GAP) + '%',
                        top: BASE_TOP + j * (GRID_HEIGHT + GAP) + '%',
                        width: GRID_WIDTH + '%',
                        height: GRID_HEIGHT + '%'
                    });

                    option.xAxis.push({
                        splitNumber: 3,
                        position: 'top',
                        axisLine: {
                            show: j === 0,
                            onZero: false
                        },
                        axisTick: {
                            show: j === 0,
                            inside: true
                        },
                        axisLabel: {
                            show: j === 0
                        },
                        type: 'value',
                        gridIndex: index,
                        scale: true
                    });

                    option.yAxis.push({
                        splitNumber: 3,
                        position: 'right',
                        axisLine: {
                            show: i === CATEGORY_DIM_COUNT - 1,
                            onZero: false
                        },
                        axisTick: {
                            show: i === CATEGORY_DIM_COUNT - 1,
                            inside: true
                        },
                        axisLabel: {
                            show: i === CATEGORY_DIM_COUNT - 1
                        },
                        type: 'value',
                        gridIndex: index,
                        scale: true
                    });

                    option.series.push({
                        type: 'scatter',
                        symbolSize: SYMBOL_SIZE,
                        xAxisIndex: index,
                        yAxisIndex: index,
                        data: retrieveScatterData(chartDatas, i, j)
                    });

                    option.visualMap.seriesIndex.push(option.series.length - 1);

                    index++;
                }
            }
        }

        var color = [];

        for (var i = 0; i < chartCategories[schartChartData[0][4]][2].length; i++) {
            color.push(this.colorSet[i % this.colorSet.length]);
        }

        var option = {
            animation: false,
            visualMap: {
                type: 'piecewise',
                categories: chartCategories[schartChartData[0][4]][2],
                dimension: CATEGORY_DIM,
                orient: 'horizontal',
                top: 0,
                left: 'center',
                inRange: {
                    color: color
                },
                outOfRange: {
                    color: '#ddd'
                },
                seriesIndex: [0]
            },
            tooltip: {
                trigger: 'item'
            },
            grid: [],
            xAxis: [],
            yAxis: [],
            series: [
                {
                    name: 'parallel',
                    type: 'parallel',
                    data: chartDatas
                }
            ]
        };

        generateGrids(option);

        myChart.setOption(option);
    };

    EDAOutPanel.prototype._createPieChartControls = function ($parent, dataArray) {
        var myChart = echarts.init($parent[1]);

        this.resizeHandler = function () {
            myChart.resize();
        };
        $(window).resize(this.resizeHandler);

        var chartDatas = dataArray.data;
        var chartColumns = dataArray.columns;

        var legendData = [];
        var seriesDatas = [];

        for (var i in chartDatas) {
            if (chartDatas[i][0] == null) {
                chartDatas[i][0] = '(empty)';
            }

            legendData.push(chartDatas[i][0]);

            var seriesData = {
                name: chartDatas[i][0],
                value: chartDatas[i][1]
            }
            seriesDatas.push(seriesData);
        }

        var seriesName = chartColumns[0].name;

        var color = [];

        for (var i = 0; i < seriesDatas.length; i++) {
            color.push(this.colorSet[i % this.colorSet.length]);
        }

        var option = {
            color: color,
            tooltip: {
                trigger: 'item',
                formatter: "{a} <br/>{b} : {c} ({d}%)"
            },
            legend: {
                orient: 'horizontal',
                left: 'center',
                data: legendData
            },
            series: [
                {
                    name: seriesName,
                    type: 'pie',
                    radius: '55%',
                    center: ['50%', '45%'],
                    data: seriesDatas,
                    itemStyle: {
                        emphasis: {
                            shadowBlur: 10,
                            shadowOffsetX: 0,
                            shadowColor: 'rgba(0, 0, 0, 0.5)'
                        }
                    }
                }
            ]
        };

        myChart.setOption(option);

    };

    EDAOutPanel.prototype._createCategoryPieChartControls = function ($parent, dataArray) {
        var chartDatas = dataArray.data;

        this.PieChartData = [];
        this.colArray = [];

        for (var i = 1; i < chartDatas.length; i++) {
            if ($.inArray(chartDatas[i][0], this.colArray) != -1) {
                continue;
            } else {
                this.colArray.push(chartDatas[i][0]);
            }
        }

        for (var i = 0; i < this.colArray.length; i++) {
            this.PieChartData[this.colArray[i]] = [];
            for (var j = 0; j < chartDatas.length; j++) {
                if (chartDatas[j][0] === this.colArray[i]) {
                    var data = [];
                    data.push(chartDatas[j][1]);
                    data.push(chartDatas[j][2]);

                    this.PieChartData[this.colArray[i]].push(data);
                }
            }
        }

        for (var i in this.PieChartData) {
            var $pie = $('' +
                '<div class="brtc-va-editors-sheet-controls-dataworksheet-chart-pie-sub brtc-style-editors-sheet-controls-dataworksheet-chart" style="height: 400px;"/>');
            $parent.append($pie);

            var myChart = echarts.init($pie[0]);

            this.resizeHandler = function () {
                myChart.resize();
            };
            $(window).resize(this.resizeHandler);

            var legendData = [];
            var seriesDatas = [];

            for (var j in this.PieChartData[i]) {
                if (this.PieChartData[i][j][0] == null) {
                    this.PieChartData[i][j][0] = '(empty)';
                }
                legendData.push(this.PieChartData[i][j][0]);

                var seriesData = {
                    name: this.PieChartData[i][j][0],
                    value: this.PieChartData[i][j][1]
                }
                seriesDatas.push(seriesData);
            }

            var seriesName = i; //chartColumns[0].name;

            var color = [];

            for (var i = 0; i < seriesDatas.length; i++) {
                color.push(this.colorSet[i % this.colorSet.length]);
            }

            var option = {
                color: color,
                tooltip: {
                    trigger: 'item',
                    formatter: "{a} <br/>{b} : {c} ({d}%)"
                },
                legend: {
                    orient: 'horizontal',
                    left: 'center',
                    data: legendData
                },
                series: [
                    {
                        name: seriesName,
                        type: 'pie',
                        radius: '55%',
                        center: ['50%', '45%'],
                        data: seriesDatas,
                        itemStyle: {
                            emphasis: {
                                shadowBlur: 10,
                                shadowOffsetX: 0,
                                shadowColor: 'rgba(0, 0, 0, 0.5)'
                            }
                        }
                    }
                ]
            };

            myChart.setOption(option);
        }
    };

    EDAOutPanel.prototype._createTableChartControls = function ($parent, dataArray) {
        var chartDatas = dataArray.data;
        var chartColumns = dataArray.columns;

        var columnsDatas = [];

        for (var i in chartColumns) {
            var columnData = {
                name: chartColumns[i].name,
                type: chartColumns[i].type
            }
            columnsDatas.push(columnData);
        }

        var options = {
            chart: {
                type: 'table',
                // border: 'solid 1px #d3d3d3',
                padding: '0',
                // background: '#efefef',
                height: '100%'
            },
            source: {
                dataType: 'local',
                localData: [{
                    dataType: 'rawdata',
                    columns: columnsDatas,
                    data: chartDatas,
                    chartColumns:[]
                }]
            }
        };

        $parent.bcharts(options);
        this.chart = $parent.bcharts();
    };

    EDAOutPanel.prototype._createHistogramChartControls = function ($parent, dataArray) {
        var chartDatas = dataArray.data;

        this.HistogramChartData = [];
        this.colArray = [];

        for (var i = 0; i < chartDatas.length; i++) {
            if ($.inArray(chartDatas[i][0], this.colArray) != -1) {
                continue;
            } else {
                this.colArray.push(chartDatas[i][0]);
            }
        }

        for (var i = 0; i < this.colArray.length; i++) {
            this.HistogramChartData[this.colArray[i]] = [];
            for (var j = 0; j < chartDatas.length; j++) {
                if (chartDatas[j][0] === this.colArray[i]) {
                    var data = [];
                    data.push((chartDatas[j][1] + chartDatas[j][2]) / 2);
                    data.push(chartDatas[j][3]);

                    this.HistogramChartData[this.colArray[i]].push(data);
                }
            }
        }

        for (var i in this.HistogramChartData) {
            var $histogram = $('' +
                '<div class="brtc-va-editors-sheet-controls-dataworksheet-chart-histogram-sub brtc-style-editors-sheet-controls-dataworksheet-chart" style="height: 250px;"/>');
            $parent.append($histogram);

            var myChart = echarts.init($histogram[0]);

            this.resizeHandler = function () {
                myChart.resize();
            };
            $(window).resize(this.resizeHandler);

            var option = {
                title: {
                    text: i,
                    left: 'center',
                    top: 10
                },
                color: ['rgb(25, 183, 207)'],
                grid: {
                    left: '3%',
                    right: '3%',
                    bottom: '3%',
                    containLabel: true
                },
                xAxis: [{
                    type: 'value',
                    scale: true,
                    // name: i,
                    nameLocation: 'center',
                }],
                yAxis: [{
                    type: 'value',
                    // name: 'Count(' + i + ')',
                }],
                series: [{
                    name: 'height',
                    type: 'bar',
                    barWidth: '99.3%',
                    label: {
                        normal: {
                            show: true,
                            position: 'top',
                            formatter: function (params) {
                                return params.value[1];
                            }
                        }
                    },
                    data: this.HistogramChartData[i]
                }]
            };

            myChart.setOption(option);
        }
    };

    if (Brightics.VA.Implementation.DataFlow.Functions.eDA) {
        Brightics.VA.Implementation.DataFlow.Functions.eDA.DataPanel = EDAOutPanel;
    }

}).call(this);

/**
 * Created by daewon77.park on 2016-02-18.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    function InteractivePredictionOutPanel(parentId, options) {
        this.relationFunctionTable = [];
        this.coefficientFunctionTable = [];
        this.summaryTable = [];
        this.summaryKey = {};
        this.values = {};
        this.ycolumnSummaryData = [];
        this.xcolumnsSummaryData = [];

        Brightics.VA.Core.Editors.Sheet.Panels.DataPanel.call(this, parentId, options);
        this._queryTable();
    }

    InteractivePredictionOutPanel.prototype = Object.create(Brightics.VA.Core.Editors.Sheet.Panels.DataPanel.prototype);
    InteractivePredictionOutPanel.prototype.constructor = InteractivePredictionOutPanel;

    InteractivePredictionOutPanel.prototype.registerCommandListener = function () {
        var _this = this;
        this.commandListener = function (command) {
            if (command instanceof Brightics.VA.Core.Editors.Diagram.Commands.SetDataWorksheetPanelCommand) {
                if (_this.options.fnUnit.fid === command.event.source.options.fnUnit.fid) {
                    _this.handleSetDataWorksheetPanelCommand(command);
                }
            }
        };
        this.options.modelEditor.addCommandListener(this.commandListener);
    };

    InteractivePredictionOutPanel.prototype.handleSetDataWorksheetPanelCommand = function (command) {
        this._initSlideBarData();
        this._setAllSliderControlsValue();
        if (command.event.type == 'UNDO') {
            this._updateChartControls(command.options.oldPanel[0].data[0].label, command.options.oldPanel[0].data[0].value);
        } else if (command.event.type == 'REDO') {
            this._updateChartControls(command.options.newPanel[0].data[0].label, command.options.newPanel[0].data[0].value);
        }
    };

    InteractivePredictionOutPanel.prototype.createSetDataWorksheetPanelCommand = function (newPanel) {
        var setDataWorksheetPanelCommand = new Brightics.VA.Core.Editors.Diagram.Commands.SetDataWorksheetPanelCommand(this, {
            panel: this.options.fnUnit.display.sheet[this.display.panelType].partial[0].panel,
            newPanel: newPanel
        });

        return setDataWorksheetPanelCommand;
    };

    InteractivePredictionOutPanel.prototype.destroy = function () {
        if (this.pagination) {
            this.pagination.destroy();
        }
        if (this.dataWorksheet) {
            this.dataWorksheet.destroy();
        }
        Brightics.VA.Core.Editors.Sheet.Panels.BasePanel.prototype.destroy.call(this);
        this.options.modelEditor.removeCommandListener(this.commandListener);
    };

    InteractivePredictionOutPanel.prototype.createTopAreaHeaderTitle = function ($parent) {
        this.$header = $('' +
            '<div class="brtc-va-editors-sheet-panels-basepanel-header brtc-va-editors-sheet-panels-datapanel-header">' +
            '   <div class="brtc-va-editors-sheet-panels-basepanel-header-container brtc-interactive-prediction-out-panel">' +
            '       <div class="brtc-va-editors-sheet-panels-basepanel-header-title" />' +
            '   </div>' +
            '</div>');
        $parent.append(this.$header);
    };

    InteractivePredictionOutPanel.prototype.refreshHeaderTitle = function () {
        var $title = this.$mainControl.find('.brtc-va-editors-sheet-panels-basepanel-header-title');
        if (this.display.panelType === 'out') {
            $title.text(this.options.title);
            $title.attr('title', this.options.title);
        }
    };

    InteractivePredictionOutPanel.prototype.createTopAreaHeaderToolbar = function () {
        var $toolbar = $('<div class="brtc-va-editors-sheet-panels-datapanel-toolbar"/>');
        this.$header.append($toolbar);
        this.createMinMaxToolItem($toolbar);
    };

    InteractivePredictionOutPanel.prototype.createBottomArea = function () {
        this.$bottomArea = $('<div class="brtc-va-editors-sheet-panels-basepanel-bottom-area"></div>');
        this.$mainControl.append(this.$bottomArea);
    };

    InteractivePredictionOutPanel.prototype.createBottomAreaControls = function ($parent) {
    };

    InteractivePredictionOutPanel.prototype._queryTable = function () {
        var _this = this, tableList = this.display.tableList;
        var errorCallback = function (err) {
            _this.$contentsArea.empty();
            var $dataworkSheetArea = $('<div class="brtc-va-editors-sheet-controls-dataworksheet brtc-style-interactive-prediction-out-panel"></div>');
            _this.$contentsArea.append($dataworkSheetArea);
            $dataworkSheetArea.empty();
            var $messageArea = $('' +
                '<div class="brtc-va-interactive-prediction-message-wrapper brtc-style-interactive-prediction-message-wrapper">' +
                '   <div class="brtc-va-interactive-prediction-message brtc-style-interactive-prediction-message">Please run the function for results.</div>' +
                '</div>');
            $dataworkSheetArea.append($messageArea);
        };

        var dataArray = [];
        if (tableList.length === 3) {
            _this.options.dataProxy.requestData(tableList[0], function (data) {
                dataArray.push(data);
                _this.options.dataProxy.requestData(tableList[1], function (data) {
                    dataArray.push(data);
                    _this.options.dataProxy.requestData(tableList[2], function (data) {
                        dataArray.push(data);
                        if (_this._isDisposed() === false) {
                            _this.createDataWorksheet(dataArray);
                            _this.$topArea.attr('has-data', 'true');
                        }
                    }, errorCallback);
                }, errorCallback);
            }, errorCallback);
        }
    };

    InteractivePredictionOutPanel.prototype.createDataWorksheet = function (dataArray) {
        var _this = this;
        _this.$contentsArea.empty();

        var dataFlag = (dataArray !== undefined);
        for (var i in dataArray) {
            if (dataArray[i].data.length === 0 && dataArray[i].columns.length === 0) {
                dataFlag = false;
                break;
            }
        }

        var $dataworkSheetArea = $('' +
            '<div class="brtc-va-editors-sheet-controls-dataworksheet brtc-style-interactive-prediction-out-panel">' +
            '   <div class="brtc-va-editors-sheet-controls-dataworksheet-slider-area brtc-style-editors-sheet-controls-dataworksheet-slider-area"></div>' +
            '   <div class="brtc-va-editors-sheet-controls-dataworksheet-chart-area brtc-style-editors-sheet-controls-dataworksheet-chart-area">' +
            '       <div class="brtc-va-editors-sheet-controls-dataworksheet-chart brtc-style-editors-sheet-controls-dataworksheet-chart">' +
            '   </div>' +
            '</div>');
        _this.$contentsArea.append($dataworkSheetArea);
        if (dataFlag) {
            $dataworkSheetArea.find('.brtc-va-interactive-prediction-message-wrapper').remove();
            this._initDataArray(dataArray);

            this._initChartData();
            this._initSlideBarData();

            this._createSliderControls($dataworkSheetArea.find('.brtc-va-editors-sheet-controls-dataworksheet-slider-area'));
            this._createChartControls($dataworkSheetArea.find('.brtc-va-editors-sheet-controls-dataworksheet-chart'));
        } else {
            $dataworkSheetArea.empty();
            var $messageArea = $('' +
                '<div class="brtc-va-interactive-prediction-message-wrapper brtc-style-interactive-prediction-message-wrapper">' +
                '   <div class="brtc-va-interactive-prediction-message brtc-style-interactive-prediction-message">Please run the function for results.</div>' +
                '</div>');
            $dataworkSheetArea.append($messageArea);
        }
    };

    InteractivePredictionOutPanel.prototype._initDataArray = function (dataArray) {
        if (dataArray && dataArray.length) {
            this.relationFunctionTable = dataArray[0];
            this.coefficientFunctionTable = dataArray[1];
            this.summaryTable = dataArray[2];
            this.summaryKey = {};

            for (var i in this.summaryTable.columns) {
                // count, mean, stddev, min, max로 들어오는데 순서를 저장해서 나중에 사용
                this.summaryKey[this.summaryTable.columns[i].name] = i;
            }

            this.values = {};
            this.ycolumnSummaryData = [];
            this.xcolumnsSummaryData = [];

            this._initValuesObject();
        }
    };

    InteractivePredictionOutPanel.prototype._initValuesObject = function () {
        var ycolumnLabel = this.summaryTable.data[0][0];
        for (var i in this.summaryTable.data) {
            var columnLabel = this.summaryTable.data[i][0];
            if (columnLabel == ycolumnLabel) {
                this.ycolumnSummaryData = this.summaryTable.data[i];
            } else {
                this.xcolumnsSummaryData.push(this.summaryTable.data[i]);
            }
            this.values[columnLabel] = null;
        }
    };

    InteractivePredictionOutPanel.prototype._initChartData = function () {
        this.chartData = {};

        for (i in this.xcolumnsSummaryData) {
            var xcolumnLabel = this.xcolumnsSummaryData[i][0];
            var min = this.xcolumnsSummaryData[i][this.summaryKey['min']];
            var max = this.xcolumnsSummaryData[i][this.summaryKey['max']];

            this.chartData[xcolumnLabel] = [];
            for (var k = (min * 10000); k < (max * 10000); k += 100) {
                var x = k / 10000;
                this._changeXColumnValue(xcolumnLabel, x);
                this._calcYColumnValue();
                this.chartData[xcolumnLabel].push([x, this.values[this.summaryTable.data[0][0]]]);
            }
        }
    };

    InteractivePredictionOutPanel.prototype._getLastChangedXColumnLabel = function () {
        var lastChangedXColumnLabel;
        if (this.options.fnUnit.display.sheet.out.partial[0].panel.length && this.options.fnUnit.display.sheet.out.partial[0].panel[0]) {
            lastChangedXColumnLabel = this.options.fnUnit.display.sheet.out.partial[0].panel[0].data[0].label;
        }
        return (lastChangedXColumnLabel || this.xcolumnsSummaryData[0][0]);
    };

    InteractivePredictionOutPanel.prototype._getLastChangedXColumnValue = function () {
        var lastChangedXColumnValue;
        if (this.options.fnUnit.display.sheet.out.partial[0].panel.length && this.options.fnUnit.display.sheet.out.partial[0].panel[0]) {
            lastChangedXColumnValue = this.options.fnUnit.display.sheet.out.partial[0].panel[0].data[0].value;
        }
        return (lastChangedXColumnValue || this.xcolumnsSummaryData[0][this.summaryKey['mean']]);
    };

    InteractivePredictionOutPanel.prototype._initSlideBarData = function () {
        var changedXColumn = this._getLastChangedXColumnLabel();
        var changedValue = this._getLastChangedXColumnValue();
        this._changeXColumnValue(changedXColumn, changedValue); // 0번쨰 data로 모든 xcolumn 초기화가 필요함.   var mean = this.summaryTable.data[0][3];
        this._calcYColumnValue(); // 위에서 초기화한 데이터로 초기 ycolumn 값 계산
    };

    InteractivePredictionOutPanel.prototype._changeXColumnValue = function (changedXColumn, value) {
        if (value) {
            this.values[changedXColumn] = Number(value);
        }

        var x = this.values[changedXColumn];
        for (var i in this.relationFunctionTable.data) {
            var row = this.relationFunctionTable.data[i];
            var fxLabel = row[0], xLabel = row[1];
            if (fxLabel !== xLabel && xLabel === changedXColumn) {
                var a = Number(row[2]), b = Number(row[3]), c = Number(row[4]), d = Number(row[5]);
                this.values[fxLabel] = a * Math.pow(x, 3) + b * Math.pow(x, 2) + c * x + d;
            }
        }
    };

    InteractivePredictionOutPanel.prototype._calcYColumnValue = function () {
        var ycolumn = this.summaryTable.data[0][0];
        var _intercept;
        for (var k in this.coefficientFunctionTable.data) {
            if (this.coefficientFunctionTable.data[k][0] == '_intercept' && this.coefficientFunctionTable.data[k][1] == '_') {
                _intercept = this.coefficientFunctionTable.data[k][2];
                break;
            }
        }

        this.values[ycolumn] = Number(_intercept);
        for (var i = 0; i < this.coefficientFunctionTable.data.length; i++) {
            var x1Label = this.coefficientFunctionTable.data[i][0], x2Label = this.coefficientFunctionTable.data[i][1];
            if (x1Label !== '_intercept' && x2Label !== '_') {
                var x1 = this.values[x1Label] || 1;
                var x2 = this.values[x2Label] || 1;
                var coefficient = Number(this.coefficientFunctionTable.data[i][2]);
                this.values[ycolumn] += coefficient * x1 * x2;
            }
        }
    };

    InteractivePredictionOutPanel.prototype._createSliderControls = function ($parent) {
        var ycolumnLabel = this.summaryTable.data[0][0];
        var ycolumnMin = this.ycolumnSummaryData[this.summaryKey['min']];
        var ycolumnMax = this.ycolumnSummaryData[this.summaryKey['max']];
        this._createSliderBar($parent, ycolumnLabel, ycolumnMin, ycolumnMax, this.values[ycolumnLabel], true);

        for (var i in this.xcolumnsSummaryData) {
            var xcolumnLabel = this.xcolumnsSummaryData[i][0];
            var min = this.xcolumnsSummaryData[i][this.summaryKey['min']];
            var max = this.xcolumnsSummaryData[i][this.summaryKey['max']];
            this._createSliderBar($parent, xcolumnLabel, min, max, this.values[xcolumnLabel]);
        }
    };

    InteractivePredictionOutPanel.prototype._createSliderBar = function ($parent, label, min, max, value, disabled) {
        var _this = this;
        var $sliderItem = $('' +
            '<div class="brtc-va-slider-item brtc-style-slider-item">' +
            '   <div class="brtc-va-slider-item-info-row brtc-style-slider-item-info-row">' +
            '       <div class="brtc-va-slider-label brtc-style-slider-label"></div>' +
            '       <div class="brtc-va-slider-value-wrapper brtc-style-slider-value-wrapper">' +
            '           <div class="brtc-va-slider-value-viewer brtc-style-slider-value-viewer"></div>' +
            '       </div>' +
            '   </div>' +
            '   <div class="brtc-va-interactive-prediction-slider-element brtc-style-interactive-prediction-slider-element">' +
            '       <div class="brtc-va-slider-min brtc-style-slider-min"></div>' +
            '       <div class="brtc-va-interactive-prediction-slider-wrapper brtc-style-interactive-prediction-slider-wrapper">' +
            '           <div class="brtc-va-interactive-prediction-slider"></div>' +
            '       </div>' +
            '       <div class="brtc-va-slider-max brtc-style-slider-max"></div>' +
            '   </div>' +
            '</div>');
        $parent.append($sliderItem);

        $sliderItem.find('.brtc-va-slider-label').attr('title', label);
        $sliderItem.find('.brtc-va-slider-label').text(label);
        $sliderItem.find('.brtc-va-slider-min').text(min);
        $sliderItem.find('.brtc-va-slider-max').text(max);
        $sliderItem.find('.brtc-va-slider-value-viewer').text(Number(value).toFixed(4));

        var $slider = $sliderItem.find('.brtc-va-interactive-prediction-slider');
        $slider.jqxSlider({
            theme: Brightics.VA.Env.Theme,
            showTicks: false,
            showTickLabels: false,
            tooltip: false,
            showButtons: false,
            mode: 'default',
            height: 20,
            width: '100%',
            step: 0.05,
            min: Number(min),
            max: Number(max),
            value: Number(value),
            disabled: disabled
        });

        $slider.on('slideStart', function (event) {
            $slider.on('slide', function (event) {
                var label = $sliderItem.find('.brtc-va-slider-label').text();
                var value = event.args.value;
                _this._changeXColumnValue(label, value);
                _this._calcYColumnValue();
                _this._setSliderControlsValue($sliderItem);

                _this._updateChartControls(label, value);
            });
        });

        $slider.on('slideEnd', function (event) {
            var label = $sliderItem.find('.brtc-va-slider-label').text();
            var value = event.args.value;
            $slider.off('slide');

            var setDataWorksheetPanelCommand = _this.createSetDataWorksheetPanelCommand([{
                data: [{
                    label: label,
                    value: value
                }]
            }]);
            _this.executeCommand(setDataWorksheetPanelCommand);
        });
    };

    InteractivePredictionOutPanel.prototype._setSliderControlsValue = function ($currentHandler) {
        var _this = this;
        var $sliderItems = this.$contentsArea.find('.brtc-va-slider-item');
        $sliderItems.each(function (index, element) {
            var label = $(element).find('.brtc-va-slider-label').text();
            $(element).find('.brtc-va-slider-value-viewer').text(Number(_this.values[label]).toFixed(4));

            if ($currentHandler && !$currentHandler.is($(element))) {
                var $slider = $(element).find('.brtc-va-interactive-prediction-slider');
                $slider.jqxSlider('setValue', _this.values[label]);
            }
        });
    };

    InteractivePredictionOutPanel.prototype._setAllSliderControlsValue = function () {
        var _this = this;
        var $sliderItems = this.$contentsArea.find('.brtc-va-slider-item');
        $sliderItems.each(function (index, element) {
            var label = $(element).find('.brtc-va-slider-label').text();
            $(element).find('.brtc-va-slider-value-viewer').text(Number(_this.values[label]).toFixed(4));

            var $slider = $(element).find('.brtc-va-interactive-prediction-slider');
            $slider.jqxSlider('setValue', _this.values[label]);
        });
    };

    InteractivePredictionOutPanel.prototype._createChartControls = function ($parent) {
        var options = this._createChartOptions(this._getLastChangedXColumnLabel(), this._getLastChangedXColumnValue(), true);
        $parent.bcharts(options);
        this.chart = $parent.bcharts();
    };

    InteractivePredictionOutPanel.prototype._updateChartControls = function (selectedColumn, value) {
        var options = this._createChartOptions(selectedColumn, value, (this.chart.getOptions().xAxis[0].selected[0].name !== selectedColumn));
        this.chart.setOptions(options);
    };

    InteractivePredictionOutPanel.prototype._createChartOptions = function (selectedColumn, value, selectedChanged) {
        var xcolumnLabel = selectedColumn;
        var xcolumnValue = value;

        var ycolumnLabel = this.summaryTable.data[0][0];

        var options = {
            colorSet: [
                '#FD026C', '#4682B8', '#A5D22D', '#F5CC0A', '#FE8C01', '#6B9494', '#B97C46',
                '#84ACD0', '#C2E173', '#F9DD5B', '#FE569D', '#FEB356', '#9CB8B8', '#D0A884',
                '#2E6072', '#6D8C1E', '#A48806', '#A90148', '#A95E01', '#476363', '#7B532F'
            ],
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    animation: false
                }
            },
            xAxis: [{
                selected: [{name: xcolumnLabel}],
                title: {
                    visible: true,
                    left: '50%',
                    bottom: '8px'
                },
                axisTick: {
                    alignWithLabel: true
                },
                axisLabel: {
                    formatter: function (val) {
                        return Number(val).toFixed(2);
                    }
                }
            }],
            yAxis: [{
                selected: [{name: ycolumnLabel}],
                title: {
                    left: '8px',
                    top: '50%',
                    rotate: -90
                },
                axisLabel: {
                    formatter: function (val) {
                        return Number(val).toFixed(2);
                    }
                }
            }],
            plotOptions: {
                line: {
                    smooth: true,
                    marker: {
                        symbol: 'none'
                    },
                    markLine: {
                        data: [
                            {
                                xAxis: xcolumnValue,
                                lineStyle: {
                                    normal: {
                                        color: "#000",
                                        type: "solid"
                                    }
                                }
                            },
                            {type: 'max', name: 'max'},
                            {type: 'average', name: 'average'},
                            {type: 'min', name: 'min'}
                        ]
                    }
                }
            }
        };

        if (selectedChanged) {
            options.chart = {
                type: 'line',
                border: 'solid 1px #d3d3d3',
                padding: '0',
                background: '#efefef',
                height: '100%'
            };

            options.source = {
                dataType: 'local',
                localData: [{
                    dataType: 'rawdata',
                    columns: [
                        {name: xcolumnLabel, 'type': 'number'},
                        {name: ycolumnLabel, 'type': 'number'}
                    ],
                    data: $.extend(true, [], this.chartData[xcolumnLabel])
                }]
            };
        }

        return options;
    };

    if (Brightics.VA.Implementation.DataFlow.Functions.interactivePrediction) {
        Brightics.VA.Implementation.DataFlow.Functions.interactivePrediction.DataPanel = InteractivePredictionOutPanel;
    }

}).call(this);

/**
 * Created by SDS on 2016-10-17.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    function RepositoryBrowsePanel(parentId, options) {
        options.title = 'Browse Repository';
        Brightics.VA.Core.Editors.Sheet.Panels.BasePanel.call(this, parentId, options);
        this.$mainControl.addClass('repository-viewer');
    }

    RepositoryBrowsePanel.prototype = Object.create(Brightics.VA.Core.Editors.Sheet.Panels.BasePanel.prototype);
    RepositoryBrowsePanel.prototype.constructor = RepositoryBrowsePanel;

    RepositoryBrowsePanel.prototype.createContentsAreaControls = function ($parent) {
        // $parent = this.$contentsArea;
        this.options.filePath = this.options.filePath || '';
        $parent.empty();
        this.createDialogContentsArea($parent);
    };

    RepositoryBrowsePanel.prototype.createDialogContentsArea = function ($parent) {
        $parent.addClass('brtc-va-dialogs-repository-browser-contents');

        $parent.append('' +
            '<div class="brtc-va-dialogs-repository-browser-tree"></div>' +
            '<div class="brtc-va-dialogs-repository-browser-file-layout">' +
            '   <div class="brtc-va-dialogs-repository-browser-file-label">File Path</div>' +
            '   <div class="brtc-va-dialogs-repository-browser-file-input"><textarea></textarea></div>' +
            '</div>' +
            '<div class="brtc-va-dialogs-repository-browser-setting-option">' +
            '   <div class="brtc-va-dialogs-repository-browser-radio" value="static">Set a static file path for users repository.</div>' +
            '   <div class="brtc-va-dialogs-repository-browser-radio" value="dynamic">Set a dynamic file path for users repository.</div>' +
            '</div>' +

            '');

        this.createRepositoryTree($parent.find('.brtc-va-dialogs-repository-browser-tree'));
        this.createSettingOptionControl($parent.find('.brtc-va-dialogs-repository-browser-setting-option'));
        this.createFilePathControl($parent.find('.brtc-va-dialogs-repository-browser-file-input > textarea'));
    };

    RepositoryBrowsePanel.prototype.createRepositoryTree = function ($control) {
        var _this = this;
        this.repositoryViewer = new Brightics.VA.Core.Controls.RepositoryViewer($control);
        this.repositoryViewer.$tree.on('select', function (event) {
            var path = _this.repositoryViewer.getSelectedPath();
            _this._setFilePath(path);
        });
    };

    RepositoryBrowsePanel.prototype.createSettingOptionControl = function ($control) {
        var _this = this,
            $optionControl = $control.find('.brtc-va-dialogs-repository-browser-radio');
        this.$settingOptionGroup = $control;
        $optionControl.jqxRadioButton({
            theme: Brightics.VA.Env.Theme,
            groupName: 'repository-browser-setting-option'
        });

        $optionControl.on('checked', function () {
            var path = _this.repositoryViewer.getSelectedPath() || _this.options.filePath;
            _this._setFilePath(path);
        });

        if (this.options.filePath.match(/\/users\/\$\{sys.user\}\//g)) {
            this.$settingOptionGroup.find('.brtc-va-dialogs-repository-browser-radio[value=dynamic]').jqxRadioButton('check');
        } else {
            this.$settingOptionGroup.find('.brtc-va-dialogs-repository-browser-radio[value=static]').jqxRadioButton('check');
        }

        this.$settingOptionGroup.find('.brtc-va-dialogs-repository-browser-radio').hide();
    };

    RepositoryBrowsePanel.prototype.createFilePathControl = function ($control) {
        this.fileName = CodeMirror.fromTextArea($control[0], {
            mode: 'text',
            theme: 'default',
            indentWithTabs: false,
            smartIndent: false,
            lineNumbers: false,
            matchBrackets: true,
            scrollbarStyle: 'null',
            autofocus: false,
            readOnly: true
        });
        this.fileName.on('beforeChange', function (instance, change) {
            var newtext = change.text.join('').replace(/\n/g, ''); // remove ALL \n
            if (change.update) change.update(change.from, change.to, [newtext]);
            return true;
        });
        this.fileName.setSize('100%', '100%');

        if (this.options.filePath) {
            this._setFilePath(this.options.filePath);
        }
        var additionalOption = {
            'valid-type': 'fileNameType',
            'valid-message-position': 'bottom'
        };
        Brightics.VA.Core.Utils.WidgetUtils.changeCodeMirrorLineToSingle(this.fileName, additionalOption);
    };

    RepositoryBrowsePanel.prototype._setFilePath = function (path) {
        if (!path) return;

        var matched1 = path.match(/^\/brtc\/repo\/shared\/[^\/]*/);
        var matched2 = path.match(/^\/brtc\/repo\/users\/[^\/]+\/[^\/]*/);
        this.$settingOptionGroup.find('.brtc-va-dialogs-repository-browser-radio').hide();

        if (matched1) {
            this.fileName.setValue(path);
            this.fileName.markText({line: 0, ch: 0}, {line: 0, ch: 18}, {
                readOnly: true,
                inclusiveLeft: true,
                css: 'color: #b4b4b4'
            });
        } else if (matched2) {
            this.$settingOptionGroup.find('.brtc-va-dialogs-repository-browser-radio').show();
            var ch = 0,
                filePath = path;
            if (this.$settingOptionGroup.find('.brtc-va-dialogs-repository-browser-radio[value=dynamic]').val()) {
                filePath = filePath.replace(/\/users\/\S*\//g, '/users/${sys.user}/');
            } else {
                filePath = filePath.replace(/\/users\/\$\{sys\.user\}\//g, '/users/' + Brightics.VA.Env.Session.userId + '/');
            }
            var segments = filePath.split('/');
            this.fileName.setValue(filePath);
            for (var i = 0; i < 5; i++) {
                ch += segments[i].length;
                ch++;
            }
            this.fileName.markText({line: 0, ch: 0}, {line: 0, ch: ch}, {
                readOnly: true,
                inclusiveLeft: true,
                css: 'color: #b4b4b4'
            });
        } else {
            filePath = path + '/';
            if (this.$settingOptionGroup.find('.brtc-va-dialogs-repository-browser-radio[value=dynamic]').val()) {
                filePath = filePath.replace(/\/users\/\S*\//g, '/users/${sys.user}/');
            } else {
                filePath = filePath.replace(/\/users\/\$\{sys\.user\}\//g, '/users/' + Brightics.VA.Env.Session.userId + '/');
            }
            this.fileName.setValue(filePath);
            this.fileName.markText({line: 0, ch: 0}, {line: 0, ch: filePath.length + 1}, {
                readOnly: true,
                inclusiveLeft: true,
                css: 'color: #b4b4b4'
            });
        }
    };

    if (Brightics.VA.Implementation.DataFlow.Functions.import) Brightics.VA.Implementation.DataFlow.Functions.import.DataPanel= RepositoryBrowsePanel;
    if (Brightics.VA.Implementation.DataFlow.Functions.export) Brightics.VA.Implementation.DataFlow.Functions.export.DataPanel= RepositoryBrowsePanel;

}).call(this);

(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    function BaseInvokeProperties(parentId, options) {
        this._propertiesPanelParams = this._getParams();
        Brightics.VA.Core.Editors.Sheet.Panels.PropertiesPanel.call(this, parentId, options);
    }

    BaseInvokeProperties.prototype = Object.create(Brightics.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype);
    BaseInvokeProperties.prototype.constructor = BaseInvokeProperties;

    BaseInvokeProperties.prototype.createControls = function () {
        Brightics.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createControls.call(this);

        this.retrieveTableInfo(this.FnUnitUtils.getInTable(this.options.fnUnit));
    };

    BaseInvokeProperties.prototype.createContentsAreaControls = function ($parent) {
        Brightics.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.createContentsAreaControls.call(this, $parent);
        this.$elements = {};
        this.controls = {};
        this.visibleOptionMap = {};
        this._controlCreator = new Brightics.VA.Implementation.DataFlow.UdfInvokeControlCreator(this);
        this._renderCreateor = new Brightics.VA.Implementation.DataFlow.UdfInvokeControlRenderer(this);
        this._columnSelectorList = [];

        this.createControlsBySpec(this._propertiesPanelParams);
        this.render = this._createRenderer();
    };

    BaseInvokeProperties.prototype._createRenderer = function () {
        var renderer = this.createRendererBySpec(this._propertiesPanelParams);

        if (Object.keys(this.visibleOptionMap).length > 0) {
            renderer['$$VisibleOptionRenderer$$'] = this._renderVisibleOption.bind(this);
        }

        return renderer;
    };


    BaseInvokeProperties.prototype.createControlsBySpec = function (controlSpecs) {
        var spec;
        for (var i in controlSpecs) {
            spec = controlSpecs[i];
            this._controlCreator.createInvokeControl(spec);
            this._initVisibleOption(spec)
        }
    };

    BaseInvokeProperties.prototype.createRendererBySpec = function (controlSpecs) {
        var render = {};
        var spec;

        for (var i in controlSpecs) {
            spec = controlSpecs[i];
            render[spec.id] = this._renderCreateor.createInvokeRenderer(spec);
        }
        return render;
    };

    BaseInvokeProperties.prototype.fillControlValues = function () {
        var _this = this;
        for (var i = 0; i < this._columnSelectorList.length; i++) {
            var spec = this._columnSelectorList[i].spec;
            (function (i) {
                var columns = _this._getTargetColumns(spec);
                _this._columnSelectorList[i].control.setItems(columns);
            })(i);
        }
    };

    BaseInvokeProperties.prototype._getTargetColumns = function (spec) {
        var columns = [];
        var targetTable = spec.targetTable;
        var columnType = spec.columnType;
        var inData;

        if (targetTable && targetTable.length > 0) {
            inData = this.FnUnitUtils.getInTableByKeys(this.options.fnUnit, targetTable);
        } else {
            inData = this.FnUnitUtils.getInTable(this.options.fnUnit);
        }


        if (typeof inData === 'undefined') return columns;

        for (var i = 0; i < inData.length; i++) {
            columns = columns.concat(this.dataMap ? inData[i] ? this.dataMap[inData[i]].columns : [] : []);
        }

        if (columnType && columnType.length > 0) {
            columns = columns.filter(function(col){
                return columnType.indexOf(col.internalType) >= 0;
            });
        } else if (columnType && columnType.length === 0) {
            columns = columns.filter(function(col){
                return col.internalType !== 'Image';
            });
        }
        return columns;

    };


    BaseInvokeProperties.prototype.renderValidation = function () {
        for (var i in this.problems) {
            if (this.problems[i].param) {
                this.createValidationContent(this.$elements[this.problems[i].param], this.problems[i]);
            }
        }
    };

    BaseInvokeProperties.prototype._initVisibleOption = function (spec) {
        if (spec.visibleOption && spec.visibleOption.length > 0) {
            this.visibleOptionMap[spec.id] = spec.visibleOption;
        }
    };

    BaseInvokeProperties.prototype._getPropertyControlById = function (id) {
        return this.$elements[id].closest('.brtc-va-editors-sheet-controls-propertycontrol');
    };

    BaseInvokeProperties.prototype.createColumnsCommand = function (paramName, columns) {
        var commandOption = {
            fnUnit: this.options.fnUnit,
            ref: {param: {}}
        };
        commandOption.ref.param[paramName] = [columns];
        var command = new Brightics.VA.Core.Editors.Diagram.Commands.SetFnUnitParameterValueCommand(this, commandOption);
        return command;
    };

    BaseInvokeProperties.prototype._renderVisibleOption = function () {
        var visibleOptionList, controlWrapper;
        for (var id in this.visibleOptionMap) {
            visibleOptionList = this.visibleOptionMap[id];
            controlWrapper = this._getPropertyControlById(id);
            if (this._checkVisibleOption(visibleOptionList)) {
                controlWrapper.show();
            } else {
                controlWrapper.hide();
            }
        }
    };

    BaseInvokeProperties.prototype._checkVisibleOption = function (visibleOptionList) {
        var visibleOption;
        var visibleOptionValue;
        for (var i = 0; i < visibleOptionList.length; i++) {
            visibleOption = visibleOptionList[i];
            visibleOptionValue = visibleOption.value;
            if (_.isArray(this.options.fnUnit.param[visibleOption.id]) &&
                this.options.fnUnit.param[visibleOption.id]
                    .every(value => value !== visibleOptionValue)) {
                return false;
            }
            if (!_.isArray(this.options.fnUnit.param[visibleOption.id]) &&
                this.options.fnUnit.param[visibleOption.id] !== visibleOptionValue) {
                return false;
            }
        }
        return true;
    };


    BaseInvokeProperties.prototype.executeCommand = function (command) {
        Brightics.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.executeCommand.call(this, command);
        this._renderVisibleOption();
    };

    BaseInvokeProperties.prototype.handleSetFnUnitParameterValueCommand = function (command) {
        Brightics.VA.Core.Editors.Sheet.Panels.PropertiesPanel.prototype.handleSetFnUnitParameterValueCommand.call(this, command);
        if (this.options.fnUnit.fid == command.options.fnUnit.fid && (command.event.type === 'UNDO' || command.event.type === 'REDO')) {
            this._renderVisibleOption();
        }
    };

    Brightics.VA.Implementation.DataFlow.Functions.BaseInvokeProperties = BaseInvokeProperties;


}).call(this);

/**
 * Created by SDS on 2018-07-09.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    var numberTypeList = ['Double', 'Integer', 'Long'];

    function UdfInvokeControlCreator(udfInvokeProperties) {
        this._super = udfInvokeProperties;
    }

    UdfInvokeControlCreator.prototype.createInvokeControl = function (spec) {
        var typeVal, $control, isGlobal = false;
        if (spec.control === 'ColumnSelector') {
            $control = this.createColumnSelectorControl(spec);
            typeVal = (spec.multiple) ? 'array' : 'string';
        } else if (spec.control === 'InputBox') {
            $control = this.createInputBoxControl(spec);
            typeVal = spec.type.toLowerCase() === 'string' ? 'string' : 'number';
            isGlobal = true;
        } else if (spec.control === 'DropDownList') {
            $control = this.createDropDownListControl(spec);
            typeVal = 'string';
        } else if (spec.control === 'RadioButton') {
            $control = this.createRadioButtonControl(spec);
            typeVal = 'string';
        } else if (spec.control === 'BooleanRadio') {
            $control = this.createBooleanRadioButtonControl(spec);
            typeVal = 'boolean';
        } else if (spec.control === 'CheckBox') {
            $control = this.createCheckBoxControl(spec);
            typeVal = 'array';
        } else if (spec.control === 'ArrayInput') {
            $control = this.createArrayInputControl(spec);
            typeVal = 'array[' + (spec.type.toLowerCase() === 'string' ? 'string' : 'number') + ']';
            isGlobal = true;
        } else if (spec.control === 'Expression') {
            $control = this.createExpressionControl(spec);
            typeVal = 'string';
            isGlobal = true;
        } else if (spec.control === 'FileSelector') {
            $control = this.createLocalFileSelector(spec);
            typeVal = 'array';
            isGlobal = true;
        } else {
            console.error(spec.control + ' is unsupported control in toolkit spec.');
            return;
        }
        if (isGlobal) {
            var $label = $control.find('.brtc-va-editors-sheet-controls-propertycontrol-label');
            this._super.addGlobalVariableControl($label, {}, spec.id, spec.label, {type: typeVal});
        }
    };

    UdfInvokeControlCreator.prototype.createLocalFileSelector = function (spec) {
        var _this = this;
        var id = spec.id;

        this._super.$elements[id] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-contents"/>');
        var $propertyControl = this._super.addPropertyControl(spec.label, function ($container) {
            var $fileSelector = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input-readonly"/>');
            _this._super.createInput($fileSelector, {
                placeHolder: Brightics.VA.Core.Utils.WidgetUtils.convertInequalitySign(spec.placeHolder)
            }, 'brtc-va-editors-sheet-controls-margin-bottom');
            $fileSelector.prop('readonly', true);
            $container.append($fileSelector.parent());
            $fileSelector.click(function () {
                new Brightics.VA.Core.Dialogs.RepositoryBrowserDialog(_this._super.$mainControl, {
                    pathLabel: spec.label,
                    filePath: $fileSelector.val(),
                    close: function (dialogResult) {
                        if (dialogResult.OK && dialogResult.selectedFile) {
                            var renderInput = function (val, id) {
                                var preVal = $fileSelector.val();
                                var currentVal = val[0] || '';

                                if (preVal !== currentVal) {
                                    var createFsPathCommand = function (value) {
                                        var commandOption = {
                                            fnUnit: this._super.options.fnUnit,
                                            ref: {param: {}}
                                        };
                                        commandOption.ref.param[id] = [value];

                                        var command = new Brightics.VA.Core.Editors.Diagram.Commands.SetFnUnitCommand(this, commandOption);
                                        return command;
                                    }.bind(this);
                                    var command = createFsPathCommand(currentVal);
                                    this._super.executeCommand(command);
                                }
                                $fileSelector.val(currentVal);
                                $fileSelector.attr('title', currentVal);
                            }.bind(_this);
                            renderInput([dialogResult.selectedFile], id);
                        }
                    },
                    resizable: false,
                    title: 'Setting ' + spec.label
                });
            });
            _this._super.controls[id] = $fileSelector;
            _this._super.$elements[id].on('change', function (event) {
                if (!_this._super.isInputValueChanged(id, $(this).val())) return;
                var command = _this._super.createSetParameterValueCommand(id, $(this).val());
                _this._super.executeCommand(command);
            });
        }, {mandatory: spec.mandatory ? true : false});
        return $propertyControl;
    };


    UdfInvokeControlCreator.prototype.createColumnSelectorControl = function (spec) {
        var _this = this;
        var id = spec.id;

        this._super.$elements[id] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-columnlist"/>');
        var $propertyControl = this._super.addPropertyControl(spec.label, function ($container) {
            $container.append(_this._super.$elements[id]);
            var opt = {"multiple": spec.multiple, "maxRowCount": spec.rowCount};
            if (spec.multiple) {
                opt.changed = function (type, data) {
                    var command = _this._super.createSetParameterValueCommand(id, data.items);
                    _this._super.executeCommand(command)
                };
            } else {
                opt.changed = function (type, data) { // make data array
                    var command = _this._super.createSetParameterValueCommand(id, data.items[0] || '');
                    _this._super.executeCommand(command)
                };
            }
            _this._super.controls[id] = _this._super.createColumnList(_this._super.$elements[id], opt);
            var columnSelector = {
                control: _this._super.controls[id],
                spec: spec
            };
            if (spec.columnType) {
                columnSelector.columnType = spec.columnType;
            }

            _this._super._columnSelectorList.push(columnSelector);
        }, {mandatory: spec.mandatory});
        return $propertyControl;
    };

    UdfInvokeControlCreator.prototype.createArrayInputControl = function (spec) {
        var _this = this;
        var id = spec.id;

        this._super.$elements[id] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');
        var $propertyControl = this._super.addPropertyControl(spec.label, function ($container) {
            $container.append(_this._super.$elements[id]);
            var opt = {};
            if (numberTypeList.indexOf(spec.type) >= 0) {
                opt.type = 'number';
            } else {
                opt.type = 'string';
            }

            opt.onChangeCallback = function (data) {
                var command = _this._super.createSetParameterValueCommand(id, data);
                _this._super.executeCommand(command)
            };
            _this._super.controls[id] = _this._super.createArrayInput(_this._super.$elements[id], opt);
        }, {mandatory: spec.mandatory});
        return $propertyControl;
    };


    UdfInvokeControlCreator.prototype.createInputBoxControl = function (spec) {
        if (numberTypeList.indexOf(spec.type) >= 0) {
            return this.createNumericInputBoxControl(spec);
        } else {
            return this.createStringInputBoxControl(spec);
        }
    };

    UdfInvokeControlCreator.prototype.createNumericInputBoxControl = function (spec) {
        var _this = this;
        var id = spec.id;

        this._super.$elements[id] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-numberinput"/>');

        var $propertyControl = this._super.addPropertyControl(spec.label, function ($parent) {
            $parent.append(_this._super.$elements[id]);
            var options = {
                placeholder: Brightics.VA.Core.Utils.WidgetUtils.convertInequalitySign(spec.placeHolder) || ''
            };

            if (typeof spec.min !== 'undefined') {
                options.min = spec.min;
            }

            if (typeof spec.max !== 'undefined') {
                options.max = spec.max;
            }

            if (spec.type === 'Integer') {
                options.numberType = 'int'
            } else {
                options.numberType = 'double'
            }

            _this._super.controls[id] = _this._super.createNumericInput(_this._super.$elements[id], options);

            _this._super.controls[id].onChange(function () {
                var val = _this._super.controls[id].getValue();
                val = val === '' ? '' : Number(val);
                var command = _this._super.createSetParameterValueCommand(id, val);
                _this._super.executeCommand(command);
            });
        }, {mandatory: spec.mandatory});
        return $propertyControl;
    };

    UdfInvokeControlCreator.prototype.createStringInputBoxControl = function (spec) {
        var _this = this;
        var id = spec.id;

        this._super.$elements[id] = $('<input type="text" class="brtc-va-editors-sheet-controls-propertycontrol-input"/>');
        var $propertyControl = this._super.addPropertyControl(spec.label, function ($container) {
            $container.append(_this._super.$elements[id]);
            var opt = {"placeHolder": Brightics.VA.Core.Utils.WidgetUtils.convertInequalitySign(spec.placeHolder) || ''};
            _this._super.controls[id] = _this._super.createInput(_this._super.$elements[id], opt);
            _this._super.$elements[id].on('change', function (event) {
                if (!_this._super.isInputValueChanged(id, $(this).val())) return;
                var command = _this._super.createSetParameterValueCommand(id, $(this).val());
                _this._super.executeCommand(command);
            });
        }, {mandatory: spec.mandatory});
        return $propertyControl;
    };


    UdfInvokeControlCreator.prototype.createDropDownListControl = function (spec) {
        var _this = this;
        var id = spec.id;

        this._super.$elements[id] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-combobox"/>');
        var $propertyControl = this._super.addPropertyControl(spec.label, function ($container) {
            $container.append(_this._super.$elements[id]);
            var opt = {"source": spec.items};
            _this._super.controls[id] = _this._super.createDropDownList(_this._super.$elements[id], opt);
            _this._super.controls[id].on('change', function (event) {
                if (event.args.item !== null) {
                    var command = _this._super.createSetParameterValueCommand(id, event.args.item.value);
                    _this._super.executeCommand(command);
                }

            });
        }, {mandatory: spec.mandatory});
        return $propertyControl;
    };

    UdfInvokeControlCreator.prototype.createBooleanRadioButtonControl = function (spec) {
        var _this = this;
        var items = spec.items;
        var id = spec.id;
        if (items.length === 0) {
            items.push({value: true, label: 'True', default: spec.defaultValue});
            items.push({value: false, label: 'False', default: !spec.defaultValue});
        }

        this._super.controls[id] = {};
        var controlMap = this._super.controls[id];


        var $propertyControl = this._super.addPropertyControl(spec.label, function ($container) {
            _this._super.$elements[id] = $container;

            for (var i in items) {

                var radioControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton" value="' + items[i].value + '">' + items[i].label + '</div>');

                $container.append(radioControl);
                controlMap[items[i].value] = _this._super.createRadioButton(radioControl, {
                    width: 'undefined',
                    groupName: id,
                    checked: items[i].default
                });
                controlMap[items[i].value].on('checked', function (event) {
                    var realValue = this.getAttribute('value') === true || this.getAttribute('value') === 'true'
                    var command = _this._super.createSetParameterValueCommand(id, realValue);
                    _this._super.executeCommand(command);
                });
            }
        }, {mandatory: spec.mandatory});
        return $propertyControl;
    };

    UdfInvokeControlCreator.prototype.createRadioButtonControl = function (spec) {
        var _this = this;
        var items = spec.items;
        var id = spec.id;

        this._super.controls[id] = {};
        var controlMap = this._super.controls[id];


        var $propertyControl = this._super.addPropertyControl(spec.label, function ($container) {
            _this._super.$elements[id] = $container;

            for (var i in items) {

                var radioControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton" value="' + items[i].value + '">' + items[i].label + '</div>');

                $container.append(radioControl);
                controlMap[items[i].value] = _this._super.createRadioButton(radioControl, {
                    width: 'undefined',
                    groupName: id,
                    checked: items[i].default
                });
                controlMap[items[i].value].on('checked', function (event) {
                    var command = _this._super.createSetParameterValueCommand(id, this.getAttribute('value'));
                    _this._super.executeCommand(command);
                });
            }
        }, {mandatory: spec.mandatory});
        return $propertyControl;
    };

    UdfInvokeControlCreator.prototype.createCheckBoxControl = function (spec) {
        var _this = this;
        var items = spec.items;
        var id = spec.id;

        this._super.controls[id] = {};
        var controlMap = this._super.controls[id];
        var $checkBoxContainer = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox-container"></div>');
        var $selectAllButton = $('<input type="button" value="Select All" style="width: 100%; float:left; margin-left: 0px;"/>');
        var $clearAllButton = $('<input type="button" value="Unselect All" style="width: 100%; float:left; margin-left: 2px; margin-bottom: 2px;"/>');

        $checkBoxContainer.append($selectAllButton);
        $checkBoxContainer.append($clearAllButton);
        this._super.$elements[id] = $checkBoxContainer;

        for (var i in items) {
            controlMap[items[i].value] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-radiobutton" value="' + items[i].value + '">' + items[i].label + '</div>');
        }

        var $propertyControl = this._super.addPropertyControl(spec.label, function ($container) {
            $container.append($checkBoxContainer);
            _this._super.createButton($selectAllButton, {height: 23}, 'brtc-va-editors-sheet-controls-width-6');
            _this._super.createButton($clearAllButton, {height: 23}, 'brtc-va-editors-sheet-controls-width-6');

            var items = spec.items;
            var itemKey;
            var changeHandler = function () {
                $(window).trigger('mousedown');
                var checked = [];
                for (var i in items) {
                    itemKey = items[i].value;
                    if (controlMap[itemKey].val() === true) {
                        checked.push(controlMap[itemKey].data('tag'));
                    }
                }
                var command = _this._super.createSetParameterValueCommand(id, checked);
                _this._super.executeCommand(command);
            };
            for (var i in items) {
                itemKey = items[i].value;
                var $checkBoxControl = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-checkbox"></div>');
                $checkBoxControl.text(items[i].label);
                $checkBoxControl.data('tag', items[i].value);
                $checkBoxContainer.append($checkBoxControl);
                controlMap[itemKey] = _this._super.createCheckBox($checkBoxControl, {}, 'brtc-va-editors-sheet-controls-width-12');
                controlMap[itemKey].on('change', changeHandler);
            }
            $selectAllButton.on('click', function (event) {
                for (let i in items) {
                    itemKey = items[i].value;
                    controlMap[itemKey].off('change', changeHandler);
                    controlMap[itemKey].jqxCheckBox({checked: true});
                    controlMap[itemKey].on('change', changeHandler);
                }
                var checked = [];
                for (let i in items) {
                    itemKey = items[i].value;
                    checked.push(controlMap[itemKey].data('tag'));
                }
                var command = _this._super.createSetParameterValueCommand(id, checked);
                _this._super.executeCommand(command);
            });
            $clearAllButton.on('click', function (event) {
                for (var i in items) {
                    itemKey = items[i].value;
                    controlMap[itemKey].off('change', changeHandler);
                    controlMap[itemKey].jqxCheckBox({checked: false});
                    controlMap[itemKey].on('change', changeHandler);
                }
                var checked = [];
                var command = _this._super.createSetParameterValueCommand(id, checked);
                _this._super.executeCommand(command);
            });
        }, {mandatory: spec.mandatory});
        return $propertyControl;
    };

    UdfInvokeControlCreator.prototype.createExpressionControl = function (spec) {
        var _this = this;
        var id = spec.id;
        this._super.$elements[id] = $('<div class="brtc-va-editors-sheet-controls-propertycontrol-expression"/>');
        var $propertyControl = this._super.addPropertyControl(spec.label, function ($container) {
            $container.append(_this._super.$elements[id]);
            var aceOption = {
                mode: 'scala',
                commands: [],
                events: [],
                value: '',
                editorOptions: {
                    showLineNumbers: false,
                    showGutter: false
                }
            };


            _this._super.controls[id] = Brightics.VA.Core.Widget.Factory.aceEditorControl(_this._super.$elements[id], aceOption);

            var editor = _this._super.controls[id].getEditor();

            editor.on('blur', function (event) {
                if (!_this._super.isInputValueChanged(id, editor.getValue())) return;
                var command = _this._super.createSetParameterValueCommand(id, editor.getValue());
                _this._super.executeCommand(command);
            });


        }, {mandatory: spec.mandatory});
        return $propertyControl;
    };

    Brightics.VA.Implementation.DataFlow.UdfInvokeControlCreator = UdfInvokeControlCreator;

}).call(this);
/**
 * Created by SDS on 2018-07-09.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    function UdfInvokeControlRenderer(udfInvokeProperties) {
        this._super = udfInvokeProperties;
    }

    UdfInvokeControlRenderer.prototype.createInvokeRenderer = function (spec) {
        if (spec.control === 'ColumnSelector') {
            return this.createColumnSelectorRenderer(spec);
        } else if (spec.control === 'InputBox') {
            return this.createInputBoxRenderer(spec);
        } else if (spec.control === 'DropDownList') {
            return this.createDropDownListRenderer(spec);
        } else if (spec.control === 'RadioButton' ||
                    spec.control === 'BooleanRadio') {
            return this.createRadioButtonRenderer(spec);
        } else if (spec.control === 'CheckBox') {
            return this.createCheckBoxRenderer(spec);
        } else if (spec.control === 'ArrayInput') {
            return this.createArrayInputRenderer(spec);
        } else if (spec.control === 'Expression') {
            return this.createExpressionRenderer(spec);
        } else if (spec.control === 'FileSelector') {
            return this.createLocalFileSelectorRenderer(spec);
        }
    };

    UdfInvokeControlRenderer.prototype._getValueByParamId = function (id) {
        return this._super.options.fnUnit.param[id];
    };

    UdfInvokeControlRenderer.prototype._getControlByParamId = function (id) {
        return this._super.controls[id];
    };


    UdfInvokeControlRenderer.prototype.createColumnSelectorRenderer = function (spec) {
        var _this = this;
        var id = spec.id;
        if (spec.multiple) {
            var renderer = function () {
                var value = _this._getValueByParamId(id) || [];
                var control = _this._getControlByParamId(id);
                control.setSelectedItems(value);
            };
        } else { // make data array
            var renderer = function () {
                var value = _this._getValueByParamId(id) || '';
                var control = _this._getControlByParamId(id);
                control.setSelectedItems([value]);
            };
        }
        return renderer;
    };

    UdfInvokeControlRenderer.prototype.createArrayInputRenderer = function (spec) {
        var _this = this;
        var id = spec.id;

        var renderer = function () {
            var value = _this._getValueByParamId(id) || [];
            var control = _this._getControlByParamId(id);
            control.setValue(value);
        };
        return renderer;
    };

    UdfInvokeControlRenderer.prototype.createInputBoxRenderer = function (spec) {
        var _this = this;
        var id = spec.id;

        var renderer = function () {
            var value = _this._getValueByParamId(id);
            var control = _this._getControlByParamId(id);
            if (typeof control.val === 'function') {
                control.val(value || '');
            } else {
                control.setValue(value || '');
            }
        };
        return renderer;
    };

    UdfInvokeControlRenderer.prototype.createLocalFileSelectorRenderer = function (spec) {
        var _this = this;
        var id = spec.id;

        var renderer = function () {
            var value = _this._getValueByParamId(id);
            var control = _this._getControlByParamId(id);
            var val = Array.isArray(value) ? value[0] : value;
            if (typeof control.val === 'function') {
                control.val(val || '');
            } else {
                control.setValue(val || '');
            }
        };
        return renderer;
    };

    UdfInvokeControlRenderer.prototype.createDropDownListRenderer = function (spec) {
        var _this = this;
        var id = spec.id;

        var renderer = function () {
            var value = _this._getValueByParamId(id);
            var control = _this._getControlByParamId(id);

            if (typeof value === 'undefined' || value === '') {
                control.jqxDropDownList('selectIndex', -1);
            } else {
                control.jqxDropDownList('selectItem', value);
            }

        };
        return renderer;
    };

    UdfInvokeControlRenderer.prototype.createRadioButtonRenderer = function (spec) {
        var _this = this;
        var id = spec.id;

        var renderer = function () {
            var value = _this._getValueByParamId(id);
            var controlMap = _this._getControlByParamId(id);

            if (controlMap[value]) {
                controlMap[value].jqxRadioButton({checked: true});
            }

        };
        return renderer;
    };

    UdfInvokeControlRenderer.prototype.createCheckBoxRenderer = function (spec) {
        var _this = this;
        var id = spec.id;

        var renderer = function () {
            var value = _this._getValueByParamId(id);
            var controlMap = _this._getControlByParamId(id);


            if (typeof value !== 'undefined') {
                for (var index in controlMap) {
                    if ($.inArray(controlMap[index].data('tag'), value) > -1) {
                        controlMap[index].jqxCheckBox({checked: true});
                    }
                    else {
                        controlMap[index].jqxCheckBox({checked: false});
                    }
                }
            } else {
                for (var index in controlMap) {
                    controlMap[index].jqxCheckBox({checked: false});
                }
            }

        };
        return renderer;
    };


    UdfInvokeControlRenderer.prototype.createExpressionRenderer = function (spec) {
        var _this = this;
        var id = spec.id;

        var renderer = function () {
            var value = _this._getValueByParamId(id) || '';
            var control = _this._getControlByParamId(id);

            control.setValue(value);

        };
        return renderer;
    };


    Brightics.VA.Implementation.DataFlow.UdfInvokeControlRenderer = UdfInvokeControlRenderer;

}).call(this);

/* -----------------------------------------------------
 *  diagram-editor-wrapper.js
 *  Created by hyunseok.oh@samsung.com on 2018-02-21.
 * ----------------------------------------------------*/

/* global Studio, FUNCTION_NAME */
(function () {
    'use strict';
    var Brightics = this.Brightics;
    var Editors = Brightics.VA.Implementation.DataFlow.Editors;
    var EventEmitter = this.__module__.EventEmitter;
    var ClassUtils = this.__module__.ClassUtils;
    var _ = this.__module__._;

    var LOOP_TYPE = 'type';
    var LOOP_PROPERTY = 'prop';
    var DEFAULT_LOOP_PROP = {
        'count': {
            'start': '${=}',
            'end': '${=}',
            'index-variable': ''
        },
        'collection': {
            'collection': '${=}',
            'element-variable': '',
            'index-variable': ''
        },
        'while': {
            'expression': '${=}',
            'index-variable': ''
        }
    };

    function DiagramEditorWrapper($parent, _options) {
        var options = _options || {};
        this.$parent = $parent;

        this.conditionHeader = options.conditionHeader;
        this.loopHeader = options.loopHeader;
        this.editor = options.editor;
        this.conditionContext = [];
        this.activeHeader = undefined;
        this.init();
    }

    ClassUtils.inherits(DiagramEditorWrapper, EventEmitter);

    DiagramEditorWrapper.prototype.getHeader = function () {
        return this.header;
    };

    DiagramEditorWrapper.prototype.init = function (params) {
        this.editor.getCommandManager().registerCallback(function (command) {
            if ((command.options.label === 'Add Condition' ||
                    command.options.label === 'Remove Condition') &&
                command.options.view === 'header') {
                if (this.model) {
                    this._setHeader(this.model, this.fnUnit);
                } else {
                    var mid = this.fnUnit.param.if.mid;
                    this.editor.getModelLayoutManager().changeEditorModel(mid);
                }
            } else if (command.options.view === 'header') {
                if (this.model) {
                    this._setHeader(this.model, this.fnUnit);
                }
            }
        }.bind(this));

        this.editor.getCommandManager().registerGoHistoryCallback(function (commands) {
            var idx = _.findIndex(commands.options.commands, function (command) {
                return command.options.label === 'Add Condition' ||
                    command.options.label === 'Remove Condition';
            });
            if (idx > -1) {
                this._setHeader(this.model, this.fnUnit);
            }
        }.bind(this));
        this.conditionHeader.on('tab-add-click', function (data) {
            var mid = Brightics.VA.Core.Utils.IDGenerator.model.id();
            var commands = new Brightics.VA.Core.CompoundCommand(this, {
                label: 'Add Condition',
                view: 'header'
            });
            commands.add(this.createAddParameterCommand(this.fnUnit, {
                mid: mid,
                conditionType: 'elseif'
            }));

            commands.add(this.createNewActivityCommand(this.fnUnit, {
                mid: mid,
                conditionType: 'elseif'
            }));
            this.editor.getCommandManager().execute(commands);
        }.bind(this));

        this.conditionHeader.on('tab-close-click', function (evt) {
            if (evt.data.getType() !== 'elseif') return;
            var commands
                = new Brightics.VA.Core.CompoundCommand(this, {
                    label: 'Remove Condition',
                    view: 'header'
                });
            commands.add(this.createRemoveActivityCommand(this.fnUnit, {
                mid: evt.data.getId()
            }));

            commands.add(this.createRemoveParameterCommand(this.fnUnit, {
                mid: evt.data.getId(),
                conditionType: 'elseif'
            }));
            this.editor.getCommandManager().execute(commands);
        }.bind(this));

        this.conditionHeader.on('tab-click', function (evt) {
            this.emit('tab-click', evt);
        }.bind(this));

        this.conditionHeader.on('field-change', function (evt) {
            this.editor.getCommandManager().execute(this.createConditionFieldChangeCommand(evt));
        }.bind(this));

        this.loopHeader.on('input-change', function (evt) {
            var options = {
                val: evt.value,
                path: evt.path
            };
            this.editor.getCommandManager()
                .execute(this.createLoopFieldChangeCommand(this.fnUnit, options));
        }.bind(this));

        this.loopHeader.on('type-change', function (key) {
            var options = {
                loopType: key
            };
            this.editor.getCommandManager()
                .execute(this.createLoopTypeChangeCommand(this.fnUnit, options));
        }.bind(this));
    };

    DiagramEditorWrapper.prototype.setModel = function (model, fnUnit, isOpen) {
        this.editor.getDiagramEditorPage().setModel(model);
        this._setHeader(model, fnUnit, isOpen);
        this.model = model;
        this.fnUnit = fnUnit;
        if (fnUnit) this.conditionContext = fnUnit.param;
        Studio.getInstance().doValidate(model);
    };

    DiagramEditorWrapper.prototype._setHeader = function (model, fnUnit) {
        if (!fnUnit) {
            this.conditionHeader.hide();
            this.loopHeader.hide();
            this.editor.getHeaderArea().hide();
            this.activeHeader = undefined;
            return;
        }
        var mid = model.mid;
        if (fnUnit[FUNCTION_NAME] === 'If') {
            this.editor.getHeaderArea().show();
            this.conditionHeader.setData(fnUnit.param);
            this.conditionHeader.show();
            this.conditionHeader.render();
            this.conditionHeader.selectTab(mid);
            this.loopHeader.hide();
            this.activeHeader = this.conditionHeader;
        } else if (fnUnit[FUNCTION_NAME] === 'ForLoop' ||
            fnUnit[FUNCTION_NAME] === 'WhileLoop') {
            this.editor.getHeaderArea().show();
            this.loopHeader.setData(fnUnit);
            this.loopHeader.render(true);
            this.conditionHeader.hide();
            this.loopHeader.hide();
            // this.loopHeader.show();
            this.activeHeader = this.loopHeader;
        } else {
            this.activeHeader = undefined;
            throw new Error('unexpected fnunit');
        }
    };

    DiagramEditorWrapper.prototype.createConditionFieldChangeCommand = function (data) {
        var path = ['param'];
        if (data.type === 'if') {
            path.push('if');
        } else if (data.type === 'elseif') {
            path.push('elseif');
            var idx = _.findIndex(this.fnUnit.param.elseif, function (param) {
                return param.mid === data.id;
            });
            if (idx === -1) return;
            path.push(idx);
        } else {
            return;
        }
        path.push('expression');

        var commandOptions = {
            fnUnit: this.fnUnit,
            label: 'Condition Field Update',
            path: path,
            value: data.field,
            view: 'header'
        };

        var command = new Brightics.VA.Core.Editors.Diagram.Commands.UpdateOperationCommand(
            this,
            commandOptions);
        return command;
    };

    DiagramEditorWrapper.prototype.createNewActivityCommand = function (fnUnit, options) {
        var val = (function (fnUnit, options) {
            if (fnUnit.func === 'if') {
                return {
                    mid: options.mid,
                    type: fnUnit.func,
                    conditionType: options.conditionType
                };
            } else if (fnUnit.func === 'forLoop' ||
                fnUnit.func === 'whileLoop') {
                return {
                    mid: fnUnit.param.mid,
                    type: 'loop'
                };
            }
        }(fnUnit, options));
        return new Brightics.VA.Core.Editors.Diagram.Commands.NewActivityCommand(this, val);
    };

    DiagramEditorWrapper.prototype.createAddParameterCommand = function (fnUnit, options) {
        var conditionType = options._conditionType || 'elseif';
        var mid = options.mid;
        var path = ['param', conditionType];

        var template = {
            'expression': 'true',
            'mid': mid
        };

        var val = (function () {
            if (conditionType === 'elseif') {
                if (fnUnit.param.elseif) {
                    path.push(fnUnit.param.elseif.length);
                } else {
                    return [template];
                }
            }
            return template;
        }());

        var command
            = new Brightics.VA.Core.Editors.Diagram.Commands.AddOperationCommand(this, {
                fnUnit: fnUnit,
                path: path,
                value: val
            });
        return command;
    };

    DiagramEditorWrapper.prototype.createRemoveActivityCommand = function (fnUnit, options) {
        var command
            = new Brightics.VA.Core.Editors.Diagram.Commands.RemoveActivityCommand(this, {
                mid: options.mid
            });
        return command;
    };

    DiagramEditorWrapper.prototype.createRemoveParameterCommand = function (fnUnit, options) {
        var conditionType = options._conditionType || 'elseif';
        if (conditionType !== 'elseif') return;
        var path = ['param', conditionType];
        var idx = _.findIndex(fnUnit.param.elseif, function (cond) {
            return cond.mid === options.mid;
        });
        if (idx === -1) return;
        path.push(idx);
        var command
            = new Brightics.VA.Core.Editors.Diagram.Commands.RemoveOperationCommand(this, {
                fnUnit: fnUnit,
                path: path
            });
        return command;
    };

    DiagramEditorWrapper.prototype.getHeaderHeight = function () {
        return (this.activeHeader) ? this.activeHeader.getHeight() : 0;
    };

    DiagramEditorWrapper.prototype.setLayoutManager = function (layoutManager) {
        this.layoutManager = layoutManager;
    };

    DiagramEditorWrapper.prototype.createLoopFieldChangeCommand = function (fnUnit, options) {
        var path = ['param'].concat(options.path);

        var commandOptions = {
            label: 'Loop Field Update',
            fnUnit: fnUnit,
            path: path,
            value: options.val,
            view: 'header'
        };

        var command = new Brightics.VA.Core.Editors.Diagram.Commands.UpdateOperationCommand(
            this,
            commandOptions);
        return command;
    };

    DiagramEditorWrapper.prototype.createLoopTypeChangeCommand = function (fnUnit, options) {
        var compound = new Brightics.VA.Core.CompoundCommand(this, {
            label: 'Loop Type Changed',
            view: 'header'
        });

        compound.add(new Brightics.VA.Core.Editors.Diagram.Commands.UpdateOperationCommand(this, {
            fnUnit: fnUnit,
            path: ['param', LOOP_TYPE],
            value: options.loopType
        }));

        compound.add(new Brightics.VA.Core.Editors.Diagram.Commands.UpdateOperationCommand(this, {
            fnUnit: fnUnit,
            path: ['param', LOOP_PROPERTY],
            value: _.cloneDeep(DEFAULT_LOOP_PROP[options.loopType])
        }));

        return compound;
    };

    Editors.Diagram.DiagramEditorWrapper = DiagramEditorWrapper;
/* eslint-disable no-invalid-this */
}.call(this));

/* -----------------------------------------------------
 *  header.js
 *  Created by hyunseok.oh@samsung.com on 2018-02-19.
 * ----------------------------------------------------*/

(function () {
    'use strict';
    var Brightics = this.Brightics;
    var ClassUtils = this.__module__.ClassUtils;
    var EventEmitter = this.__module__.EventEmitter;
    function Header() {
    }
    ClassUtils.inherits(Header, EventEmitter);

    Header.prototype.show = function () {
        this.$el.show();
        this.onShow();
    };

    Header.prototype.hide = function () {
        this.$el.hide();
    };

    Header.prototype.getHeight = function () {
        return this.$el.outerHeight();
    };

    Header.prototype.onShow = function () {
    };

    Brightics.VA.Implementation.DataFlow.Editors.Header.Header = Header;
/* eslint-disable no-invalid-this */
}.call(this));
/* eslint-disable no-invalid-this */

/* -----------------------------------------------------
 *  condition-header-field.js
 *  Created by hyunseok.oh@samsung.com on 2018-02-19.
 * ----------------------------------------------------*/

/* global crel _ */
(function () {
    'use strict';
    var Brightics = this.Brightics;
    var ClassUtils = this.__module__.ClassUtils;
    var EventEmitter = this.__module__.EventEmitter;
    var className = {
        field: 'brtc-condition-header-field',
        labelWrapper: 'brtc-condition-header-field-label-wrapper',
        textareaWrapper: 'brtc-condition-header-field-textarea-wrapper',
        textarea: 'brtc-condition-header-field-textarea',
        hide: 'brtc-condition-header-field-hide',
        textareaLabel: 'brtc-condition-header-field-textarea-label'
    };

    function ConditionHeaderField($parent, _options) {
        var options = _options || {};
        var _this = this;
        this.$parent = $parent;
        this.fieldContext = options.context;
        this.prvVal = this.fieldContext ? this.fieldContext.getField() : '${=}';
        this.$expandArrow =
            $(crel('i', {
                class: 'fa fa-chevron-down brtc-condition-header-field-expand-arrow',
                'aria-hidden': 'true'
            }));
        this.isExpanded = false;
        this.$expandArrow.click(function () {
            _this.isExpanded = !_this.isExpanded;
            _this.render();
        });

        this.$el = $(
            crel('div', { class: className.field },
                this.$expandArrow[0],
                crel('div', { class: className.labelWrapper },
                    crel('label', { class: className.textareaLabel }, 'Condition')
                ),
                crel('div', { class: className.textareaWrapper },
                    crel('textarea', { class: className.textarea })
                )
            )
        );

        this.$textArea = this.$el.find('.' + className.textarea);

        this.wrappedTextArea = this.createWrappedTextArea(this.$textArea);
        this.wrappedTextArea.change(function (val) {
            if (this.prvVal === val) return;
            this.prvVal = val;
            this.fieldContext.setField(val);
            this.emit('field-change', {
                id: this.fieldContext.getId(),
                type: this.fieldContext.getType(),
                field: val
            });
        }.bind(this));

        this.$parent.append(this.$el);
    }

    ClassUtils.inherits(ConditionHeaderField, EventEmitter);

    ConditionHeaderField.prototype.setContext = function (context) {
        this.fieldContext = context;
        return this;
    };

    ConditionHeaderField.prototype.getContext = function () {
        return this.fieldContext;
    };

    ConditionHeaderField.prototype.render = function () {
        this.wrappedTextArea.setValue(this.fieldContext ? this.fieldContext.getField() : '${=}');
        if (this.isExpanded) {
            this.$textArea.removeClass('brtc-condition-header-field-textarea-unexpanded');
            this.$el.addClass('brtc-condition-header-field-expanded');
            this.$expandArrow.removeClass('fa-chevron-down');
            this.$expandArrow.addClass('fa-chevron-up');
        } else {
            this.$textArea.addClass('brtc-condition-header-field-textarea-unexpanded');
            this.$el.removeClass('brtc-condition-header-field-expanded');
            this.$expandArrow.removeClass('fa-chevron-up');
            this.$expandArrow.addClass('fa-chevron-down');
        }
        this.wrappedTextArea.expand(this.isExpanded);
        this.wrappedTextArea.refresh();
    };

    ConditionHeaderField.prototype.show = function () {
        this.$el.removeClass(className.hide);
        this.wrappedTextArea.refresh();
    };

    ConditionHeaderField.prototype.hide = function () {
        this.$el.addClass(className.hide);
    };

    ConditionHeaderField.prototype.createWrappedTextArea = function ($textArea) {
        var _this = this;
        var controlOptions = _.merge({}, {
            mode: 'brtc-control',
            scrollbarStyle: 'null',
            lineWrapping: false,
            matchBrackets: false,
            extraKeys: {
                'Ctrl-Space': 'autocomplete',
                'Tab': false, // Let focus go to next control
                'Shift-Tab': false // Let focus go to previous control
            },
            showTrailingSpace: true
        });

        var codeMirror = CodeMirror.fromTextArea($textArea[0], controlOptions);

        var _this = this;
        var wrappedCodeMirror = (function (cm) {
            var prvExp = undefined;
            return {
                setValue: function (val) {
                    var strippedVal = (function (_val) {
                        var val = _.isUndefined(_val) ? '' : _val;
                        if (_this.test(val)) {
                            return val.substring(3, val.length - 1);
                        }
                        return val;
                    }(val));
                    cm.setValue(strippedVal);
                    cm.refresh();
                },
                getValue: function () {
                    var val = cm.getValue();
                    return '${=' + val + '}';
                },
                change: function (callback) {
                    cm.on('blur', function (event) {
                        if (event.state.focused) {
                            callback(wrappedCodeMirror.getValue());
                        }
                    });
                },
                expand: function (exp) {
                    if (exp) {
                        cm.setSize(null, '200px');
                    } else {
                        cm.setSize(null, '30px');
                        cm.setCursor(1);
                        cm.scrollTo(null, 0);
                    }
                    cm.refresh();
                    prvExp = exp;
                },
                refresh: function () {
                    cm.refresh();
                }
            };
        }(codeMirror));
        return wrappedCodeMirror;
    };

    ConditionHeaderField.prototype.wrap = function (val) {
        return '${=' + (val || '') + '}';
    };

    ConditionHeaderField.prototype.test = function (val) {
        return _.startsWith(val, '${=') && _.endsWith(val, '}');
    };

    Brightics.VA.Implementation.DataFlow.Editors.Header.ConditionHeaderField = ConditionHeaderField;
/* eslint-disable no-invalid-this */
}.call(this));
/* eslint-disable no-invalid-this */

/* -----------------------------------------------------
 *  condition-header-tab-bar.js
 *  Created by hyunseok.oh@samsung.com on 2018-02-19.
 * ----------------------------------------------------*/

(function () {
    'use strict';
    var Brightics = this.Brightics;
    var ClassUtils = this.__module__.ClassUtils;
    var EventEmitter = this.__module__.EventEmitter;
    var _ = this.__module__._;
    var Header = Brightics.VA.Implementation.DataFlow.Editors.Header;

    function ConditionHeaderTabBar($parent, _options) {
        var options = _options || {};
        this.$template = $([
            '<div class="brtc-condition-header-tab-bar">',
            '  <div class="brtc-condition-header-tab-bar-list">',
            '  </div>',
            '  <div class="brtc-condition-header-tab-bar-add">',
            '+',
            '  </div>',
            '</div>'
        ].join('\n'));

        this.$tabListArea = this.$template.find('.brtc-condition-header-tab-bar-list');
        this.$addBtn = this.$template.find('.brtc-condition-header-tab-bar-add');
        this.$addBtn.click(this._handleAddClick.bind(this));
        this.$parent = $parent;
        this.$parent.append(this.$template);
        this.tabContextList = options.tabContextList || [];
        this.uselectedTabId = 0;
    }

    ClassUtils.inherits(ConditionHeaderTabBar, EventEmitter);

    ConditionHeaderTabBar.prototype.addTabContext = function (tabContext) {
        this.tabContextList.push(tabContext);
    };

    ConditionHeaderTabBar.prototype.removeTabContext = function (index) {
        this.tabContextList.splice(index, 1);
    };

    ConditionHeaderTabBar.prototype.setTabContextList = function (context) {
        this.tabContextList = context;
    };

    ConditionHeaderTabBar.prototype.getTabContextList = function () {
        return this.tabContextList;
    };

    ConditionHeaderTabBar.prototype.render = function () {
        var _this = this;
        this.$tabListArea.empty();
        this.tabRefList = _.map(this.tabContextList, function (tabContext) {
            var tab = _this._newTab(_this.$tabListArea,
                tabContext, _this.selectedTabId == tabContext.getId());
            return tab;
        });
    };

    ConditionHeaderTabBar.prototype._getTabById = function (id) {
        var index = _.findIndex(this.tabContextList, function (context) {
            return context.getId() == id;
        });
        if (index > -1) return this.tabRefList[index];
        return null;
    };

    ConditionHeaderTabBar.prototype.selectTab = function (id) {
        if (id == this.selectedTabId) return;
        _.forEach(this.tabRefList, function (tab) {
            return tab.unselect();
        });
        this.unselectTab();
        var tab = this._getTabById(id);
        if (tab) {
            this.selectedTabId = id;
            tab.select();
        }
        return true;
    };

    ConditionHeaderTabBar.prototype.closeTab = function (index) {
        if (!this._isValidIndex(index)) return false;
        this.removeTabContext(index);
        var target = this.tabContextList.length > index ? index : this.tabContextList.length - 1;
        if (target == -1) {
            this.unselectTab();
        } else {
            this.selectTab(target);
        }
        return true;
    };

    ConditionHeaderTabBar.prototype.unselectTab = function () {
        this.selectedTabId = -1;
        return true;
    };

    ConditionHeaderTabBar.prototype._newTab = function ($parent, tabContext, selected) {
        var _this = this;

        var tab = new Header.ConditionHeaderTab($parent, {
            tabContext: tabContext,
            selected: selected
        });

        tab.on('tab-click', function (evt) {
            _this.selectTab(evt.data.getId());
            _this.emit('tab-click', evt);
        });

        tab.on('tab-close-click', function (data) {
            _this.emit('tab-close-click', data);
        });

        return tab;
    };

    ConditionHeaderTabBar.prototype._handleAddClick = function (data) {
        this.emit('tab-add-click', data);
    };

    Header.ConditionHeaderTabBar = ConditionHeaderTabBar;
/* eslint-disable no-invalid-this */
}.call(this));
/* eslint-disable no-invalid-this */

/* -----------------------------------------------------
 *  condition-header-tab-context.js
 *  Created by hyunseok.oh@samsung.com on 2018-02-20.
 * ----------------------------------------------------*/

(function () {
    'use strict';
    var Brightics = this.Brightics;
    var Header = Brightics.VA.Implementation.DataFlow.Editors.Header;

    function ConditionHeaderTabContext(_options) {
        var options = _options || {};
        this.id = options.id;
        this.title = options.title || 'untitled';
        this.field = options.field || 'true';
        this.type = options.type;
    }

    ConditionHeaderTabContext.prototype.getId = function () {
        return this.id;
    };

    ConditionHeaderTabContext.prototype.getTitle = function () {
        return this.title;
    };

    ConditionHeaderTabContext.prototype.setTitle = function (title) {
        this.title = title;
        return this;
    };

    ConditionHeaderTabContext.prototype.getField = function () {
        return this.field;
    };

    ConditionHeaderTabContext.prototype.setField = function (field) {
        this.field = field;
        return this;
    };

    ConditionHeaderTabContext.prototype.getType = function () {
        return this.type;
    };


    Header.ConditionHeaderTabContext = ConditionHeaderTabContext;
/* eslint-disable no-invalid-this */
}.call(this));
/* eslint-disable no-invalid-this */

/* -----------------------------------------------------
 *  condition-header-tab.js
 *  Created by hyunseok.oh@samsung.com on 2018-02-19.
 * ----------------------------------------------------*/

(function () {
    'use strict';
    var Brightics = this.Brightics;
    var ClassUtils = this.__module__.ClassUtils;
    var EventEmitter = this.__module__.EventEmitter;

    var className = {
        tab: 'brtc-condition-header-tab',
        title: 'brtc-condition-header-tab-title',
        closeBtn: 'brtc-condition-header-tab-close-btn',
        tabSelected: 'brtc-condition-header-tab-selected'
    };

    function ConditionHeaderTab($parent, _options) {
        var options = _options || {};
        this.$parent = $parent;
        this.tabContext = options.tabContext;
        this.selected = options.selected || false;

        this.$el = $('<div/>', { class: className.tab });
        this.$titleArea = $('<div/>', { class: className.title });
        this.$closeButton = $('<div/>', { class: className.closeBtn});

        this.$el.append(this.$titleArea);

        if (this.selected) {
            this.select();
        }

        this.$titleArea.html(this.tabContext.getTitle());
        this.$titleArea.click(function (evt) {
            this.emit('tab-click', {
                data: this.tabContext
            });
        }.bind(this));

        if (this.tabContext.getType() == 'elseif') {
            this.$el.append(this.$closeButton);
            this.$closeButton.click(function (evt) {
                evt.stopPropagation();
                this.emit('tab-close-click', {
                    data: this.tabContext
                });
            }.bind(this));
        }

        this.$parent.append(this.$el);
    }

    ClassUtils.inherits(ConditionHeaderTab, EventEmitter);

    ConditionHeaderTab.prototype.select = function () {
        this.$el.addClass(className.tabSelected);
    };

    ConditionHeaderTab.prototype.unselect = function (params) {
        this.$el.removeClass(className.tabSelected);
    };


    Brightics.VA.Implementation.DataFlow.Editors.Header.ConditionHeaderTab = ConditionHeaderTab;
/* eslint-disable no-invalid-this */
}.call(this));
/* eslint-disable no-invalid-this */

/* -----------------------------------------------------
 *  condition-header.js
 *  Created by hyunseok.oh@samsung.com on 2018-02-19.
 * ----------------------------------------------------*/

(function () {
    'use strict';
    var Brightics = this.Brightics;
    var ClassUtils = this.__module__.ClassUtils;
    var Header = Brightics.VA.Implementation.DataFlow.Editors.Header;
    var _ = this.__module__._;

    function ConditionHeader($parent, _options) {
        var options = _options || {};
        Header.Header.call(this, $parent, options);
        this.$parent = $parent;

        this.$el = $('<div/>', { class: 'brtc-condition-header' });
        this.$el.hide();
        this.$tabBarArea = $('<div/>', { class: 'brtc-condition-header-tab-bar-area' });
        // this.$fieldArea = $('<div/>', { class: 'brtc-condition-header-field-area' });
        this.$el.append(this.$tabBarArea);
        // this.$el.append(this.$fieldArea);

        this.conditionTabBar = new Header.ConditionHeaderTabBar(this.$tabBarArea, {
            tabContextList: this.tabContextList
        });
        this.conditionTabBar.on('tab-add-click', this._handleAddTabClick.bind(this));
        this.conditionTabBar.on('tab-close-click', this._handleCloseTabClick.bind(this));
        this.conditionTabBar.on('tab-click', this._handleTabClick.bind(this));

        this.$parent.append(this.$el);

        this.hide();
    }

    ClassUtils.inherits(ConditionHeader, Header.Header);

    ConditionHeader.prototype.render = function () {
        this.conditionTabBar.setTabContextList(this.tabContextList);
        this.conditionTabBar.render();
    };

    ConditionHeader.prototype.selectTab = function (id) {
        this.conditionTabBar.selectTab(id);
        this.selectedTabId = id;
    };

    ConditionHeader.prototype.unselectTab = function () {
        var selectedTab = this.getSelectedTabContext();
        selectedTab.unselect();
    };

    ConditionHeader.prototype._handleTabClick = function (evt) {
        this.selectedTabId = evt.data.getId();
        this.emit('tab-click', evt);
        return true;
    };

    ConditionHeader.prototype._handleAddTabClick = function (data) {
        this.emit('tab-add-click', data);
        return true;
    };

    ConditionHeader.prototype._handleCloseTabClick = function (data) {
        this.emit('tab-close-click', data);
        return true;
    };

    ConditionHeader.prototype._handleFieldChange = function (data) {
        this.emit('field-change', data);
    };

    ConditionHeader.prototype.setData = function (datas) {
        this.data = datas;
        this.tabContextList = this._toTabContext(datas);
    };

    ConditionHeader.prototype._toTabContext = function (datas) {
        var tabs = [];
        tabs.push(new Header.ConditionHeaderTabContext({
            id: datas.if.mid,
            title: 'If',
            type: 'if',
            field: datas.if.expression
        }));

        tabs = tabs.concat(_.map(datas.elseif, function (data, index) {
            return new Header.ConditionHeaderTabContext({
                id: data.mid,
                title: 'Else-If(' + index + ')',
                type: 'elseif',
                field: data.expression
            });
        }));

        if (datas.else) {
            tabs.push(new Header.ConditionHeaderTabContext({
                id: datas.else.mid,
                title: 'Else',
                type: 'else'
            }));
        }
        return tabs;
    };

    ConditionHeader.prototype._getTabContextById = function (id) {
        var index = _.findIndex(this.tabContextList, function (context) {
            return context.getId() === id;
        });

        if (index > -1) return this.tabContextList[index];
        return null;
    };

    ConditionHeader.prototype.getSelectedTabContext = function () {
        return this._getTabContextById(this.selectedTabId);
    };

    ConditionHeader.prototype.getSelectedConditionId = function () {
        return this.selectedTabId;
    };

    Header.ConditionHeader = ConditionHeader;
/* eslint-disable no-invalid-this */
}.call(this));
/* eslint-disable no-invalid-this */

/* -----------------------------------------------------
 *  loop-header-field.js
 *  Created by hyunseok.oh@samsung.com on 2018-02-19.
 * ----------------------------------------------------*/

/* global _ crel CodeMirror */

(function () {
    'use strict';
    var Brightics = this.Brightics;
    var ClassUtils = this.__module__.ClassUtils;
    var EventEmitter = this.__module__.EventEmitter;

    var CLASS_NAME = {
        HEADER_FIELD: 'brtc-loop-header-field',
        LOOP_CONDITION_WRAPPER: 'brtc-loop-header-loop-condition',
        LABEL_INPUT_PAIR_WRAPPER: 'brtc-loop-header-label-input-pair-wrapper',
        READONLY_LABEL: 'brtc-loop-header-readonly-label',
        READONLY_INPUT: 'brtc-loop-header-readonly-input',
        READONLY_LABEL_INPUT_PAIR_WRAPPER: 'brtc-loop-header-readonly-label-input-pair-wrapper',
        EXPAND: 'brtc-loop-header-expand',
        LABEL_DIV: 'brtc-loop-header-label-div',
        FLEX_VERTICAL_CENTER: 'brtc-style-display-flex brtc-style-align-items-center'
    };

    var LOOP_PROPERTY = 'prop';
    var LOOP_TYPE = 'type';
    var TYPE_CHANGE = 'type-change';
    var INPUT_CHANGE = 'input-change';

    var keys = {
        forLoop: [
            'count',
            'collection'
        ],
        whileLoop: [
            'while'
        ]
    };

    function LoopHeaderField($parent) {
        var _this = this;
        this.$parent = $parent;
        this.loopType = '';
        this.valueMap = {};
        this.$wrapper = {};
        this.$radio = {};
        this.$input = {};

        this.isExpanded = true;
        this.$expand = $(crel('div', {class: CLASS_NAME.EXPAND}));
        this.$expandArrow = $(crel('i',
            {
                class: 'fa fa-chevron-up brtc-loop-header-expand-arrow',
                'aria-hidden': 'true'
            }));
        this.$expand.append(this.$expandArrow);
        this.$expand.click(function () {
            _this.isExpanded = !_this.isExpanded;
            _this.render();
        });

        this.$radioArea =
            $(crel('div', {class: CLASS_NAME.LABEL_INPUT_PAIR_WRAPPER},
                crel('div', {class: CLASS_NAME.LABEL_DIV}, 'Loop Type',
                    crel('div', {
                        class: 'brtc-va-editors-sheet-controls-propertycontrol-mandatory'
                    }, '*')
                ),
                crel('div', {class: CLASS_NAME.FLEX_VERTICAL_CENTER},
                    this._createRadioButton('Count', 'count'),
                    this._createRadioButton('Collection', 'collection'),
                    this._createRadioButton('While', 'while')
                )
            ));


        this.$expandedDiv = $(crel('div', {class: 'brtc-loop-header-expanded'},
            this.$radioArea[0]
        ));

        this.$unexpandedDiv = $(crel('div', {class: 'brtc-loop-header-unexpanded'}));

        this.$el = $(
            crel('div', {class: CLASS_NAME.HEADER_FIELD},
                this.$expand[0],
                this.$expandedDiv[0],
                this.$unexpandedDiv[0]
            )
        );

        this.$wrapper.count = $(
            crel('div',
                this._createLabelInputPair('Start',
                    'brtc-loop-header-count-start', 'start', true, 'count', true),
                this._createLabelInputPair('End',
                    'brtc-loop-header-count-end', 'end', true, 'count', true),
                this._createLabelInputPair('Index Variable',
                    'brtc-loop-header-count-index-variable', 'index-variable', false, 'count')
            )
        );

        this.$wrapper.collection = $(
            crel('div',
                this._createLabelInputPair('Collection',
                    'brtc-loop-header-collection-collection',
                    'collection', true, 'collection', true),
                this._createLabelInputPair('Element Variable',
                    'brtc-loop-header-collection-element-variable', 'element-variable',
                    false, 'collection'),
                this._createLabelInputPair('Index Variable',
                    'brtc-loop-header-collection-index-variable', 'index-variable',
                    false, 'collection')
            )
        );

        this.$wrapper.while = $(
            crel('div',
                this._createLabelInputPair('Expression',
                    'brtc-loop-header-while-expression',
                    'expression', true, 'while', true),
                this._createLabelInputPair('Index Variable',
                    'brtc-loop-header-while-index-variable', 'index-variable', false, 'while')
            )
        );

        _.forIn(this.$wrapper, function ($wrp) {
            this.$expandedDiv.append($wrp);
        }.bind(this));
        this.$parent.append(this.$el);

        this.changeLayout();
    }

    ClassUtils.inherits(LoopHeaderField, EventEmitter);

    LoopHeaderField.prototype.setData = function (fnUnit) {
        var _this = this;
        this.fnUnit = fnUnit;
        var props = fnUnit.param;
        this.props = props;
        this.loopType = props[LOOP_TYPE];
        this.valueMap = {};
        _.forIn(props[LOOP_PROPERTY], function (val, key) {
            _this.valueMap[_this.getKey(_this.loopType, key)] = val;
        });
        this.changeLayout();
    };

    LoopHeaderField.prototype.changeLayout = function () {
        var _this = this;
        _.forIn(this.$radio, function ($r) {
            $r.hide();
        });

        _.forIn(this.$wrapper, function ($w) {
            $w.hide();
        });

        var type = this.getLoopFunc();
        var cnt = 0;
        _.forEach(keys[type], function (loopType) {
            _this.$radio[loopType].show();
            _this.$wrapper[loopType].show();
            ++cnt;
        });

        if (cnt === 1) {
            _this.$radioArea.hide();
        } else {
            _this.$radioArea.show();
        }
        this.refresh();
    };

    LoopHeaderField.prototype.render = function (init) {
        var _this = this;
        this.$radio[this.loopType].jqxRadioButton({
            checked: true
        });

        this._showWrapper(this.loopType);
        _.forIn(this.props[LOOP_PROPERTY], function (val, key) {
            var conKey = _this.getKey(_this.loopType, key);
            if (_.has(_this.$input, conKey)) {
                _this.$input[conKey].setValue(val);
            }
        });

        if (this.isExpanded) {
            this.$expandedDiv.show();
            this.$unexpandedDiv.hide();
            this.$expandArrow.removeClass('fa-chevron-down');
            this.$expandArrow.addClass('fa-chevron-up');
        } else {
            this.$unexpandedDiv.empty();
            var template = {
                'count': {
                    label: 'Count',
                    props: [
                        {label: 'Start', key: 'start', exp: true},
                        {label: 'End', key: 'end', exp: true},
                        {label: 'Index Variable', key: 'index-variable', exp: false}
                    ]
                },
                'collection': {
                    label: 'Collection',
                    props: [
                        {label: 'Collection', key: 'collection', exp: true},
                        {label: 'Element Variable', key: 'element-variable', exp: false},
                        {label: 'Index Variable', key: 'index-variable', exp: false}
                    ]
                },
                'while': {
                    label: 'While',
                    props: [
                        {label: 'Expression', key: 'expression', exp: true},
                        {label: 'Index Variable', key: 'index-variable', exp: false}
                    ]
                }
            };

            var prop = this.loopType;
            var arr = [
                _this._createLabelInputPairReadOnly('Loop Type', template[prop].label)
            ];

            arr = arr.concat(_.map(template[prop].props, function (prop) {
                return _this._createLabelInputPairReadOnly(prop.label,
                    _this.props.prop[prop.key], prop.exp);
            }));
            this.$unexpandedDiv.append(arr);
            this.$expandedDiv.hide();
            this.$unexpandedDiv.show();
            this.$expandArrow.removeClass('fa-chevron-up');
            this.$expandArrow.addClass('fa-chevron-down');
        }
        this.refresh();
    };

    LoopHeaderField.prototype.createCodeMirrorInput = function ($input, options, callback, wrap) {
        var _this = this;
        var controlOptions = _.merge({}, {
            mode: 'brtc-control',
            scrollbarStyle: 'null',
            lineWrapping: false,
            matchBrackets: false,
            extraKeys: {
                'Ctrl-Space': 'autocomplete',
                'Tab': false, // Let focus go to next control
                'Shift-Tab': false // Let focus go to previous control
            },
            showTrailingSpace: true
        }, options);

        var codeMirror = CodeMirror.fromTextArea($input[0], controlOptions);

        var wrappedCodeMirror = (function (isWrap, cm) {
            return {
                setValue: function (val) {
                    var strippedValue = (function (_val, strip) {
                        var val = _val || '';
                        if (strip && _this.test(val)) {
                            return val.substring(3, val.length - 1);
                        }
                        return val;
                    }(val, isWrap));
                    cm.setValue(strippedValue);
                    callback(wrappedCodeMirror.getValue());
                },
                getValue: function () {
                    var val = cm.getValue();
                    if (isWrap) {
                        return '${=' + val + '}';
                    }
                    return val;
                },
                refresh: function () {
                    cm.refresh();
                }
            };
        }(wrap, codeMirror));

        Brightics.VA.Core.Utils.WidgetUtils
            .changeCodeMirrorLineToSingle(codeMirror);
        codeMirror.on('blur', function () {
            callback(wrappedCodeMirror.getValue());
        });

        return wrappedCodeMirror;
    };

    LoopHeaderField.prototype._createLabelInputPairReadOnly = function (label, _value, strip) {
        var value = _value || '';
        if (strip && this.test(value)) {
            value = value.substring(3, value.length - 1);
        }
        var $input = $(crel('input', {
            class: CLASS_NAME.READONLY_INPUT,
            value: value,
            title: value
        })).jqxInput({
            theme: Brightics.VA.Env.Theme,
            readOnly: true
        });

        var el = crel('div', {class: CLASS_NAME.READONLY_LABEL_INPUT_PAIR_WRAPPER},
            crel('label', {class: CLASS_NAME.READONLY_LABEL}, label),
            $input[0]
            // value
        );
        return el;
    };

    LoopHeaderField.prototype._createLabelInputPair = function (label,
            className, key, isExp, type, isMandatory) {
        var placeHolder = isExp ? 'Enter Expression' : 'Enter Variable';
        var width = isExp ? '100%' : '97%';
        var defaultClassName = 'brtc-va-widget-contents-input-control';
        var $input = $(crel('textarea', {class: className + ' ' + defaultClassName}));
        var _this = this;

        var el =
            crel('div', {class: CLASS_NAME.LABEL_INPUT_PAIR_WRAPPER},
                crel('div', {class: CLASS_NAME.LABEL_DIV}, label, isMandatory ?
                    crel('div', {
                        class: 'brtc-va-editors-sheet-controls-propertycontrol-mandatory'
                    }, '*') : ''),
                crel('span', $input[0])
            );

            // <div class="brtc-va-editors-sheet-panels-validation-tooltip-wrapper">   <i class="fa fa-exclamation-triangle" aria-hidden="true"></i>   <div class="brtc-va-editors-sheet-panels-validation-tooltip">'Start' is a required parameter.</div></div>

        var $validation = $(crel('div', {class: 'brtc-va-editors-sheet-panels-validation-tooltip-wrapper'},
            crel('i', {class: 'fa fa-exclamation-triangle', 'aria-hidden': 'true'}),
            crel('div', {class: 'brtc-va-editors-sheet-panels-validation-tooltip'},
                '\'' + label + '\' is required parameter.')
        ));


        this.$input[_this.getKey(type, key)] = this.createCodeMirrorInput($input,
            {
                placeholder: placeHolder,
                width: width,
                height: '25px'
            },
            function (val) {
                var newVal = val;
                var x = isExp ? _this.strip(newVal) : newVal;
                if (_.trim(x) === '' && isMandatory) {
                    $(el).after($validation);
                    $validation.show();
                } else {
                    $(el).after($validation);
                    $validation.hide();
                }
                if (newVal === (_this.valueMap[_this.getKey(type, key)] || '')) return;
                _this.valueMap[_this.getKey(type, key)] = newVal;
                _this.emit(INPUT_CHANGE, {
                    value: newVal,
                    path: [LOOP_PROPERTY, key]
                });
            }, isExp);

        return el;
    };

    LoopHeaderField.prototype._createRadioButton = function (label, key) {
        var _this = this;
        this.$radio[key] = $(crel('div',
            {class: 'brtc-loop-header-field-radiobutton'},
            label))
            .jqxRadioButton({
                theme: Brightics.VA.Env.Theme,
                groupName: LOOP_TYPE
            });

        this.$radio[key].bind('checked', function (evt) {
            if (_this.loopType === key) return;
            _this._showWrapper(key);
            _this.valueMap = {};
            _this.loopType = key;
            _.forIn(_this.$input, function ($inp) {
                $inp.setValue('');
            });
            _this.emit(TYPE_CHANGE, key);
        });
        return this.$radio[key][0];
    };

    LoopHeaderField.prototype._showWrapper = function (key) {
        _.forIn(this.$wrapper, function ($wrp) {
            $wrp.hide();
        });
        this.$wrapper[key].show();
        this.refresh();
    };

    LoopHeaderField.prototype.getLoopFunc = function () {
        return this.fnUnit ? this.fnUnit.func : 'forLoop';
    };

    LoopHeaderField.prototype.refresh = function () {
        var _this = this;
        var loopType = this.loopType;
        if (this.props) {
            _.forIn(this.props[LOOP_PROPERTY], function (val, key) {
                var conKey = _this.getKey(loopType, key);
                if (_.has(_this.$input, conKey)) {
                    _this.$input[conKey].refresh();
                }
            });
        }
    };

    LoopHeaderField.prototype.getKey = function (loopType, prop) {
        return loopType + '_' + prop;
    };

    LoopHeaderField.prototype.test = function (val) {
        return _.startsWith(val, '${=') && _.endsWith(val, '}');
    };

    LoopHeaderField.prototype.strip = function (_val) {
        var val = _val || '';
        if (this.test(val)) return val.substring(3, val.length - 1);
        return val;
    };


    Brightics.VA.Implementation.DataFlow.Editors.Header.LoopHeaderField = LoopHeaderField;
    /* eslint-disable no-invalid-this */
}.call(this));
/* eslint-disable no-invalid-this */

/* -----------------------------------------------------
 *  loop-header.js
 *  Created by hyunseok.oh@samsung.com on 2018-02-19.
 * ----------------------------------------------------*/

(function () {
    'use strict';
    var Brightics = this.Brightics;
    var ClassUtils = this.__module__.ClassUtils;
    var Header = Brightics.VA.Implementation.DataFlow.Editors.Header;

    function LoopHeader($parent, options) {
        this.$parent = $parent;
        this.$el = $([
            '<div class="brtc-loop-header">',
            '  <div class="brtc-loop-header-field-wrapper">',
            '  </div>',
            '</div>'
        ].join(''));

        this.data = {};
        this.$loopHeaderField = this.$el.find('.brtc-loop-header-field-wrapper');
        this.createField(this.$loopHeaderField);
        this.$parent.append(this.$el);
        this.hide();
    }

    ClassUtils.inherits(LoopHeader, Header.Header);

    LoopHeader.prototype.createField = function ($parent) {
        var _this = this;
        this.field = new Header.LoopHeaderField($parent, {});

        this.field.on('input-change', function (evt) {
            _this.emit('input-change', evt);
        });

        this.field.on('type-change', function (evt) {
            _this.emit('type-change', evt);
        });
    };

    LoopHeader.prototype.setData = function (param) {
        this.data = param;
        this.field.setData(param);
    };

    LoopHeader.prototype.render = function () {
        this.field.render();
    };

    LoopHeader.prototype.onShow = function () {
        this.field.render();
    };

    Header.LoopHeader = LoopHeader;
/* eslint-disable no-invalid-this */
}.call(this));
/* eslint-disable no-invalid-this */

/**
 * Created by jmk09.jung on 2018-02-13.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    function Toolbar($parent, options) {
        Brightics.VA.Core.Editors.Toolbar.call(this, $parent, options);
    }

    Toolbar.prototype = Object.create(Brightics.VA.Core.Editors.Toolbar.prototype);
    Toolbar.prototype.constructor = Toolbar;
    
    Toolbar.prototype.registerItems = function () {
        var items = Brightics.VA.Implementation.DataFlow.Toolbar.ItemsTemplate;
        for(var i in items) {
            this.addItem(items[i]);
        }
    };

    Brightics.VA.Implementation.DataFlow.Toolbar = Toolbar;
}).call(this);
/**
 * Created by jmk09.jung on 2018-02-13.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    function FunctionhelpItem($parent, options) {
        Brightics.VA.Core.Editors.Toolbar.FunctionhelpItem.call(this, $parent, options);
    }

    FunctionhelpItem.prototype = Object.create(Brightics.VA.Core.Editors.Toolbar.FunctionhelpItem.prototype);
    FunctionhelpItem.prototype.constructor = FunctionhelpItem;

    FunctionhelpItem.prototype.handleOnClick = function (event) {
        Brightics.VA.Core.Utils.ModelUtils.openFunctionReferencePopup('data');
    };

    Brightics.VA.Implementation.DataFlow.Toolbar.FunctionhelpItem = FunctionhelpItem;

}).call(this);
/**
 * Created by jmk09.jung on 2018-02-13.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    function RunItem($parent, options) {
        Brightics.VA.Core.Editors.Toolbar.RunItem.call(this, $parent, options);
    }

    RunItem.prototype = Object.create(Brightics.VA.Core.Editors.Toolbar.RunItem.prototype);
    RunItem.prototype.constructor = RunItem;

    RunItem.prototype.handleOnClick = function (event) {
        var editor = Studio.getEditorContainer().getActiveModelEditor();
        var modelContents = editor.getModel();

        var closeHandler = function (dialogResult) {
            if (dialogResult.OK) {
                editor.preProcess().then(function (runnable) {
                    Studio.getJobExecutor().launchModel(modelContents, dialogResult['args'], {runnable: runnable});
                });
            }
        };

        if (Brightics.VA.SettingStorage.getValue('editor.variable.visible') === 'true'
            && Object.keys(modelContents.variables).length > 0) {
            new Brightics.VA.Core.Dialogs.RunDataDialog(this.$mainControl, {
                close: closeHandler,
                analyticsModel: modelContents
            });
        } else {
            // Global Variable Show "OFF"인 경우, 전체 실행시 Global Variable의 Default값이
            // 서버로 전송되지 않던 버그 수정
            // 2017. 06. 02
            var defaultArgs = {};
            for (var key in modelContents.variables) {
                var gvDef = modelContents.variables[key];
                var temp;
                if (_.isArray(gvDef.value) && gvDef.value.length === 1) {
                    temp = gvDef.value[0];
                } else {
                    temp = gvDef.value;
                }

                if (!_.isUndefined(temp)) defaultArgs[key] = gvDef.value;
            }
            closeHandler({
                OK: true,
                args: defaultArgs
            });
        }
    };

    Brightics.VA.Implementation.DataFlow.Toolbar.RunItem = RunItem;

}).call(this);
/**
 * Created by jmk09.jung on 2018-02-13.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    Brightics.VA.Implementation.DataFlow.Toolbar.ItemsTemplate = [
        {"class": Brightics.VA.Implementation.DataFlow.Toolbar.RunItem},
        {"class": Brightics.VA.Core.Editors.Toolbar.Separator},

        {"class": Brightics.VA.Core.Editors.Toolbar.VariableItem},
        {"class": Brightics.VA.Core.Editors.Toolbar.Separator},

        {"class": Brightics.VA.Core.Editors.Toolbar.ClipboardItem},
        {"class": Brightics.VA.Core.Editors.Toolbar.HistoryItem},
        {"class": Brightics.VA.Core.Editors.Toolbar.RedoItem},
        {"class": Brightics.VA.Core.Editors.Toolbar.UndoItem},
        {"class": Brightics.VA.Core.Editors.Toolbar.Separator},

        // {"class": Brightics.VA.Core.Editors.Toolbar.IndexItem},
        {"class": Brightics.VA.Core.Editors.Toolbar.ZoomItem},
        {"class": Brightics.VA.Core.Editors.Toolbar.Separator},

        {"class": Brightics.VA.Core.Editors.Toolbar.MoveModeItem},
        {"class": Brightics.VA.Core.Editors.Toolbar.TooltipItem},
        {"class": Brightics.VA.Core.Editors.Toolbar.Separator},

        {"class": Brightics.VA.Core.Editors.Toolbar.DatasourceItem},
        {"class": Brightics.VA.Core.Editors.Toolbar.ScheduleItem},
        {"class": Brightics.VA.Core.Editors.Toolbar.VersionItem},
        {"class": Brightics.VA.Core.Editors.Toolbar.Separator},

        {"class": Brightics.VA.Implementation.DataFlow.Toolbar.FunctionhelpItem},
        {"class": Brightics.VA.Core.Editors.Toolbar.ModelInfoItem}
    ];

}).call(this);
/* global _ */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    root.Brightics.VA.Implementation.DataFlow.Utils.AddonFunctionUtil = {
        addFunction: function (addonFunction) {
            var contents = typeof addonFunction.contents === 'string' ? JSON.parse(addonFunction.contents) : addonFunction.contents;
            var id = addonFunction.id;
            if (contents.isFunction === false || Brightics.VA.Implementation.DataFlow.Functions[id]) return;

            var functionSpec = {
                'category': contents.category,
                'defaultFnUnit': {
                    'func': id,
                    'name': contents.name,
                    'param': {},
                    'display': {
                        'label': contents.label,
                        'diagram': {
                            'position': {'x': 20, 'y': 10}
                        },
                        'sheet': {}
                    },
                    'meta': contents.meta
                },
                'description': contents.description,
                'tags': contents.tags,
                'in-range': contents.inrange,
                'out-range': contents.outrange
            };

            var defaultSheetSpec = {'partial': [{'panel': [], 'layout': {}}], 'full': [{'panel': [], 'layout': {}}]};

            if (addonFunction.script_id) {
                functionSpec.defaultFnUnit.param.script = {
                    "metadata": "script",
                    "scriptId": addonFunction.script_id
                };
            }

            if (contents.context) {
                functionSpec.defaultFnUnit.context = contents.context;
            }

            if (contents.version) {
                functionSpec.defaultFnUnit.version = contents.version;
            }

            if (contents.version === '3.6' && contents.inputs &&
                JSON.stringify(contents.inputs) !== JSON.stringify({})) {
                functionSpec.defaultFnUnit.display.sheet.in = defaultSheetSpec;
                functionSpec.defaultFnUnit.inputs = contents.inputs;
                functionSpec.defaultFnUnit.meta = contents.meta;
            }
            else if (contents.inrange && contents.inrange.min !== 0 && contents.inrange.max !== 0) {
                functionSpec.defaultFnUnit.display.sheet.in = defaultSheetSpec;
                if (contents.inputs) {
                    functionSpec.defaultFnUnit.inputs = $.extend(true, {}, contents.inputs);
                } else {
                    functionSpec.defaultFnUnit.inData = [];
                }
            }

            if (contents.version === '3.6' && contents.outputs &&
                JSON.stringify(contents.outputs) !== JSON.stringify({})) {
                functionSpec.defaultFnUnit.display.sheet.out = defaultSheetSpec;
                functionSpec.defaultFnUnit.outputs = contents.outputs;
                functionSpec.defaultFnUnit.meta = contents.meta;
            }
            else if (contents.outrange && contents.outrange.min !== 0 && contents.outrange.max !== 0) {
                functionSpec.defaultFnUnit.display.sheet.out = defaultSheetSpec;
                if (contents.outputs) {
                    functionSpec.defaultFnUnit.outputs = $.extend(true, {}, contents.outputs);
                } else {
                    functionSpec.defaultFnUnit.outData = [];
                }
            } else {
                // functionSpec['connectable-functions'] = [];
            }

            if(contents.deprecated){
                functionSpec.deprecated = contents.deprecated;
                functionSpec["deprecated-message"] = contents["deprecated-message"] || '';
            }

            var param = (contents.specJson ? contents.specJson.params : contents.params) || [];
            functionSpec = this._setDefaultValues(functionSpec, param);

            Brightics.VA.Core.Functions.Library[id] = $.extend(true, {}, functionSpec);
            Brightics.VA.Implementation.DataFlow.Functions[id] = $.extend(true, {}, functionSpec);

            Brightics.VA.Implementation.DataFlow.Functions[id].propertiesPanel = this.createPropertiesPanel(contents.params);
            Brightics.VA.Implementation.DataFlow.Functions[id].validator = this.createValidator(contents);
        },
        _setDefaultValues: function (functionSpec, params) {
            var param;
            if (params) {
                for (var i = 0; i < params.length; i++) {
                    param = params[i];
                    if (typeof param.defaultValue !== 'undefined') {
                        functionSpec.defaultFnUnit.param[param.id] = param.defaultValue;
                    } else if (param.items && param.items.length > 0) {
                        const list = param.items
                            .filter(item => !!item.default)
                            .reduce((state, item) => [...state, item.value], []);
                        if (list.length === 1 &&
                            ['BooleanRadio', 'RadioButton'].some(control => control === param.control)) {
                            functionSpec.defaultFnUnit.param[param.id] = list[0];
                        } else if (param.control === 'CheckBox' && list.length > 0) {
                            functionSpec.defaultFnUnit.param[param.id] = list;
                        } else if (list.length > 1) {
                            functionSpec.defaultFnUnit.param[param.id] = list;
                        }
                    }
                }
            }

            return functionSpec;
        },
        createPropertiesPanel: function (params) {
            function InvokeProperties(parentId, options) {
                Brightics.VA.Implementation.DataFlow.Functions.BaseInvokeProperties.call(this, parentId, options);
            }

            InvokeProperties.prototype = Object.create(Brightics.VA.Implementation.DataFlow.Functions.BaseInvokeProperties.prototype);
            InvokeProperties.prototype.constructor = InvokeProperties;

            InvokeProperties.prototype._getParams = function () {
                return params;
            };

            return InvokeProperties;
        },
        createValidator: function (contents) {
            function InvokeValidator(parentId, options) {
                Brightics.VA.Implementation.DataFlow.Functions.InvokeValidator.call(this, parentId, options);
            }

            InvokeValidator.prototype = Object.create(Brightics.VA.Implementation.DataFlow.Functions.InvokeValidator.prototype);
            InvokeValidator.prototype.constructor = InvokeValidator;

            InvokeValidator.prototype._getContents = function () {
                return contents;
            };

            InvokeValidator.prototype._hasInData = function () {
                if (contents.inrange && contents.inrange.min && contents.inrange.min > 0) return true;
                if (_.isEmpty(contents.inputs)) return true;
                return false;
            };

            return InvokeValidator;
        }
    }
}).call(this);

/* global _ */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    root.Brightics.VA.Implementation.DataFlow.Utils.RunnableFactory = (function () {
        var substituteVariable = function (mainModel, variableRef) {
            var substituteFunction = function (fn) {
                if (fn[FUNCTION_NAME] === 'Subflow') {
                    fn.param.functions = _.map(fn.param.functions, substituteFunction);
                }
                var matched = _.filter(variableRef, function (ref) {
                    return ref.fid === fn.fid;
                });
                _.forEach(matched, function (ref) {
                    _.forIn(ref.param, function (variableName, key) {
                        fn.param[key] = '${=' + variableName + '}';
                    });
                });
                return fn;
            };

            var rec = function (model) {
                model.functions = _.map(model.functions, substituteFunction);
                var subModels = Brightics.VA.Core.Utils.NestedFlowUtils
                    .getChildModels(mainModel, model);
                _.forEach(subModels, rec);
            };
            return rec(mainModel);
        };

        var offSkipProperty = function (model) {
            var off = function (mod) {
                mod.functions = _.map(mod.functions, function (fn) {
                    var category = Brightics.VA.Core.Utils.WidgetUtils.getFunctionLibrary('data', fn.func).category;
                    fn.skip = (category === 'brightics')? fn.skip : false;
                    return fn;
                });
            };

            off(model);
            _.forIn(model.innerModels, off);
        };

        return {
            // TODO : Varaible assign
            createForUnit: function (fnUnit, jid, user, args, options) {
                var execUnit = $.extend(true, {}, fnUnit);
                Brightics.VA.Core.Utils.ModelUtils.checkAndRemoveOptionalInputs(execUnit);

                // TODO : Submodel fnUnit Persist
                Brightics.VA.Core.Utils.ModelUtils.carvePersist(execUnit, true);
                // Brightics.VA.Core.Utils.ModelUtils.deleteDisplay(execUnit);
                Brightics.VA.Core.Utils.ModelUtils.deleteEmptyArray(execUnit);

                var parentModel = fnUnit.parent();

                var mid = parentModel.mid;

                var mainModel = parentModel.getMainModel();
                var variables = _.cloneDeep(mainModel.variables);
                var variableRef = _.cloneDeep(mainModel.variableRef);                

                var subModels = Brightics.VA.Core.Utils.NestedFlowUtils
                    .getAllSubModelsFromFnUnit(mainModel, fnUnit).map(function (model) {
                        var ret = {};
                        ret[model.mid] = model;
                        return ret;
                    });

                var innerModels = _.cloneDeep(_.reduce(subModels, _.merge, {}));
                var optModels = _.cloneDeep(mainModel.optModels);

                var dummyModel = {
                    mid: mid,
                    type: 'data',
                    variables: variables,
                    functions: [execUnit],
                    links: [],
                    innerModels: innerModels,
                    optModels: optModels,
                    title: parentModel.title
                };

                Brightics.VA.Core.Utils.ModelUtils.extendModel(dummyModel);

                return Brightics.VA.Core.Utils.ModelUtils
                    .exportAsRunnablePromise(mainModel, dummyModel)
                    .then(function (runnable) {
                        var newDummyModel =
                            Brightics.VA.Core.Utils.ModelUtils.exportAsRunnable(dummyModel);
                        
                        runnable.models[dummyModel.mid] =
                            newDummyModel;
                        _.forIn(args, function (values, key) {
                            if (newDummyModel.variables[key]) {
                                newDummyModel.variables[key].value = values;
                            }
                        });

                        newDummyModel.variableRef = variableRef;
                        _.forIn(runnable.models, function (model) {
                            substituteVariable(model, model.variableRef);
                        });
                        offSkipProperty(newDummyModel);
                        runnable.main = mid;

                        return Brightics.OptModelManager.buildOptRunnable(runnable);
                    }).catch(console.error);
            },
            createForFlow: function (_model, jid, user, args, options) {
                var model = _.cloneDeep(_model);
                var mainModel = model.getMainModel();
                var variables = _.cloneDeep(mainModel.variables);
                var variableRef = _.cloneDeep(mainModel.variableRef);
                return Brightics.VA.Core.Utils.ModelUtils
                    .exportAsRunnablePromise(mainModel, model)
                    .then(function (runnable) {
                        model = runnable.models[runnable.main];
                        model.variables = variables;
                        var newModel =
                        Brightics.VA.Core.Utils.ModelUtils.exportAsRunnable(model);
                        
                        runnable.models[runnable.main] = newModel;
                        offSkipProperty(newModel);

                        newModel.variableRef = variableRef;
                        _.forIn(runnable.models, function (model) {
                            substituteVariable(model, model.variableRef);
                        });
                        _.forIn(args, function (values, key) {
                            if (newModel.variables[key]) {
                                newModel.variables[key].value = values;
                            }
                        });
                        return Brightics.OptModelManager.buildOptRunnable(runnable);
                    })
                    .catch(console.error);
            }
        };
    }());
}).call(this);

/**
 * Created by sds on 2017-07-17.
 */
(function () {
    'use strict';

    var root = this;
    var Brightics = root.Brightics;

    function DataflowSideBarManager(parentId) {
        Brightics.VA.Core.Tools.Manager.SideBarManager.call(this, parentId);
    }

    DataflowSideBarManager.prototype = Object.create(Brightics.VA.Core.Tools.Manager.SideBarManager.prototype);
    DataflowSideBarManager.prototype.constructor = DataflowSideBarManager;

    DataflowSideBarManager.prototype.configureLayout = function () {
        this.layout = {
            variables: {
                id: 'variables',
                label: 'Variables',
                position: 'left',
                width: 330,
                manager: this
            },
            palette: {
                id: 'palette',
                label: 'Palette',
                position: 'right',
                width: 440,
                manager: this
            },
            returnTable: {
                id: 'returnTable',
                label: 'Return Data',
                position: 'right',
                width: 330,
                manager: this
            },
            inputTable: {
                id: 'inputTable',
                label: 'Input Data',
                position: 'left',
                width: 330,
                manager: this
            },
            outline: {
                id: 'outline',
                label: 'Outline',
                position: 'left',
                width: 330,
                manager: this
            },
            optSetting: {
                id: 'optSetting',
                'description-label': 'Optimization',
                label: 'Optimization Setting',
                position: 'right',
                width: 367,
                manager: this
            }
        };
    };

    DataflowSideBarManager.prototype.createControls = function () {
        this.sideBar.variables =
            new Brightics.VA.Core.Tools.SideBar.VariablesSideBar(
                this.$parent.find('.brtc-va-studio-sidebar[name=variables]'),
                this.layout.variables
            );
        this.sideBar.palette =
            new Brightics.VA.Core.Tools.SideBar.PaletteSideBar(
                this.$parent.find('.brtc-va-studio-sidebar[name=palette]'),
                this.layout.palette
            );
        this.sideBar.returnTable =
            new Brightics.VA.Core.Tools.SideBar.ReturnTableSideBar(
                this.$parent.find('.brtc-va-studio-sidebar[name=returnTable]'),
                this.layout.returnTable
            );
        this.sideBar.inputTable =
            new Brightics.VA.Core.Tools.SideBar.InputTableSideBar(
                this.$parent.find('.brtc-va-studio-sidebar[name=inputTable]'),
                this.layout.inputTable
            );
        this.sideBar.outline =
            new Brightics.VA.Core.Tools.SideBar.OutlineSideBar(
                this.$parent.find('.brtc-va-studio-sidebar[name=outline]'),
                this.layout.outline
            );
        this.sideBar.optSetting =
            new Brightics.VA.Core.Tools.SideBar.OptSettingSideBar(
                this.$parent.find('.brtc-va-studio-sidebar[name=optSetting]'),
                this.layout.optSetting
            );
    };

    DataflowSideBarManager.prototype.onActivated = function () {
        this.sideBar.palette.onActivated();
    };

    DataflowSideBarManager.prototype.refresh = function () {
        this.sideBar.outline.refresh();
    };

    DataflowSideBarManager.prototype.updateStatus = function (event) {
        this.sideBar.outline.updateStatus(event);
    };

    Brightics.VA.Implementation.DataFlow.Tools.Manager.SideBarManager = DataflowSideBarManager;

}).call(this);
(function () {
    'use strict';
    var root = this;
    var dataflow = root.Brightics.VA.Implementation.DataFlow;
    var clazz = dataflow.Clazz;

    var Interface = root.Brightics.VA.Core.Interface;

    Interface.Clazz[clazz] = clazz;
    Interface.Label[clazz] = dataflow.Label;
    Interface.Validator[clazz] = dataflow.Validator;
    Interface.Editor[clazz] = dataflow.Editor;
    Interface.Toolbar[clazz] = dataflow.Toolbar;
    Interface.SideBarManager[clazz] = dataflow.Tools.Manager.SideBarManager;
    Interface.Launcher[clazz] = dataflow.DataFlowLauncher;
    Interface.Functions[clazz] = dataflow.Functions;
    Interface.WidgetUtils[clazz] = dataflow.Utils.WidgetUtils;
    Interface.DefaultModel[clazz] = dataflow.defaultModel;
    Interface.AddonFunctionUtil[clazz] = dataflow.Utils.AddonFunctionUtil;
    Interface.ProjectContextMenuList[clazz] = [
        'duplicate',
        'export',
        'deploy',
        'exportAsRunnable',
        'version'
    ];
    Interface.Clipboard[clazz] = true;
    Interface.ModelLayoutManager[clazz] = dataflow.ModelLayoutManager;
    Interface.RunnableFactory[clazz] = dataflow.Utils.RunnableFactory;

}).call(this);