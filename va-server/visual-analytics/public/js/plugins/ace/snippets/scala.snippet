# imports
snippet sparkpackage
	org.apache.spark

# SparkContext
snippet parallelize
	sc.parallelize(${1:seq}, ${2:numSlices})

# SQLContext
# baseRelationToDataFrame
snippet sqlc_baseRelationToDataFrame
	baseRelationToDataFrame(${1:baseRelation})
# cacheTable
snippet sqlc_cacheTable
	cacheTable(${1:tableName})
# clearCache
snippet sqlc_clearCache
	clearCache()
# createDataFrame(List, Class)
snippet sqlc_createDataFrame(List, Class)
	createDataFrame(${1:data}, ${2:beanClass})
# createDataFrame(RDD, Class)
snippet sqlc_createDataFrame(RDD, Class)
	createDataFrame(${1:rdd}, ${2:beanClass})
# createDataFrame(row, scheme)
snippet sqlc_createDataFrame(row, scheme)
	createDataFrame(${1:rows}, ${2:schema})
# createDataFrame(rowRDD, schema)
snippet sqlc_createDataFrame(rowRDD, schema)
	createDataFrame(${1:rowRDD}, ${2:schema})
# createDataSet
snippet sqlc_createDataset
	createDataset(${1:data})
# dropTempTable
snippet sqlc_dropTempTable
	dropTempTable(${1:tableName})
# getAllConfs
snippet sqlc_getAllConfs
	getAllConfs
# getConf(key, default)
snippet sqlc_getConf(key, default)
	getConf(${1:key}, ${2:defaultValue})
# getConf(key)
snippet sqlc_getConf(key)
	getConf(${1:key})
# isCached
snippet sqlc_isCached
	isCached(${1:tableName})
# isRootContext
snippet sqlc_isRootContext
	isRootContext
# newSession
snippet sqlc_newSession
	newSession()
# range
snippet sqlc_range(start, end, step, numPartitions)
	range(${1:start}, ${2:end}, ${3:step}, ${4:numPartitions})
# range(start, end)
snippet sqlc_range(start, end)
	range(${1:start}, ${2:end})
# range(end)
snippet sqlc_range(end)
	range(${1:end})
# read
snippet sqlc_read
	read
# setConf(key, value)
snippet sqlc_setConf(key, value)
	setConf(${1:key}, ${2:value})
# setConf(props)
snippet sqlc_setConf(props)
	setConf(${1:props})
# sql
snippet sqlc_sql
	sql(${1:sqlText})
# table
snippet sqlc_table
	table(${1:tableName})
# tableNames
snippet sqlc_tablenames
	tableNames()
# tableNames(databaseName)
snippet sqlc_tableNamesn
	tableNames(${1:databaseName})
# tables
snippet sqlc_tables
	tables()
# tables(databaseName)
snippet sqlc_tables(databaseName)
	tables(${1:databaseName})
# udf
snippet sqlc_udf
	udf
# uncacheTable
snippet sqlc_uncacheTable
	uncacheTable(${1:tableName})

# DataFrame

# agg
snippet df_agg(expr, exprs)
	agg(${1:expr}, ${2:exprs})
# agg(exprs)
snippet df_agg(exprs)
	agg(${1:exprs})
# agg(aggexpr)
snippet df_agg(aggExpr, aggExprs)
	agg(${1:aggExpr}, ${2:aggExprs})
# alias
snippet df_alias
	alias(${1:alias})
# apply
snippet df_apply
	apply(${1:colName})
# as
snippet df_as
	as(${1:alias})
# cache
snippet df_cache
	cache()
# coalesce
snippet df_coalesce
	coalesce(${1:numPartitions})
# col
snippet df_col
	col(${1:colName})
# collect
snippet df_collect
	collect()
# collectAsList
snippet df_collectAsList
	collectAsList()
# columns
snippet df_columns
	columns
# count
snippet df_count
	count()
# cube
snippet df_cube(col1, cols)
	cube(${1:col1}, ${2:cols})
# cube(cols)
snippet df_cube(cols)
	cube(${1:cols})
# describe
snippet df_describe
	describe(${1:cols})
# distinct
snippet df_distinct
	distinct()
# drop
snippet df_drop(col)
	drop(${1:col})
# drop(colName)
snippet df_drop(colName)
	drop(${1:colName})
# dropDuplicates
snippet df_dropDuplicates(colNames)
	dropDuplicates(${1:colNames})
# dropDuplicates()
snippet df_dropDuplicates
	dropDuplicates()
# dtypes
snippet df_dtypes
	dtypes
# except
snippet df_except
	except(${1:other})
# explain
snippet df_explain
	explain()
# explain(extended)
snippet df_explain(extended)
	explain(${1:extended})
# explode
snippet df_explode(inputColumn, outputColumn)
	explode(${1:inputColumn}, ${2:outputColumn}){${3:f}: ${4:T} => ${5://..}}
# explode(row)
snippet df_explode(input)
	explode(${1:input}){case Row(${2:f}: ${3:T}) => ${5://..}}
# filter
snippet df_filter(conditionExpr)
	filter(${1:conditionExpr})
# filter
snippet df_filter(condition)
	filter(${1:condition})
# first
snippet df_first
	first()
# flatMap
snippet df_flatMap
	flatMap(${1://..})
# foreach
snippet df_foreach
	foreach(${1:f} => ${2://Unit})
# foreachPartition
snippet df_foreachPartition
	foreachPartition(${1:f} => ${2://Unit})
# groupBy
snippet df_groupBy(col1, cols)
	groupBy(${1:col1}, ${2:cols})
# groupBy(cols)
snippet df_groupBy(cols)
	groupBy(${1:cols})
# head
snippet df_head
	head()
# head(n)
snippet df_head(n)
	head(${1:n})
# inputFiles
snippet df_inputFiles
	inputFiles
# intersect
snippet df_intersect
	intersect(${1:other})
# isLocal
snippet df_isLocal
	isLocal
# javaRDD
snippet df_javaRDD
	javaRDD
# join
snippet df_join(right, joinExprs, joinType)
	join(${1:right}, ${2:joinExprs}, ${3:joinType})
# join(right joinExprs)
snippet df_join(right, joinExprs)
	join(${1:right}, ${2:joinExprs})
# join(right, usingColumns, joinType)
snippet df_join(right, usingColumns, joinType)
	join(${1:right}, ${2:usingColumns}, ${3:joinType})
# join(right, usingColumns)
snippet df_join(right, usingColumns)
	join(${1:right}, ${2:usingColumns})
# join(right, usingColumn)
snippet df_join(right, usingColumn)
	join(${1:right}, ${2:usingColumn})
# join(right)
snippet df_join(right)
	join(${1:right})
# limit
snippet df_limit
	limit(${1:n})
# map
snippet df_map
	map(${1:f} => ${2://R})
# mapPartitions
snippet df_mapPartitions
	mapPartitions(${1:f} => ${2://Iterator[R]})
# na
snippet df_na
	na
# orderBy
snippet df_orderBy(sortExprs)
	orderBy(${1:sortExprs})
# orderBy(sortCol, sortCols)
snippet df_orderBy(sortCol, sortCols)
	orderBy(${1:sortCol}, ${2:sortCols})
# persist(newLevel)
snippet df_persist(newLevel)
	persist(${1:newLevel})
# persist()
snippet df_persist
	persist()
# printSchema
snippet df_printSchema
	printSchema()
# queryExecution
snippet df_queryExecution
	queryExecution
# randomSplit(weights)
snippet df_randomSplit(weights)
	randomSplit(${1:weights})
# randomSplit(weights, seed)
snippet df_randomSplit(weights, seed)
	randomSplit(${1:weights}, ${2:seed})
# rdd
snippet df_rdd
	rdd
# registerTempTable
snippet df_registerTempTable
	registerTempTable(${1:tableName})
# repartition(partitionExprs)
snippet df_repartition(partitionExprs)
	repartition(${1:partitionExprs})
# repartition(numPartitions, partitionExprs)
snippet df_repartition(numPartitions, partitionExprs)
	repartition(${1:numPartitions}, ${2:partitionExprs})
# repartition(numPartitions)
snippet df_repartition(numPartitions)
	repartition(${1:numPartitions})
# rollup(col1, cols)
snippet df_rollup(col1, cols)
	rollup(${1:col1}, ${2:cols})
# rollup(cols)
snippet df_rollup(cols)
	rollup(${1:cols})
# sample(withReplacement, fraction)
snippet df_sample(withReplacement, fraction)
	sample(${1:withReplacement}, ${2:fraction})
# sample(withReplacement, fraction, seed)
snippet df_sample(withReplacement, fraction, seed)
	sample(${1:withReplacement}, ${2:fraction}, ${3:seed})
# schema
snippet df_schema
	schema
# select(col, cols)
snippet df_select(col, cols)
	snippet(${1:col}, ${2:cols})
# select(cols)
snippet df_select(cols)
	snippet(${1:cols})
# selectExpr
snippet df_selectExpr
	selectExpr(${1:exprs})
# show
snippet df_show
	show()
# show(numRows, truncate)
snippet df_show(numRows, truncate)
	show(${1:numRows}, ${2:truncate})
# show(truncate)
snippet df_show(truncate)
	show(${1:truncate})
# show(numRows)
snippet df_show(numRows)
	show(${1:numRows})
# sort(sortExprs)
snippet df_sort(sortExprs)
	sort(${1:sortExprs})
# sort(sortCol, sortCols)
snippet df_sort(sortCol, sortCols)
	sort(${1:sortCol}, ${2:sortCols})
# sortWithinPartitions(sortCol, sortCols)
snippet df_sortWithinPartitions(sortCol, sortCols)
	sortWithinPartitions(${1:sortCol}, ${2:sortCols})
# sortWithinPartitions(sortExprs)
snippet df_sortWithinPartitions(sortExprs)
	sortWithinPartitions(${1:sortExprs})
# sqlContext
snippet df_sqlContext
	sqlContext
# stat
snippet df_stat
	stat
# take
snippet df_take
	take(${1:n})
# takeAsList
snippet df_takeAsList
	takeAsList(${1:n})
# toDF
snippet df_toDF
	toDF()
# toDF(colNames)
snippet df_toDF(colNames)
	toDF(${1:colNames})
# toJSON
snippet df_toJSON
	toJSON
# toJavaRDD
snippet df_toJavaRDD
	toJavaRDD
# toString
snippet df_toString
	toString()
# transform
snippet df_transform
	transform(${1:t} => ${2://...})
# unionAll
snippet df_unionAll
	unionAll(${1:other})
# unpersist
snippet df_unpersist
	unpersist()
# unpersist(blocking)
snippet df_unpersist(blocking)
	unpersist(${1:blocking})
# where(conditionExpr)
snippet df_where(conditionExpr)
	where(${1:conditionExpr})
# where(condition)
snippet df_where(condition)
	where(${1:condition})
# withColumn
snippet df_withColumn
	withColumn(${1:colName}, ${2:col})
# withColumnRenamed
snippet df_withColumnRenamed
	withColumnRenamed(${1:existingName}, ${2:newName})
# write
snippet df_write
	write

# RDD
# aggregate
snippet rdd_aggregate
	aggregate(${1:zeroValue})(${2:seqOp} => ${3://...}, ${4:combOp} => ${5://..})
# cache
snippet rdd_cache
	cache()
# cartesian
snippet rdd_cartesian
	cartesian(${1:other})
# checkpoint
snippet rdd_checkpoint
	checkpoint()
# coalesce
snippet rdd_coalesce
	coalesce(${1:numPartitions}, ${2:shuffle})
# collect(partialFunction)
snippet rdd_collect(f)
	collect(${1:f})
# collect
snippet rdd_collect
	collect()
# context
snippet rdd_context
	context
# count
snippet rdd_count
	count()
# countApprox
snippet rdd_countApprox
	countApprox(${1:timeout}, ${2:confidence})
# countApproxDistinct(relativeSD)
snippet rdd_countApproxDistinct(relativeSD)
	countApproxDistinct(${1:relativeSD})
# countApproxDistinct(p, sp)
snippet rdd_countApproxDistinct(p, sp)
	countApproxDistinct(${1:p}, ${2:sp})
# countByValue()
snippet rdd_countByValue
	countByValue()
# countByValueApprox
snippet rdd_countByValueApprox
	countByValueApprox(${1:timeout}, ${2:confidence})
# dependencies
snippet rdd_dependencies
	dependencies
# distinct
snippet rdd_distinct
	distinct()
# distinct(numPartitions)
snippet rdd_distinct(numPartitions)
	distinct(${1:numPartitions})
# filter
snippet rdd_filter
	filter(${1:f} => ${2://...})
# first
snippet rdd_first
	first()
# flatMap
snippet rdd_flatMap
	flatMap(${1:f} => {$2://...})
# fold
snippet rdd_fold
	fold(${1:zeroValue})
# foreach
snippet rdd_foreach
	foreach(${1:f} => ${2://...})
# foreachPartition
snippet rdd_foreachPartition
	foreachPartition({$1:f} => ${2://...})
# getCheckpointFile
snippet rdd_getCheckpointFile
	getCheckpointFile
# getNumPartitions
snippet rdd_getNumPartitions
	getNumPartitions
# getStorageLevel
snippet rdd_getStorageLevel
	getStorageLevel
# glom
snippet rdd_glom
	glom()
# groupBy(f => K, p)
snippet rdd_groupBy(f => K, p)
	groupBy(${1:f} => ${2://..}, ${3:p})
# groupBy(f => K, numPartitions)
snippet rdd_groupBy(f => K, numPartitions)
	groupBy(${1:f} => ${2://..}, ${3:numPartitions})
# groupBy(f => K)
snippet rdd_groupBy(f => K)
	groupBy(${1:f} => ${2://..})
# id
snippet rdd_id
	id
# intersection(other)
snippet rdd_intersection(other)
	intersection(${1:other})
# intersection(other, numPartitions)
snippet rdd_intersection(other, numPartitions)
	intersection(${1:other}, ${2:numPartitions})
# intersection(other, partitioner)
snippet rdd_intersection(other, partitioner)
	intersection(${1:other}, ${2:partitioner})
# intersection(other)
snippet rdd_intersection(other)
	intersection(${1:other})
# isCheckpointed
snippet rdd_isCheckpointed
	isCheckpointed
# isEmpty
snippet rdd_isEmpty
	isEmpty()
# iterator
snippet rdd_iterator
	iterator(${1:split}, ${2:context})
# keyBy
snippet rdd_keyBy
	keyBy(${1:f} => ${2://..})
# localCheckpoint
snippet rdd_localCheckpoint
	localCheckpoint()
# map
snippet rdd_map
	map(${1:f} => ${2://..})
# mapPartitions
snippet rdd_mapPartitions
	mapPartitions(${1:f} => ${2://..}, ${3:preservesPartitioning})
# mapPartitionsWithIndex
snippet rdd_mapPartitionsWithIndex
	mapPartitionsWithIndex(${1:f} => ${2://..}, ${3:preservePartitioning})
# max
snippet rdd_max
	max()
# min
snippet rdd_min
	min()
# name
snippet rdd_name
	name
# partitioner
snippet rdd_partitioner
	partitioner
# partitions
snippet rdd_partitions
	partitions
# persist
snippet rdd_persist
	persist()
# persist(newLevel)
snippet rdd_persist(newLevel)
	persist(${1:newLevel})
# pipe
snippet rdd_pipe(command)
	pipe(${1:command})
# pipe(command, env)
snippet rdd_pipe(command, env)
	pipe(${1:command}, ${2:env})
# pipe(command, env, printPipeContext => , printRDDElement => , separateWorkingDir)
snippet rdd_pipe(command, env, printPipeContext => Unit, printRDDElement => Unit, separateWorkingDir)
	pipe(${1:command}, ${2:env}, ${3:printPipeContext} => ${4:Unit}, ${5:printRDDElement} => ${6:Unit}, ${7:separateWorkingDir})
# preferredLocations
snippet rdd_preferredLocations
	preferredLocations(${1:split})
# randomSplit
snippet rdd_randomSplit
	randomSplit(${1:weights}, ${2:seed})
# reduce
snippet rdd_reduce
	reduce(${1:f} => ${2:T})
# repartition
snippet rdd_repartition
	repartition(${1:numPartitions})
# sample
snippet rdd_sample
	sample(${1:withReplacement}, ${2:fraction}, ${3:seed})
# saveAsObjectFile
snippet rdd_saveAsObjectFile
	saveAsObjectFile(${1:path})
# saveAsTextFile
snippet rdd_saveAsTextFile(path, codec)
	saveAsTextFile(${1:path}, ${2:codec})
# saveAsTextFile(path)
snippet rdd_saveAsTextFile(path)
	saveAsTextFile(${1:path})
# setName
snippet rdd_setName
	setName(${1:_name})
# sortBy
snippet rdd_sortBy
	sortBy(${1:f} => ${2:K}, ${3:ascending}, ${4:numPartitions})
# sparkContext
snippet rdd_sparkContext
	sparkContext
# subtract(other, p)
snippet rdd_subtract(other, p)
	subtract(${1:other}, ${2:p})
# subtract(other, numPartitions)
snippet rdd_subtract(other, numPartitions)
	subtract(${1:other}, ${2:numPartitions})
# subtract(other)
snippet rdd_subtract(other)
	subtract(${1:other})
# take
snippet rdd_take
	take(${1:num})
# takeOrdered
snippet rdd_takeOrdered
	takeOrdered(${1:num})
# takeSample
snippet rdd_takeSample
	takeSample(${1:withReplacement}, ${2:num}, ${3:seed})
# toDebugString
snippet rdd_toDebugString
	toDebugString
# toJavaRDD
snippet rdd_toJavaRDD
	toJavaRDD()
# toLocalIterator
snippet rdd_toLocalIterator
	toLocalIterator
# toString
snippet rdd_toString
	toString()
# top
snippet rdd_top
	top(${1:num})
# treeAggregate
snippet rdd_treeAggregate
	treeAggregate(${1:zeroValue})(${2:seqOp} => ${3:U}, ${4:combOp} => $3, ${5:depth})
# treeReduce
snippet rdd_treeReduce
	treeReduce(${1:f} => ${2:T}, ${3:depth})
# union
snippet rdd_union
	union(${1:other})
# unpersist
snippet rdd_unpersist
	unpersist(${1:blocking})
# zip
snippet rdd_zip
	zip(${1:other})
# zipPartitions(rdd2, rdd3, rdd4)(f => Iterator[V])
snippet	zipPartitions(rdd2, rdd3, rdd4)(f => Iterator[V])
	zipPartitions(${1:rdd2}, ${2:rdd3}, ${3:rdd4})(${4:f} => ${5:Iterator[V]})
# zipPartitions(rdd2, rdd3, rdd4, preservesPartitioning)(f => Iterator[V])
snippet rdd_zipPartitions(rdd2, rdd3, rdd4, preservesPartitioning)(f => Iterator[V])
	zipPartitions($(1:rdd2}, ${2:rdd3}, ${3:rdd4}, ${4:preservesPartitioning})(${5:f} => ${6:Iterator[V]})
# zipPartitions(rdd2, rdd3)(f => Iterator[V])
snippet rdd_zipPartitions(rdd2, rdd3)(f => Iterator[V])
	zipPartitions($(1:rdd2}, ${2:rdd3})(${3:f} => ${4:Iterator[V]})
# zipPartitions(rdd2, rdd3, preservesPartitioning)(f => Iterator[V])
snippet rdd_zipPartitions(rdd2, rdd3, preservesPartitioning)(f => Iterator[V])
	zipPartitions($(1:rdd2}, ${2:rdd3}, ${3:preservesPartitioning})(${4:f} => ${5:Iterator[V]})
# zipPartitions(rdd2)(f => Iterator[V])
snippet rdd_zipPartitions(rdd2)(f => Iterator[V])
	zipPartitions($(1:rdd2})(${2:f} => ${3:Iterator[V]})
# zipPartitions(rdd2, preservesPartitioning)(f => Iterator[V])
snippet rdd_zipPartitions(rdd2, preservesPartitioning)(f => Iterator[V])
	zipPartitions($(1:rdd2}, ${2:preservesPartitioning})(${3:f} => ${4:Iterator[V]})
# zipWithIndex
snippet rdd_zipWithIndex
	zipWithIndex()
# zipWithUniqueId
snippet rdd_zipWithUniqueId
	zipWithUniqueId()
